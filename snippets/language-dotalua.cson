'.source.lua':
  'return the ActionState object for this unit.':
    'prefix': 'ActionState'
    'body': 'ActionState() ${1:--[[Returns:handle\nreturn the ActionState object for this unit.\n]]}'
  'Add an ability to this unit by name.':
    'prefix': 'AddAbility'
    'body': 'AddAbility(${1:string a}) ${2:--[[Returns:void\nAdd an ability to this unit by name.\n]]}'
  'No Description Set':
    'prefix': 'AddAegisPickup'
    'body': 'AddAegisPickup(${1:int a}) ${2:--[[Returns:void\nNo Description Set\n]]}'
  'Adds a team (by index) to the broadcast list':
    'prefix': 'AddBroadcastTeamTarget'
    'body': 'AddBroadcastTeamTarget(${1:int a}) ${2:--[[Returns:void\nAdds a team (by index) to the broadcast list\n]]}'
  'No Description Set':
    'prefix': 'AddClaimedFarm'
    'body': 'AddClaimedFarm(${1:int a}, ${2:float b}) ${3:--[[Returns:void\nNo Description Set\n]]}'
  'Adds experience to this unit.':
    'prefix': 'AddExperience'
    'body': 'AddExperience(${1:float amount}, ${2:bool applyBotDifficultyScaling}) ${3:--[[Returns:bool\nAdds experience to this unit.\n]]}'
  'No Description Set':
    'prefix': 'AddGoldSpentOnSupport'
    'body': 'AddGoldSpentOnSupport(${1:int a}, ${2:int b}) ${3:--[[Returns:void\nNo Description Set\n]]}'
  'Apply an impulse at a worldspace position to the physics':
    'prefix': 'AddImpulseAtPosition'
    'body': 'AddImpulseAtPosition(${1:Vector a}, ${2:Vector b}) ${3:--[[Returns:void\nApply an impulse at a worldspace position to the physics\n]]}'
  'Add an item to this unit\'s inventory.':
    'prefix': 'AddItem'
    'body': 'AddItem(${1:handle a}) ${2:--[[Returns:void\nAdd an item to this unit\'s inventory.\n]]}'
  'Add the specified item drop to this creature':
    'prefix': 'AddItemDrop'
    'body': 'AddItemDrop(${1:handle a}) ${2:--[[Returns:void\nAdd the specified item drop to this creature\n]]}'
  'No Description Set':
    'prefix': 'AddNewModifier'
    'body': 'AddNewModifier(${1:handle caster}, ${2:handle optionalSourceAbility}, ${3:string modifierName}, ${4:handle modifierData}) ${5:--[[Returns:void\nNo Description Set\n]]}'
  'Adds the no draw flag.':
    'prefix': 'AddNoDraw'
    'body': 'AddNoDraw() ${1:--[[Returns:void\nAdds the no draw flag.\n]]}'
  'Add an output':
    'prefix': 'AddOutput'
    'body': 'AddOutput(${1:string a}, ${2:string b}) ${3:--[[Returns:void\nAdd an output\n]]}'
  'Precaches a specific resource':
    'prefix': 'AddResource'
    'body': 'AddResource(${1:string a}) ${2:--[[Returns:void\nPrecaches a specific resource\n]]}'
  'No Description Set':
    'prefix': 'AddRunePickup'
    'body': 'AddRunePickup(${1:int a}) ${2:--[[Returns:void\nNo Description Set\n]]}'
  'Add a subquest to this quest':
    'prefix': 'AddSubquest'
    'body': 'AddSubquest(${1:handle a}) ${2:--[[Returns:void\nAdd a subquest to this quest\n]]}'
  'Add linear and angular velocity to the physics object':
    'prefix': 'AddVelocity'
    'body': 'AddVelocity(${1:Vector a}, ${2:Vector b}) ${3:--[[Returns:void\nAdd linear and angular velocity to the physics object\n]]}'
  'No Description Set':
    'prefix': 'AlertNearbyUnits'
    'body': 'AlertNearbyUnits(${1:handle a}, ${2:handle b}) ${3:--[[Returns:void\nNo Description Set\n]]}'
  'No Description Set':
    'prefix': 'AngerNearbyUnits'
    'body': 'AngerNearbyUnits() ${1:--[[Returns:void\nNo Description Set\n]]}'
  'Returns the number of degrees difference between two yaw angles':
    'prefix': 'AngleDiff'
    'body': 'AngleDiff(${1:float ang1}, ${2:float ang2}) ${3:--[[Returns:float\nReturns the number of degrees difference between two yaw angles\n]]}'
  'Appends a \'\'string\'\' to a log file on the server':
    'prefix': 'AppendToLogFile'
    'body': 'AppendToLogFile(${1:string a}, ${2:string b}) ${3:--[[Returns:void\nAppends a \'\'string\'\' to a log file on the server\n]]}'
  'Apply a Velocity Impulse':
    'prefix': 'ApplyAbsVelocityImpulse'
    'body': 'ApplyAbsVelocityImpulse(${1:Vector a}) ${2:--[[Returns:void\nApply a Velocity Impulse\n]]}'
  'Pass \'\'table\'\' - Inputs: victim, attacker, damage, damage_type, damage_flags, abilityReturn damage done.':
    'prefix': 'ApplyDamage'
    'body': 'ApplyDamage(${1:handle DamageTable}) ${2:--[[Returns:float\nPass \'\'table\'\' - Inputs: victim, attacker, damage, damage_type, damage_flags, abilityReturn damage done.\n]]}'
  'No Description Set':
    'prefix': 'ApplyDataDrivenModifier'
    'body': 'ApplyDataDrivenModifier(${1:handle source}, ${2:handle target}, ${3:string modifier_name}, ${4:handle modifierArgs}) ${5:--[[Returns:void\nNo Description Set\n]]}'
  'Apply an Ang Velocity Impulse':
    'prefix': 'ApplyLocalAngularVelocityImpulse'
    'body': 'ApplyLocalAngularVelocityImpulse(${1:Vector a}) ${2:--[[Returns:void\nApply an Ang Velocity Impulse\n]]}'
  'No Description Set':
    'prefix': 'AreUnitsSharedWithPlayerID'
    'body': 'AreUnitsSharedWithPlayerID(${1:int a}, ${2:int b}) ${3:--[[Returns:bool\nNo Description Set\n]]}'
  'No Description Set':
    'prefix': 'AttackNoEarlierThan'
    'body': 'AttackNoEarlierThan(${1:float a}) ${2:--[[Returns:void\nNo Description Set\n]]}'
  'No Description Set':
    'prefix': 'AttackReady'
    'body': 'AttackReady() ${1:--[[Returns:bool\nNo Description Set\n]]}'
  'Draws an axis. Specify origin + orientation in world space.':
    'prefix': 'Axis'
    'body': 'Axis(${1:Vector a}, ${2:Quaternion b}, ${3:float c}, ${4:bool d}, ${5:float e}) ${6:--[[Returns:void\nDraws an axis. Specify origin + orientation in world space.\n]]}'
  '(\'\'vector\'\',\'\'float\'\') constructs a quaternion representing a rotation by angle around the specified \'\'vector\'\' axis':
    'prefix': 'AxisAngleToQuaternion'
    'body': 'AxisAngleToQuaternion(${1:Vector a}, ${2:float b}) ${3:--[[Returns:Quaternion\n(\'\'vector\'\',\'\'float\'\') constructs a quaternion representing a rotation by angle around the specified \'\'vector\'\' axis\n]]}'
  'No Description Set':
    'prefix': 'BoundingRadius2D'
    'body': 'BoundingRadius2D() ${1:--[[Returns:float\nNo Description Set\n]]}'
  'Draws a world-space axis-aligned box. Specify bounds in world space.':
    'prefix': 'Box'
    'body': 'Box(${1:Vector a}, ${2:Vector b}, ${3:int c}, ${4:int d}, ${5:int e}, ${6:int f}, ${7:bool g}, ${8:float h}) ${9:--[[Returns:void\nDraws a world-space axis-aligned box. Specify bounds in world space.\n]]}'
  'Draws an oriented box at the origin. Specify bounds in local space.':
    'prefix': 'BoxAngles'
    'body': 'BoxAngles(${1:Vector a}, ${2:Vector b}, ${3:Vector c}, ${4:Quaternion d}, ${5:int e}, ${6:int f}, ${7:int g}, ${8:int h}, ${9:bool i}, ${10:float j}) ${11:--[[Returns:void\nDraws an oriented box at the origin. Specify bounds in local space.\n]]}'
  'Spend the gold and buyback with this hero.':
    'prefix': 'Buyback'
    'body': 'Buyback() ${1:--[[Returns:void\nSpend the gold and buyback with this hero.\n]]}'
  'Recalculate all stats after the hero gains stats.':
    'prefix': 'CalculateStatBonus'
    'body': 'CalculateStatBonus() ${1:--[[Returns:void\nRecalculate all stats after the hero gains stats.\n]]}'
  'Cancel scene playback':
    'prefix': 'Cancel'
    'body': 'Cancel() ${1:--[[Returns:void\nCancel scene playback\n]]}'
  'Create all I/O events for a particular entity':
    'prefix': 'CancelEntityIOEvents'
    'body': 'CancelEntityIOEvents(${1:ehandle a}) ${2:--[[Returns:void\nCreate all I/O events for a particular entity\n]]}'
  'Returns boolean value result of buyback gold limit time less than game time.':
    'prefix': 'CanEarnGold'
    'body': 'CanEarnGold() ${1:--[[Returns:bool\nReturns boolean value result of buyback gold limit time less than game time.\n]]}'
  'Draws a capsule. Specify base in world space.':
    'prefix': 'Capsule'
    'body': 'Capsule(${1:Vector a}, ${2:Quaternion b}, ${3:float c}, ${4:float d}, ${5:int e}, ${6:int f}, ${7:int g}, ${8:int h}, ${9:bool i}, ${10:float j}) ${11:--[[Returns:void\nDraws a capsule. Specify base in world space.\n]]}'
  'No Description Set':
    'prefix': 'CastAbility'
    'body': 'CastAbility() ${1:--[[Returns:void\nNo Description Set\n]]}'
  'Cast an ability immediately.':
    'prefix': 'CastAbilityImmediately'
    'body': 'CastAbilityImmediately(${1:handle a}, ${2:int b}) ${3:--[[Returns:void\nCast an ability immediately.\n]]}'
  'Cast an ability with no target. ( hAbility, iPlayerIndex )':
    'prefix': 'CastAbilityNoTarget'
    'body': 'CastAbilityNoTarget(${1:handle ability}, ${2:int playerIndex}) ${3:--[[Returns:void\nCast an ability with no target. ( hAbility, iPlayerIndex )\n]]}'
  'Cast an ability on a position.':
    'prefix': 'CastAbilityOnPosition'
    'body': 'CastAbilityOnPosition(${1:Vector a}, ${2:handle b}, ${3:int c}) ${4:--[[Returns:void\nCast an ability on a position.\n]]}'
  'Cast an ability on a target entity.':
    'prefix': 'CastAbilityOnTarget'
    'body': 'CastAbilityOnTarget(${1:handle target}, ${2:handle ability}, ${3:int playerIndex}) ${4:--[[Returns:void\nCast an ability on a target entity.\n]]}'
  'Toggle an ability. ( hAbility, iPlayerIndex )':
    'prefix': 'CastAbilityToggle'
    'body': 'CastAbilityToggle(${1:handle a}, ${2:int b}) ${3:--[[Returns:void\nToggle an ability. ( hAbility, iPlayerIndex )\n]]}'
  'Draws a circle. Specify center in world space.':
    'prefix': 'Circle'
    'body': 'Circle(${1:Vector a}, ${2:Quaternion b}, ${3:float c}, ${4:int d}, ${5:int e}, ${6:int f}, ${7:int g}, ${8:bool h}, ${9:float i}) ${10:--[[Returns:void\nDraws a circle. Specify center in world space.\n]]}'
  'Draws a circle oriented to the screen. Specify center in world space.':
    'prefix': 'CircleScreenOriented'
    'body': 'CircleScreenOriented(${1:Vector a}, ${2:float b}, ${3:int c}, ${4:int d}, ${5:int e}, ${6:int f}, ${7:bool g}, ${8:float h}) ${9:--[[Returns:void\nDraws a circle oriented to the screen. Specify center in world space.\n]]}'
  'No Description Set':
    'prefix': 'ClearKillsMatrix'
    'body': 'ClearKillsMatrix(${1:int a}) ${2:--[[Returns:void\nNo Description Set\n]]}'
  'Value is stored in PlayerResource.':
    'prefix': 'ClearLastHitMultikill'
    'body': 'ClearLastHitMultikill() ${1:--[[Returns:void\nValue is stored in PlayerResource.\n]]}'
  'Value is stored in PlayerResource.':
    'prefix': 'ClearLastHitStreak'
    'body': 'ClearLastHitStreak() ${1:--[[Returns:void\nValue is stored in PlayerResource.\n]]}'
  'Clear any movement target entity/position.':
    'prefix': 'ClearMovementTarget'
    'body': 'ClearMovementTarget() ${1:--[[Returns:void\nClear any movement target entity/position.\n]]}'
  'No Description Set':
    'prefix': 'ClearRawPlayerDamageMatrix'
    'body': 'ClearRawPlayerDamageMatrix(${1:int a}) ${2:--[[Returns:void\nNo Description Set\n]]}'
  'Value is stored in PlayerResource.':
    'prefix': 'ClearStreak'
    'body': 'ClearStreak() ${1:--[[Returns:void\nValue is stored in PlayerResource.\n]]}'
  'Tell clients that they need to load gridnav information. Used for things like allowing clients to identify valid locations to place buildings.':
    'prefix': 'ClientLoadGridNav'
    'body': 'ClientLoadGridNav() ${1:--[[Returns:void\nTell clients that they need to load gridnav information. Used for things like allowing clients to identify valid locations to place buildings.\n]]}'
  'Mark this quest complete':
    'prefix': 'CompleteQuest'
    'body': 'CompleteQuest() ${1:--[[Returns:void\nMark this quest complete\n]]}'
  'Mark this subquest complete':
    'prefix': 'CompleteSubquest'
    'body': 'CompleteSubquest() ${1:--[[Returns:void\nMark this subquest complete\n]]}'
  'Draws a wireframe cone. Specify endpoint and direction in world space.':
    'prefix': 'Cone'
    'body': 'Cone(${1:Vector a}, ${2:Vector b}, ${3:float c}, ${4:float d}, ${5:int e}, ${6:int f}, ${7:int g}, ${8:int h}, ${9:bool i}, ${10:float j}) ${11:--[[Returns:void\nDraws a wireframe cone. Specify endpoint and direction in world space.\n]]}'
  'Adds an I/O connection that will call the named function on this entity when the specified output fires.':
    'prefix': 'ConnectOutput'
    'body': 'ConnectOutput(${1:string a}, ${2:string b}) ${3:--[[Returns:void\nAdds an I/O connection that will call the named function on this entity when the specified output fires.\n]]}'
  'No Description Set':
    'prefix': 'ContinueCasting'
    'body': 'ContinueCasting() ${1:--[[Returns:bool\nNo Description Set\n]]}'
  'Creates an entity by classname':
    'prefix': 'CreateByClassname'
    'body': 'CreateByClassname(${1:string className}) ${2:--[[Returns:handle\nCreates an entity by classname\n]]}'
  'Pass \'\'table\'\' - Inputs: entity, effect':
    'prefix': 'CreateEffect'
    'body': 'CreateEffect(${1:handle a}) ${2:--[[Returns:bool\nPass \'\'table\'\' - Inputs: entity, effect\n]]}'
  'Creates a DOTA hero by its dota_npc_units.txt name and sets it as the given player\'s controlled hero':
    'prefix': 'CreateHeroForPlayer'
    'body': 'CreateHeroForPlayer(${1:string a}, ${2:handle b}) ${3:--[[Returns:handle\nCreates a DOTA hero by its dota_npc_units.txt name and sets it as the given player\'s controlled hero\n]]}'
  'Creates an item with classname "item_name" that owner  can use.':
    'prefix': 'CreateItem'
    'body': 'CreateItem(${1:string item_name}, ${2:handle owner}, ${3:handle owner}) ${4:--[[Returns:handle\nCreates an item with classname <i>item_name</i> that <i>owner</i> can use.\n]]}'
  'Create a physical item at a given location':
    'prefix': 'CreateItemOnPositionSync'
    'body': 'CreateItemOnPositionSync(${1:Vector a}, ${2:handle b}) ${3:--[[Returns:handle\nCreate a physical item at a given location\n]]}'
  'Creates a linear projectile and returns the projectile ID':
    'prefix': 'CreateLinearProjectile'
    'body': 'CreateLinearProjectile(${1:handle a}) ${2:--[[Returns:int\nCreates a linear projectile and returns the projectile ID\n]]}'
  'Creates a new particle effect':
    'prefix': 'CreateParticle'
    'body': 'CreateParticle(${1:string particleName}, ${2:int particleAttach}, ${3:handle owningEntity}) ${4:--[[Returns:int\nCreates a new particle effect\n]]}'
  'Creates a new particle effect that only plays for the specified player':
    'prefix': 'CreateParticleForPlayer'
    'body': 'CreateParticleForPlayer(${1:string particleName}, ${2:int particleAttach}, ${3:handle owningEntity}, ${4:handle owningPlayer}) ${5:--[[Returns:int\nCreates a new particle effect that only plays for the specified player\n]]}'
  'Creates a tracking projectile':
    'prefix': 'CreateTrackingProjectile'
    'body': 'CreateTrackingProjectile(${1:handle a}) ${2:--[[Returns:void\nCreates a tracking projectile\n]]}'
  'CreateTrigger( vecMin, vecMax ) : Creates and returns an AABB trigger':
    'prefix': 'CreateTrigger'
    'body': 'CreateTrigger(${1:Vector a}, ${2:Vector b}, ${3:Vector c}) ${4:--[[Returns:handle\nCreateTrigger( vecMin, vecMax ) : Creates and returns an AABB trigger\n]]}'
  'CreateTriggerRadiusApproximate( vecOrigin, flRadius ) : Creates and returns an AABB trigger thats bigger than the radius provided':
    'prefix': 'CreateTriggerRadiusApproximate'
    'body': 'CreateTriggerRadiusApproximate(${1:Vector a}, ${2:float b}) ${3:--[[Returns:handle\nCreateTriggerRadiusApproximate( vecOrigin, flRadius ) : Creates and returns an AABB trigger thats bigger than the radius provided\n]]}'
  'Creates a DOTA unit by its dota_npc_units.txt name ( szUnitName, vLocation, bFindClearSpace, hNPCOwner, hUnitOwner, iTeamNumber )':
    'prefix': 'CreateUnitByName'
    'body': 'CreateUnitByName(${1:string a}, ${2:Vector b}, ${3:bool c}, ${4:handle d}, ${5:handle e}, ${6:int f}) ${7:--[[Returns:handle\nCreates a DOTA unit by its dota_npc_units.txt name ( szUnitName, vLocation, bFindClearSpace, hNPCOwner, hUnitOwner, iTeamNumber )\n]]}'
  'Creates a DOTA unit by its dota_npc_units.txt name ( szUnitName, vLocation, bFindClearSpace, hNPCOwner, hUnitOwner, iTeamNumber, hCallback )':
    'prefix': 'CreateUnitByNameAsync'
    'body': 'CreateUnitByNameAsync(${1:string a}, ${2:Vector b}, ${3:bool c}, ${4:handle d}, ${5:handle e}, ${6:int f}, ${7:handle g}) ${8:--[[Returns:int\nCreates a DOTA unit by its dota_npc_units.txt name ( szUnitName, vLocation, bFindClearSpace, hNPCOwner, hUnitOwner, iTeamNumber, hCallback )\n]]}'
  'No Description Set':
    'prefix': 'CreateVisibilityNode'
    'body': 'CreateVisibilityNode(${1:Vector a}, ${2:float b}, ${3:float c}) ${4:--[[Returns:void\nNo Description Set\n]]}'
  'Level the creature up by the specified number of levels':
    'prefix': 'CreatureLevelUp'
    'body': 'CreatureLevelUp(${1:int a}) ${2:--[[Returns:void\nLevel the creature up by the specified number of levels\n]]}'
  'Cross product of two vectors':
    'prefix': 'Cross'
    'body': 'Cross(${1:Vector a}, ${2:Vector b}) ${3:--[[Returns:Vector\nCross product of two vectors\n]]}'
  'Draws a world-aligned cross. Specify origin in world space.':
    'prefix': 'Cross3D'
    'body': 'Cross3D(${1:Vector a}, ${2:float b}, ${3:int c}, ${4:int d}, ${5:int e}, ${6:int f}, ${7:bool g}, ${8:float h}) ${9:--[[Returns:void\nDraws a world-aligned cross. Specify origin in world space.\n]]}'
  'Draws an oriented cross. Specify origin in world space.':
    'prefix': 'Cross3DOriented'
    'body': 'Cross3DOriented(${1:Vector a}, ${2:Quaternion b}, ${3:float c}, ${4:int d}, ${5:int e}, ${6:int f}, ${7:int g}, ${8:bool h}, ${9:float i}) ${10:--[[Returns:void\nDraws an oriented cross. Specify origin in world space.\n]]}'
  'Gets the value of the given cvar, as a \'\'float\'\'.':
    'prefix': 'cvar_getf'
    'body': 'cvar_getf(${1:string a}) ${2:--[[Returns:float\nGets the value of the given cvar, as a \'\'float\'\'.\n]]}'
  'Sets the value of the given cvar, as a \'\'float\'\'.':
    'prefix': 'cvar_setf'
    'body': 'cvar_setf(${1:string a}, ${2:float b}) ${3:--[[Returns:bool\nSets the value of the given cvar, as a \'\'float\'\'.\n]]}'
  'Breaks in the debugger':
    'prefix': 'DebugBreak'
    'body': 'DebugBreak() ${1:--[[Returns:void\nBreaks in the debugger\n]]}'
  'Draw a debug overlay box (origin, mins, maxs, forward, r, g, b, a, duration )':
    'prefix': 'DebugDrawBox'
    'body': 'DebugDrawBox(${1:Vector a}, ${2:Vector b}, ${3:Vector c}, ${4:int d}, ${5:int e}, ${6:int f}, ${7:int g}, ${8:float h}) ${9:--[[Returns:void\nDraw a debug overlay box (origin, mins, maxs, forward, r, g, b, a, duration )\n]]}'
  'Draw a debug forward box (cent, min, max, forward, vRgb, a, duration)':
    'prefix': 'DebugDrawBoxDirection'
    'body': 'DebugDrawBoxDirection(${1:Vector a}, ${2:Vector b}, ${3:Vector c}, ${4:Vector d}, ${5:Vector e}, ${6:float f}, ${7:float g}) ${8:--[[Returns:void\nDraw a debug forward box (cent, min, max, forward, vRgb, a, duration)\n]]}'
  'Draw a debug circle (center, vRgb, a, rad, ztest, duration)':
    'prefix': 'DebugDrawCircle'
    'body': 'DebugDrawCircle(${1:Vector a}, ${2:Vector b}, ${3:float c}, ${4:float d}, ${5:bool e}, ${6:float f}) ${7:--[[Returns:void\nDraw a debug circle (center, vRgb, a, rad, ztest, duration)\n]]}'
  'Try to clear all the debug overlay info':
    'prefix': 'DebugDrawClear'
    'body': 'DebugDrawClear() ${1:--[[Returns:void\nTry to clear all the debug overlay info\n]]}'
  'Draw a debug overlay line (origin, target, r, g, b, ztest, duration)':
    'prefix': 'DebugDrawLine'
    'body': 'DebugDrawLine(${1:Vector a}, ${2:Vector b}, ${3:int c}, ${4:int d}, ${5:int e}, ${6:bool f}, ${7:float g}) ${8:--[[Returns:void\nDraw a debug overlay line (origin, target, r, g, b, ztest, duration)\n]]}'
  'Draw a debug line using color vec (start, end, vRgb, a, ztest, duration)':
    'prefix': 'DebugDrawLine_vCol'
    'body': 'DebugDrawLine_vCol(${1:Vector a}, ${2:Vector b}, ${3:Vector c}, ${4:bool d}, ${5:float e}) ${6:--[[Returns:void\nDraw a debug line using color vec (start, end, vRgb, a, ztest, duration)\n]]}'
  'Draw text with a line offset (x, y, lineOffset, text, r, g, b, a, duration)':
    'prefix': 'DebugDrawScreenTextLine'
    'body': 'DebugDrawScreenTextLine(${1:float a}, ${2:float b}, ${3:int c}, ${4:string d}, ${5:int e}, ${6:int f}, ${7:int g}, ${8:int h}, ${9:float i}) ${10:--[[Returns:void\nDraw text with a line offset (x, y, lineOffset, text, r, g, b, a, duration)\n]]}'
  'Draw a debug sphere (center, vRgb, a, rad, ztest, duration)':
    'prefix': 'DebugDrawSphere'
    'body': 'DebugDrawSphere(${1:Vector a}, ${2:Vector b}, ${3:float c}, ${4:float d}, ${5:bool e}, ${6:float f}) ${7:--[[Returns:void\nDraw a debug sphere (center, vRgb, a, rad, ztest, duration)\n]]}'
  'Draw text in 3d (origin, text, bViewCheck, duration)':
    'prefix': 'DebugDrawText'
    'body': 'DebugDrawText(${1:Vector a}, ${2:string b}, ${3:bool c}, ${4:float d}) ${5:--[[Returns:void\nDraw text in 3d (origin, text, bViewCheck, duration)\n]]}'
  'Draw pretty debug text (x, y, lineOffset, text, r, g, b, a, duration, font, size, bBold)':
    'prefix': 'DebugScreenTextPretty'
    'body': 'DebugScreenTextPretty(${1:float a}, ${2:float b}, ${3:int c}, ${4:string d}, ${5:int e}, ${6:int f}, ${7:int g}, ${8:int h}, ${9:float i}, ${10:string j}, ${11:int k}, ${12:bool l}) ${13:--[[Returns:void\nDraw pretty debug text (x, y, lineOffset, text, r, g, b, a, duration, font, size, bBold)\n]]}'
  'No Description Set':
    'prefix': 'DecrementModifierRefCount'
    'body': 'DecrementModifierRefCount() ${1:--[[Returns:void\nNo Description Set\n]]}'
  'Kills the ancient, etc.':
    'prefix': 'Defeated'
    'body': 'Defeated() ${1:--[[Returns:void\nKills the ancient, etc.\n]]}'
  'DeleteCreatedSpawnGroups() : Deletes any spawn groups that this point_template has spawned. Note: The point_template will not be deleted by this.':
    'prefix': 'DeleteCreatedSpawnGroups'
    'body': 'DeleteCreatedSpawnGroups() ${1:--[[Returns:void\nDeleteCreatedSpawnGroups() : Deletes any spawn groups that this point_template has spawned. Note: The point_template will not be deleted by this.\n]]}'
  'No Description Set':
    'prefix': 'Destroy'
    'body': 'Destroy() ${1:--[[Returns:void\nNo Description Set\n]]}'
  'Destroys the linear projectile matching the argument ID':
    'prefix': 'DestroyLinearProjectile'
    'body': 'DestroyLinearProjectile(${1:int a}) ${2:--[[Returns:void\nDestroys the linear projectile matching the argument ID\n]]}'
  'Detach from its parent':
    'prefix': 'DetachFromParent'
    'body': 'DetachFromParent() ${1:--[[Returns:void\nDetach from its parent\n]]}'
  'true when we have waited some time after end of the game and not received signout':
    'prefix': 'DidMatchSignoutTimeOut'
    'body': 'DidMatchSignoutTimeOut() ${1:--[[Returns:bool\ntrue when we have waited some time after end of the game and not received signout\n]]}'
  'Disable the trigger':
    'prefix': 'Disable'
    'body': 'Disable() ${1:--[[Returns:void\nDisable the trigger\n]]}'
  'Enable motion for the prop':
    'prefix': 'DisableMotion'
    'body': 'DisableMotion() ${1:--[[Returns:void\nEnable motion for the prop\n]]}'
  'Disassemble the passed item in this unit\'s inventory.':
    'prefix': 'DisassembleItem'
    'body': 'DisassembleItem(${1:handle a}) ${2:--[[Returns:void\nDisassemble the passed item in this unit\'s inventory.\n]]}'
  'Removes a connected script function from an I/O event on this entity.':
    'prefix': 'DisconnectOutput'
    'body': 'DisconnectOutput(${1:string a}, ${2:string b}) ${3:--[[Returns:void\nRemoves a connected script function from an I/O event on this entity.\n]]}'
  'Removes a connected script function from an I/O event on the passed entity.':
    'prefix': 'DisconnectRedirectedOutput'
    'body': 'DisconnectRedirectedOutput(${1:string a}, ${2:string b}, ${3:handle c}) ${4:--[[Returns:void\nRemoves a connected script function from an I/O event on the passed entity.\n]]}'
  'EntFire: Generate an entity i/o event ( szTarget, szAction, szValue, flDelay, hActivator, hCaller )':
    'prefix': 'DoEntFire'
    'body': 'DoEntFire(${1:string a}, ${2:string b}, ${3:string c}, ${4:float d}, ${5:handle e}, ${6:handle f}) ${7:--[[Returns:void\nEntFire: Generate an entity i/o event ( szTarget, szAction, szValue, flDelay, hActivator, hCaller )\n]]}'
  'EntFireByHandle:Generate and entity i/o event':
    'prefix': 'DoEntFireByInstanceHandle'
    'body': 'DoEntFireByInstanceHandle(${1:handle a}, ${2:string b}, ${3:string c}, ${4:float d}, ${5:handle e}, ${6:handle f}) ${7:--[[Returns:void\nEntFireByHandle:Generate and entity i/o event\n]]}'
  'Execute a script (internal)':
    'prefix': 'DoIncludeScript'
    'body': 'DoIncludeScript(${1:string a}, ${2:handle b}) ${3:--[[Returns:bool\nExecute a script (internal)\n]]}'
  'ScriptAssert:Asserts the passed in value. Prints out a message and brings up the assert dialog.':
    'prefix': 'DoScriptAssert'
    'body': 'DoScriptAssert(${1:bool a}, ${2:string b}) ${3:--[[Returns:void\nScriptAssert:Asserts the passed in value. Prints out a message and brings up the assert dialog.\n]]}'
  'Dot product of two vectors':
    'prefix': 'Dot'
    'body': 'Dot(${1:Vector a}, ${2:Vector b}) ${3:--[[Returns:float\nDot product of two vectors\n]]}'
  'UniqueString:Generate a string guaranteed to be unique across the life of the script VM, with an optional root string. Useful for adding data to table\'s when not sure what keys are already in use in that table.':
    'prefix': 'DoUniqueString'
    'body': 'DoUniqueString(${1:string a}) ${2:--[[Returns:string\nUniqueString:Generate a string guaranteed to be unique across the life of the script VM, with an optional root string. Useful for adding data to table\'s when not sure what keys are already in use in that table.\n]]}'
  'Draws a dashed line. Specify endpoint\'s in world space.':
    'prefix': 'DrawTickMarkedLine'
    'body': 'DrawTickMarkedLine(${1:Vector a}, ${2:Vector b}, ${3:float c}, ${4:int d}, ${5:int e}, ${6:int f}, ${7:int g}, ${8:int h}, ${9:bool i}, ${10:float j}) ${11:--[[Returns:void\nDraws a dashed line. Specify endpoint\'s in world space.\n]]}'
  'Drop an item at a given point.':
    'prefix': 'DropItemAtPosition'
    'body': 'DropItemAtPosition(${1:Vector a}, ${2:handle b}) ${3:--[[Returns:void\nDrop an item at a given point.\n]]}'
  'Immediately drop a carried item at a given position.':
    'prefix': 'DropItemAtPositionImmediate'
    'body': 'DropItemAtPositionImmediate(${1:handle a}, ${2:Vector b}) ${3:--[[Returns:void\nImmediately drop a carried item at a given position.\n]]}'
  'Drops the selected item out of this unit\'s stash.':
    'prefix': 'EjectItemFromStash'
    'body': 'EjectItemFromStash(${1:handle a}) ${2:--[[Returns:void\nDrops the selected item out of this unit\'s stash.\n]]}'
  'Play named sound for all players':
    'prefix': 'EmitGlobalSound'
    'body': 'EmitGlobalSound(${1:string a}) ${2:--[[Returns:void\nPlay named sound for all players\n]]}'
  ' ':
    'prefix': 'EmitSound'
    'body': 'EmitSound(${1:string soundName}) ${2:--[[Returns:void\n \n]]}'
  'Play named sound on Entity':
    'prefix': 'EmitSoundOn'
    'body': 'EmitSoundOn(${1:string a}, ${2:handle b}) ${3:--[[Returns:void\nPlay named sound on Entity\n]]}'
  'Play named sound only on the client for the passed in player':
    'prefix': 'EmitSoundOnClient'
    'body': 'EmitSoundOnClient(${1:string a}, ${2:handle b}) ${3:--[[Returns:void\nPlay named sound only on the client for the passed in player\n]]}'
  'Plays/modifies a sound from this entity. changes sound if Pitch and/or Volume or SoundTime is > 0.':
    'prefix': 'EmitSoundParams'
    'body': 'EmitSoundParams(${1:string soundName}, ${2:int pitch}, ${3:float volume}, ${4:float soundTime}) ${5:--[[Returns:void\nPlays/modifies a sound from this entity. changes sound if Pitch and/or Volume or SoundTime is > 0.\n]]}'
  'Enable the trigger':
    'prefix': 'Enable'
    'body': 'Enable() ${1:--[[Returns:void\nEnable the trigger\n]]}'
  'Enable motion for the prop':
    'prefix': 'EnableMotion'
    'body': 'EnableMotion() ${1:--[[Returns:void\nEnable motion for the prop\n]]}'
  'Param: \'\'bool\'\' bInterrupted':
    'prefix': 'EndChannel'
    'body': 'EndChannel(${1:bool a}) ${2:--[[Returns:void\nParam: \'\'bool\'\' bInterrupted\n]]}'
  'Clear the cooldown remaining on this ability.':
    'prefix': 'EndCooldown'
    'body': 'EndCooldown() ${1:--[[Returns:void\nClear the cooldown remaining on this ability.\n]]}'
  'No Description Set':
    'prefix': 'entindex'
    'body': 'entindex() ${1:--[[Returns:int\nNo Description Set\n]]}'
  'Turn an entity index integer to an HScript representing that entity\'s script instance.':
    'prefix': 'EntIndexToHScript'
    'body': 'EntIndexToHScript(${1:int a}) ${2:--[[Returns:handle\nTurn an entity index integer to an HScript representing that entity\'s script instance.\n]]}'
  'Draws the attachments of the entity':
    'prefix': 'EntityAttachments'
    'body': 'EntityAttachments(${1:ehandle a}, ${2:float b}) ${3:--[[Returns:void\nDraws the attachments of the entity\n]]}'
  'Draws the axis of the entity origin':
    'prefix': 'EntityAxis'
    'body': 'EntityAxis(${1:ehandle a}, ${2:float b}, ${3:bool c}, ${4:float d}) ${5:--[[Returns:void\nDraws the axis of the entity origin\n]]}'
  'Draws bounds of an entity':
    'prefix': 'EntityBounds'
    'body': 'EntityBounds(${1:ehandle a}, ${2:int b}, ${3:int c}, ${4:int d}, ${5:int e}, ${6:bool f}, ${7:float g}) ${8:--[[Returns:void\nDraws bounds of an entity\n]]}'
  'Draws the skeleton of the entity':
    'prefix': 'EntitySkeleton'
    'body': 'EntitySkeleton(${1:ehandle a}, ${2:float b}) ${3:--[[Returns:void\nDraws the skeleton of the entity\n]]}'
  'Draws text on an entity':
    'prefix': 'EntityText'
    'body': 'EntityText(${1:ehandle a}, ${2:int b}, ${3:string c}, ${4:int d}, ${5:int e}, ${6:int f}, ${7:int g}, ${8:float h}) ${9:--[[Returns:void\nDraws text on an entity\n]]}'
  'Returns length of this scene in seconds.':
    'prefix': 'EstimateLength'
    'body': 'EstimateLength() ${1:--[[Returns:float\nReturns length of this scene in seconds.\n]]}'
  'Issue an order from a script table':
    'prefix': 'ExecuteOrderFromTable'
    'body': 'ExecuteOrderFromTable(${1:handle a}) ${2:--[[Returns:void\nIssue an order from a script table\n]]}'
  'Do an instant (i.e. blocking) Ray Cast. Will do a handle/queue version later. Don\'t plan to use this for real!':
    'prefix': 'ExpensiveInstantRayCast'
    'body': 'ExpensiveInstantRayCast(${1:Vector a}, ${2:Vector b}, ${3:handle c}) ${4:--[[Returns:bool\nDo an instant (i.e. blocking) Ray Cast. Will do a handle/queue version later. Don\'t plan to use this for real!\n]]}'
  'Smooth curve decreasing slower as it approaches zero':
    'prefix': 'ExponentialDecay'
    'body': 'ExponentialDecay(${1:float a}, ${2:float b}, ${3:float c}) ${4:--[[Returns:float\nSmooth curve decreasing slower as it approaches zero\n]]}'
  'Get the qangles that this entity is looking at.':
    'prefix': 'EyeAngles'
    'body': 'EyeAngles() ${1:--[[Returns:QAngle\nGet the qangles that this entity is looking at.\n]]}'
  'Get \'\'vector\'\' to eye position - absolute coords':
    'prefix': 'EyePosition'
    'body': 'EyePosition() ${1:--[[Returns:Vector\nGet \'\'vector\'\' to eye position - absolute coords\n]]}'
  '\n\t\t\tReads a string from a file to send to script\n\t\t\t\n\t\t\t* Directory traversal doesn\'t seem to work. The characters \'.\', \'/\' and \'\\\\\' are ignored.\n\t\t\t* The files are read from C:\\Program Files (x86)\\Steam\\steamapps\\common\\dota 2 beta\\dota_ugc\\game\\dota\\ems\n\t\t\t* The function is used in conjunction with [[Dota_2_Workshop_Tools/Scripting/API/Global.StringToFile|StringToFile]]\n\t\t':
    'prefix': 'FileToString'
    'body': 'FileToString(${1:string a}) ${2:--[[Returns:string\n\n\t\t\tReads a string from a file to send to script\n\t\t\t\n\t\t\t* Directory traversal doesn\'t seem to work. The characters \'.\', \'/\' and \'\\\\\' are ignored.\n\t\t\t* The files are read from C:\\Program Files (x86)\\Steam\\steamapps\\common\\dota 2 beta\\dota_ugc\\game\\dota\\ems\n\t\t\t* The function is used in conjunction with [[Dota_2_Workshop_Tools/Scripting/API/Global.StringToFile|StringToFile]]\n\t\t\n]]}'
  'Draws a screen-space filled 2D rectangle. Coordinates are in pixels.':
    'prefix': 'FilledRect2D'
    'body': 'FilledRect2D(${1:Vector2D a}, ${2:Vector2D b}, ${3:int c}, ${4:int d}, ${5:int e}, ${6:int f}, ${7:float g}) ${8:--[[Returns:void\nDraws a screen-space filled 2D rectangle. Coordinates are in pixels.\n]]}'
  'Retrieve an ability by name from the unit.':
    'prefix': 'FindAbilityByName'
    'body': 'FindAbilityByName(${1:string a}) ${2:--[[Returns:handle\nRetrieve an ability by name from the unit.\n]]}'
  'Finds all entities by class name. Returns an array containing all the found entities.':
    'prefix': 'FindAllByClassname'
    'body': 'FindAllByClassname(${1:string a}) ${2:--[[Returns:table\nFinds all entities by class name. Returns an array containing all the found entities.\n]]}'
  'Find entities by class name within a radius.':
    'prefix': 'FindAllByClassnameWithin'
    'body': 'FindAllByClassnameWithin(${1:string a}, ${2:Vector b}, ${3:float c}) ${4:--[[Returns:table\nFind entities by class name within a radius.\n]]}'
  'Find entities by model name.':
    'prefix': 'FindAllByModel'
    'body': 'FindAllByModel(${1:string modelName}) ${2:--[[Returns:table\nFind entities by model name.\n]]}'
  'Find all entities by name. Returns an array containing all the found entities in it.':
    'prefix': 'FindAllByName'
    'body': 'FindAllByName(${1:string name}) ${2:--[[Returns:table\nFind all entities by name. Returns an array containing all the found entities in it.\n]]}'
  'Find entities by name within a radius.':
    'prefix': 'FindAllByNameWithin'
    'body': 'FindAllByNameWithin(${1:string name}, ${2:Vector origin}, ${3:float maxRadius}) ${4:--[[Returns:table\nFind entities by name within a radius.\n]]}'
  'Find entities by targetname.':
    'prefix': 'FindAllByTarget'
    'body': 'FindAllByTarget(${1:string targetName}) ${2:--[[Returns:table\nFind entities by targetname.\n]]}'
  'Find entities within a radius.':
    'prefix': 'FindAllInSphere'
    'body': 'FindAllInSphere(${1:Vector origin}, ${2:float maxRadius}) ${3:--[[Returns:table\nFind entities within a radius.\n]]}'
  'Find entities by class name. Pass \'\'nil\'\' to start an iteration, or reference to a previously found entity to continue a search':
    'prefix': 'FindByClassname'
    'body': 'FindByClassname(${1:handle startFrom}, ${2:string className}) ${3:--[[Returns:handle\nFind entities by class name. Pass \'\'nil\'\' to start an iteration, or reference to a previously found entity to continue a search\n]]}'
  'Find entities by class name nearest to a point.':
    'prefix': 'FindByClassnameNearest'
    'body': 'FindByClassnameNearest(${1:string className}, ${2:Vector origin}, ${3:float maxRadius}) ${4:--[[Returns:handle\nFind entities by class name nearest to a point.\n]]}'
  'Find entities by class name within a radius. Pass \'\'nil\'\' to start an iteration, or reference to a previously found entity to continue a search':
    'prefix': 'FindByClassnameWithin'
    'body': 'FindByClassnameWithin(${1:handle startFrom}, ${2:string className}, ${3:Vector origin}, ${4:float maxRadius}) ${5:--[[Returns:handle\nFind entities by class name within a radius. Pass \'\'nil\'\' to start an iteration, or reference to a previously found entity to continue a search\n]]}'
  'Find entities by model name. Pass \'\'nil\'\' to start an iteration, or reference to a previously found entity to continue a search':
    'prefix': 'FindByModel'
    'body': 'FindByModel(${1:handle startFrom}, ${2:string modelName}) ${3:--[[Returns:handle\nFind entities by model name. Pass \'\'nil\'\' to start an iteration, or reference to a previously found entity to continue a search\n]]}'
  'Find entities by model name within a radius. Pass \'\'nil\'\' to start an iteration, or reference to a previously found entity to continue a search':
    'prefix': 'FindByModelWithin'
    'body': 'FindByModelWithin(${1:handle startFrom}, ${2:string modelName}, ${3:Vector origin}, ${4:float maxRadius}) ${5:--[[Returns:handle\nFind entities by model name within a radius. Pass \'\'nil\'\' to start an iteration, or reference to a previously found entity to continue a search\n]]}'
  'Find entities by name. Pass \'\'nil\'\' to start an iteration, or reference to a previously found entity to continue a search':
    'prefix': 'FindByName'
    'body': 'FindByName(${1:handle lastEnt}, ${2:string searchString}) ${3:--[[Returns:handle\nFind entities by name. Pass \'\'nil\'\' to start an iteration, or reference to a previously found entity to continue a search\n]]}'
  'Find entities by name nearest to a point.':
    'prefix': 'FindByNameNearest'
    'body': 'FindByNameNearest(${1:string name}, ${2:Vector origin}, ${3:float maxRadius}) ${4:--[[Returns:handle\nFind entities by name nearest to a point.\n]]}'
  'Find entities by name within a radius. Pass \'\'nil\'\' to start an iteration, or reference to a previously found entity to continue a search':
    'prefix': 'FindByNameWithin'
    'body': 'FindByNameWithin(${1:handle startFrom}, ${2:string name}, ${3:Vector origin}, ${4:float maxRadius}) ${5:--[[Returns:handle\nFind entities by name within a radius. Pass \'\'nil\'\' to start an iteration, or reference to a previously found entity to continue a search\n]]}'
  'Find entities by targetname. Pass \'\'nil\'\' to start an iteration, or reference to a previously found entity to continue a search':
    'prefix': 'FindByTarget'
    'body': 'FindByTarget(${1:handle startFrom}, ${2:string targetName}) ${3:--[[Returns:handle\nFind entities by targetname. Pass \'\'nil\'\' to start an iteration, or reference to a previously found entity to continue a search\n]]}'
  'Get the camera':
    'prefix': 'FindCamera'
    'body': 'FindCamera() ${1:--[[Returns:handle\nGet the camera\n]]}'
  'Place a unit somewhere not already occupied.':
    'prefix': 'FindClearSpaceForUnit'
    'body': 'FindClearSpaceForUnit(${1:handle a}, ${2:Vector b}, ${3:bool c}) ${4:--[[Returns:void\nPlace a unit somewhere not already occupied.\n]]}'
  'Find entities within a radius. Pass \'\'nil\'\' to start an iteration, or reference to a previously found entity to continue a search':
    'prefix': 'FindInSphere'
    'body': 'FindInSphere(${1:handle startFrom}, ${2:Vector origin}, ${3:float maxRadius}) ${4:--[[Returns:handle\nFind entities within a radius. Pass \'\'nil\'\' to start an iteration, or reference to a previously found entity to continue a search\n]]}'
  'given an entity reference, such as !target, get actual entity from scene object':
    'prefix': 'FindNamedEntity'
    'body': 'FindNamedEntity(${1:string a}) ${2:--[[Returns:handle\ngiven an entity reference, such as !target, get actual entity from scene object\n]]}'
  'returns list of all enemy units within this unit\'s sight cone or sensing sphere':
    'prefix': 'FindSensedEnemies'
    'body': 'FindSensedEnemies() ${1:--[[Returns:table\nreturns list of all enemy units within this unit\'s sight cone or sensing sphere\n]]}'
  'Finds the units in a given radius with the given flags. ( iTeamNumber, vPosition, hCacheUnit, flRadius, iTeamFilter, iTypeFilter, iFlagFilter, iOrder, bCanGrowCache )':
    'prefix': 'FindUnitsInRadius'
    'body': 'FindUnitsInRadius(${1:int a}, ${2:Vector b}, ${3:handle c}, ${4:float d}, ${5:int e}, ${6:int f}, ${7:int g}, ${8:int h}, ${9:bool i}) ${10:--[[Returns:table\nFinds the units in a given radius with the given flags. ( iTeamNumber, vPosition, hCacheUnit, flRadius, iTeamFilter, iTypeFilter, iFlagFilter, iOrder, bCanGrowCache )\n]]}'
  'Fire Entity\'s Action Input w/no data':
    'prefix': 'FireEntityIOInputNameOnly'
    'body': 'FireEntityIOInputNameOnly(${1:ehandle a}, ${2:string b}) ${3:--[[Returns:void\nFire Entity\'s Action Input w/no data\n]]}'
  'Fire Entity\'s Action Input with passed String - you own the memory':
    'prefix': 'FireEntityIOInputString'
    'body': 'FireEntityIOInputString(${1:ehandle a}, ${2:string b}, ${3:string c}) ${4:--[[Returns:void\nFire Entity\'s Action Input with passed String - you own the memory\n]]}'
  'Fire Entity\'s Action Input with passed \'\'Vector\'\' ( hEntity, szActionName, vector )':
    'prefix': 'FireEntityIOInputVec'
    'body': 'FireEntityIOInputVec(${1:ehandle a}, ${2:string b}, ${3:Vector c}) ${4:--[[Returns:void\nFire Entity\'s Action Input with passed \'\'Vector\'\' ( hEntity, szActionName, vector )\n]]}'
  'Fire a pre-defined event, which can be found either in custom_events.txt or in dota\'s resource/*.res':
    'prefix': 'FireGameEvent'
    'body': 'FireGameEvent(${1:string eventName}, ${2:handle parameterTable}) ${3:--[[Returns:void\nFire a pre-defined event, which can be found either in custom_events.txt or in dota\'s resource/*.res\n]]}'
  'Fire a game event without broadcasting to the client.':
    'prefix': 'FireGameEventLocal'
    'body': 'FireGameEventLocal(${1:string a}, ${2:handle b}) ${3:--[[Returns:void\nFire a game event without broadcasting to the client.\n]]}'
  'Fire an entity output':
    'prefix': 'FireOutput'
    'body': 'FireOutput(${1:string a}, ${2:handle b}, ${3:handle c}, ${4:table d}, ${5:float e}) ${6:--[[Returns:void\nFire an entity output\n]]}'
  'Begin an iteration over the list of entities':
    'prefix': 'First'
    'body': 'First() ${1:--[[Returns:handle\nBegin an iteration over the list of entities\n]]}'
  'No Description Set':
    'prefix': 'FirstMoveChild'
    'body': 'FirstMoveChild() ${1:--[[Returns:handle\nNo Description Set\n]]}'
  'Kill this unit immediately.':
    'prefix': 'ForceKill'
    'body': 'ForceKill(${1:bool a}) ${2:--[[Returns:void\nKill this unit immediately.\n]]}'
  'ForceSpawn() : Spawns all of the entities the point_template is pointing at.':
    'prefix': 'ForceSpawn'
    'body': 'ForceSpawn() ${1:--[[Returns:void\nForceSpawn() : Spawns all of the entities the point_template is pointing at.\n]]}'
  'Get the time spent on the server in the last frame':
    'prefix': 'FrameTime'
    'body': 'FrameTime() ${1:--[[Returns:float\nGet the time spent on the server in the last frame\n]]}'
  'Returns a \'\'table\'\' containing the criteria that would be used for response queries on this entity. This is the same as the \'\'table\'\' that is passed to response rule script function callbacks.':
    'prefix': 'GatherCriteria'
    'body': 'GatherCriteria(${1:handle a}) ${2:--[[Returns:void\nReturns a \'\'table\'\' containing the criteria that would be used for response queries on this entity. This is the same as the \'\'table\'\' that is passed to response rule script function callbacks.\n]]}'
  'Retrieve an ability by index from the unit.':
    'prefix': 'GetAbilityByIndex'
    'body': 'GetAbilityByIndex(${1:int a}) ${2:--[[Returns:handle\nRetrieve an ability by index from the unit.\n]]}'
  'No Description Set':
    'prefix': 'GetAbilityCount'
    'body': 'GetAbilityCount() ${1:--[[Returns:int\nNo Description Set\n]]}'
  'No Description Set':
    'prefix': 'GetAbilityDamage'
    'body': 'GetAbilityDamage() ${1:--[[Returns:int\nNo Description Set\n]]}'
  'No Description Set':
    'prefix': 'GetAbilityDamageType'
    'body': 'GetAbilityDamageType() ${1:--[[Returns:int\nNo Description Set\n]]}'
  'No Description Set':
    'prefix': 'GetAbilityIndex'
    'body': 'GetAbilityIndex() ${1:--[[Returns:int\nNo Description Set\n]]}'
  'No Description Set':
    'prefix': 'GetAbilityName'
    'body': 'GetAbilityName() ${1:--[[Returns:string\nNo Description Set\n]]}'
  'Gets the current unspent ability point\'s.':
    'prefix': 'GetAbilityPoints'
    'body': 'GetAbilityPoints() ${1:--[[Returns:int\nGets the current unspent ability point\'s.\n]]}'
  'No Description Set':
    'prefix': 'GetAbilityTargetFlags'
    'body': 'GetAbilityTargetFlags() ${1:--[[Returns:int\nNo Description Set\n]]}'
  'No Description Set':
    'prefix': 'GetAbilityTargetTeam'
    'body': 'GetAbilityTargetTeam() ${1:--[[Returns:int\nNo Description Set\n]]}'
  'No Description Set':
    'prefix': 'GetAbilityTargetType'
    'body': 'GetAbilityTargetType() ${1:--[[Returns:int\nNo Description Set\n]]}'
  'No Description Set':
    'prefix': 'GetAbilityType'
    'body': 'GetAbilityType() ${1:--[[Returns:int\nNo Description Set\n]]}'
  'No Description Set':
    'prefix': 'GetAbsOrigin'
    'body': 'GetAbsOrigin() ${1:--[[Returns:Vector\nNo Description Set\n]]}'
  'Gets the range at which this unit will auto-acquire.':
    'prefix': 'GetAcquisitionRange'
    'body': 'GetAcquisitionRange() ${1:--[[Returns:float\nGets the range at which this unit will auto-acquire.\n]]}'
  'Combat involving this creature will have this weight added to the music calcuations':
    'prefix': 'GetAdditionalBattleMusicWeight'
    'body': 'GetAdditionalBattleMusicWeight() ${1:--[[Returns:float\nCombat involving this creature will have this weight added to the music calcuations\n]]}'
  'No Description Set':
    'prefix': 'GetAegisPickups'
    'body': 'GetAegisPickups(${1:int a}) ${2:--[[Returns:int\nNo Description Set\n]]}'
  'No Description Set':
    'prefix': 'GetAgility'
    'body': 'GetAgility() ${1:--[[Returns:float\nNo Description Set\n]]}'
  'No Description Set':
    'prefix': 'GetAgilityGain'
    'body': 'GetAgilityGain() ${1:--[[Returns:float\nNo Description Set\n]]}'
  'Returns all the heroes in the world':
    'prefix': 'GetAllHeroes'
    'body': 'GetAllHeroes() ${1:--[[Returns:table\nReturns all the heroes in the world\n]]}'
  'No Description Set':
    'prefix': 'GetAngles'
    'body': 'GetAngles() ${1:--[[Returns:QAngle\nNo Description Set\n]]}'
  'Get entity pitch, yaw, roll as a \'\'vector\'\'':
    'prefix': 'GetAnglesAsVector'
    'body': 'GetAnglesAsVector() ${1:--[[Returns:Vector\nGet entity pitch, yaw, roll as a \'\'vector\'\'\n]]}'
  'Get the local angular velocity - returns a \'\'vector\'\' of pitch,yaw,roll':
    'prefix': 'GetAngularVelocity'
    'body': 'GetAngularVelocity() ${1:--[[Returns:Vector\nGet the local angular velocity - returns a \'\'vector\'\' of pitch,yaw,roll\n]]}'
  'No Description Set':
    'prefix': 'GetAnimationIgnoresModelScale'
    'body': 'GetAnimationIgnoresModelScale() ${1:--[[Returns:bool\nNo Description Set\n]]}'
  'Get the player\'s hero.':
    'prefix': 'GetAssignedHero'
    'body': 'GetAssignedHero() ${1:--[[Returns:handle\nGet the player\'s hero.\n]]}'
  'Value is stored in PlayerResource.':
    'prefix': 'GetAssists'
    'body': 'GetAssists() ${1:--[[Returns:int\nValue is stored in PlayerResource.\n]]}'
  'No Description Set':
    'prefix': 'GetAssociatedPrimaryAbilities'
    'body': 'GetAssociatedPrimaryAbilities() ${1:--[[Returns:string\nNo Description Set\n]]}'
  'No Description Set':
    'prefix': 'GetAssociatedSecondaryAbilities'
    'body': 'GetAssociatedSecondaryAbilities() ${1:--[[Returns:string\nNo Description Set\n]]}'
  'Get the attachement id\'s angles as a p,y,r \'\'vector\'\'':
    'prefix': 'GetAttachmentAngles'
    'body': 'GetAttachmentAngles(${1:int a}) ${2:--[[Returns:Vector\nGet the attachement id\'s angles as a p,y,r \'\'vector\'\'\n]]}'
  'Get the attachement id\'s origin \'\'vector\'\'':
    'prefix': 'GetAttachmentOrigin'
    'body': 'GetAttachmentOrigin(${1:int a}) ${2:--[[Returns:Vector\nGet the attachement id\'s origin \'\'vector\'\'\n]]}'
  'No Description Set':
    'prefix': 'GetAttackAnimationPoint'
    'body': 'GetAttackAnimationPoint() ${1:--[[Returns:float\nNo Description Set\n]]}'
  'Returns a random integer between the minimum and maximum base damage of the unit.':
    'prefix': 'GetAttackDamage'
    'body': 'GetAttackDamage() ${1:--[[Returns:int\nReturns a random integer between the minimum and maximum base damage of the unit.\n]]}'
  'No Description Set':
    'prefix': 'GetAttacker'
    'body': 'GetAttacker(${1:int a}) ${2:--[[Returns:int\nNo Description Set\n]]}'
  'Gets this unit\'s attack range after all modifiers.':
    'prefix': 'GetAttackRange'
    'body': 'GetAttackRange() ${1:--[[Returns:float\nGets this unit\'s attack range after all modifiers.\n]]}'
  'Gets the attack range buffer.':
    'prefix': 'GetAttackRangeBuffer'
    'body': 'GetAttackRangeBuffer() ${1:--[[Returns:float\nGets the attack range buffer.\n]]}'
  'No Description Set':
    'prefix': 'GetAttackSpeed'
    'body': 'GetAttackSpeed() ${1:--[[Returns:float\nNo Description Set\n]]}'
  'No Description Set':
    'prefix': 'GetAttacksPerSecond'
    'body': 'GetAttacksPerSecond() ${1:--[[Returns:float\nNo Description Set\n]]}'
  'No Description Set':
    'prefix': 'GetAttackTarget'
    'body': 'GetAttackTarget() ${1:--[[Returns:handle\nNo Description Set\n]]}'
  'No Description Set':
    'prefix': 'GetAutoCastState'
    'body': 'GetAutoCastState() ${1:--[[Returns:bool\nNo Description Set\n]]}'
  'Returns the average value of the minimum and maximum damage values.':
    'prefix': 'GetAverageTrueAttackDamage'
    'body': 'GetAverageTrueAttackDamage() ${1:--[[Returns:int\nReturns the average value of the minimum and maximum damage values.\n]]}'
  'No Description Set':
    'prefix': 'GetBackswingTime'
    'body': 'GetBackswingTime() ${1:--[[Returns:float\nNo Description Set\n]]}'
  'No Description Set':
    'prefix': 'GetBaseAgility'
    'body': 'GetBaseAgility() ${1:--[[Returns:float\nNo Description Set\n]]}'
  'Gets this unit\'s attack range before modifiers.':
    'prefix': 'GetBaseAttackRange'
    'body': 'GetBaseAttackRange() ${1:--[[Returns:int\nGets this unit\'s attack range before modifiers.\n]]}'
  'No Description Set':
    'prefix': 'GetBaseAttackTime'
    'body': 'GetBaseAttackTime() ${1:--[[Returns:float\nNo Description Set\n]]}'
  'Hero damage is also affected by attributes.':
    'prefix': 'GetBaseDamageMax'
    'body': 'GetBaseDamageMax() ${1:--[[Returns:int\nHero damage is also affected by attributes.\n]]}'
  'Hero damage is also affected by attributes.':
    'prefix': 'GetBaseDamageMin'
    'body': 'GetBaseDamageMin() ${1:--[[Returns:int\nHero damage is also affected by attributes.\n]]}'
  'Returns the vision range before modifiers.':
    'prefix': 'GetBaseDayTimeVisionRange'
    'body': 'GetBaseDayTimeVisionRange() ${1:--[[Returns:int\nReturns the vision range before modifiers.\n]]}'
  'No Description Set':
    'prefix': 'GetBaseHealthRegen'
    'body': 'GetBaseHealthRegen() ${1:--[[Returns:float\nNo Description Set\n]]}'
  'No Description Set':
    'prefix': 'GetBaseIntellect'
    'body': 'GetBaseIntellect() ${1:--[[Returns:float\nNo Description Set\n]]}'
  'Returns base magical armor value.':
    'prefix': 'GetBaseMagicalResistanceValue'
    'body': 'GetBaseMagicalResistanceValue() ${1:--[[Returns:float\nReturns base magical armor value.\n]]}'
  'Gets the base max health value.':
    'prefix': 'GetBaseMaxHealth'
    'body': 'GetBaseMaxHealth() ${1:--[[Returns:float\nGets the base max health value.\n]]}'
  'No Description Set':
    'prefix': 'GetBaseMoveSpeed'
    'body': 'GetBaseMoveSpeed() ${1:--[[Returns:float\nNo Description Set\n]]}'
  'Returns the vision range before modifiers.':
    'prefix': 'GetBaseNightTimeVisionRange'
    'body': 'GetBaseNightTimeVisionRange() ${1:--[[Returns:int\nReturns the vision range before modifiers.\n]]}'
  'No Description Set':
    'prefix': 'GetBaseStrength'
    'body': 'GetBaseStrength() ${1:--[[Returns:float\nNo Description Set\n]]}'
  'Get Base velocity':
    'prefix': 'GetBaseVelocity'
    'body': 'GetBaseVelocity() ${1:--[[Returns:Vector\nGet Base velocity\n]]}'
  'No Description Set':
    'prefix': 'GetBehavior'
    'body': 'GetBehavior() ${1:--[[Returns:int\nNo Description Set\n]]}'
  'Gets bloomscale for this tonemap controller':
    'prefix': 'GetBloomScale'
    'body': 'GetBloomScale() ${1:--[[Returns:float\nGets bloomscale for this tonemap controller\n]]}'
  'No Description Set':
    'prefix': 'GetBonusDamageFromPrimaryStat'
    'body': 'GetBonusDamageFromPrimaryStat() ${1:--[[Returns:int\nNo Description Set\n]]}'
  'GetBool(name) : returns the convar as a boolean flag.':
    'prefix': 'GetBool'
    'body': 'GetBool(${1:string variableName}) ${2:--[[Returns:table\nGetBool(name) : returns the convar as a boolean flag.\n]]}'
  'Get a \'\'vector\'\' containing max bounds, centered on object':
    'prefix': 'GetBoundingMaxs'
    'body': 'GetBoundingMaxs() ${1:--[[Returns:Vector\nGet a \'\'vector\'\' containing max bounds, centered on object\n]]}'
  'Get a \'\'vector\'\' containing min bounds, centered on object':
    'prefix': 'GetBoundingMins'
    'body': 'GetBoundingMins() ${1:--[[Returns:Vector\nGet a \'\'vector\'\' containing min bounds, centered on object\n]]}'
  'Get a \'\'table\'\' containing the \'Mins\' & \'Maxs\' \'\'vector\'\' bounds, centered on object':
    'prefix': 'GetBounds'
    'body': 'GetBounds() ${1:--[[Returns:table\nGet a \'\'table\'\' containing the \'Mins\' & \'Maxs\' \'\'vector\'\' bounds, centered on object\n]]}'
  'No Description Set':
    'prefix': 'GetBroadcasterChannel'
    'body': 'GetBroadcasterChannel(${1:int a}) ${2:--[[Returns:<>\nNo Description Set\n]]}'
  'No Description Set':
    'prefix': 'GetBroadcasterChannelSlot'
    'body': 'GetBroadcasterChannelSlot(${1:int a}) ${2:--[[Returns:<>\nNo Description Set\n]]}'
  'Return \'\'float\'\' value for the amount of time left on cooldown for this hero\'s buyback.':
    'prefix': 'GetBuybackCooldownTime'
    'body': 'GetBuybackCooldownTime() ${1:--[[Returns:float\nReturn \'\'float\'\' value for the amount of time left on cooldown for this hero\'s buyback.\n]]}'
  'Return integer value for the gold cost of a buyback.':
    'prefix': 'GetBuybackCost'
    'body': 'GetBuybackCost() ${1:--[[Returns:int\nReturn integer value for the gold cost of a buyback.\n]]}'
  'Returns the amount of time gold gain is limited after buying back.':
    'prefix': 'GetBuybackGoldLimitTime'
    'body': 'GetBuybackGoldLimitTime() ${1:--[[Returns:float\nReturns the amount of time gold gain is limited after buying back.\n]]}'
  'Number of times Nian has used the roar':
    'prefix': 'GetCastCount'
    'body': 'GetCastCount() ${1:--[[Returns:int\nNumber of times Nian has used the roar\n]]}'
  'No Description Set':
    'prefix': 'GetCaster'
    'body': 'GetCaster() ${1:--[[Returns:handle\nNo Description Set\n]]}'
  'Parameter: bAttack':
    'prefix': 'GetCastPoint'
    'body': 'GetCastPoint(${1:bool a}) ${2:--[[Returns:float\nParameter: bAttack\n]]}'
  'No Description Set':
    'prefix': 'GetCastRange'
    'body': 'GetCastRange() ${1:--[[Returns:int\nNo Description Set\n]]}'
  'Get \'\'vector\'\' to center of object - absolute coords':
    'prefix': 'GetCenter'
    'body': 'GetCenter() ${1:--[[Returns:Vector\nGet \'\'vector\'\' to center of object - absolute coords\n]]}'
  'No Description Set':
    'prefix': 'GetChannelledManaCostPerSecond'
    'body': 'GetChannelledManaCostPerSecond(${1:int a}) ${2:--[[Returns:int\nNo Description Set\n]]}'
  'No Description Set':
    'prefix': 'GetChannelStartTime'
    'body': 'GetChannelStartTime() ${1:--[[Returns:float\nNo Description Set\n]]}'
  'No Description Set':
    'prefix': 'GetChannelTime'
    'body': 'GetChannelTime() ${1:--[[Returns:float\nNo Description Set\n]]}'
  'Get the entities parented to this entity.':
    'prefix': 'GetChildren'
    'body': 'GetChildren() ${1:--[[Returns:handle\nGet the entities parented to this entity.\n]]}'
  'No Description Set':
    'prefix': 'GetClaimedDenies'
    'body': 'GetClaimedDenies(${1:int a}) ${2:--[[Returns:int\nNo Description Set\n]]}'
  'No Description Set':
    'prefix': 'GetClaimedFarm'
    'body': 'GetClaimedFarm(${1:int a}) ${2:--[[Returns:float\nNo Description Set\n]]}'
  'No Description Set':
    'prefix': 'GetClaimedMisses'
    'body': 'GetClaimedMisses(${1:int a}) ${2:--[[Returns:int\nNo Description Set\n]]}'
  'No Description Set':
    'prefix': 'GetClassname'
    'body': 'GetClassname() ${1:--[[Returns:string\nNo Description Set\n]]}'
  'No Description Set':
    'prefix': 'GetCloneSource'
    'body': 'GetCloneSource() ${1:--[[Returns:handle\nNo Description Set\n]]}'
  'Returns the size of the collision padding around the hull.':
    'prefix': 'GetCollisionPadding'
    'body': 'GetCollisionPadding() ${1:--[[Returns:float\nReturns the size of the collision padding around the hull.\n]]}'
  'GetCommandClient() : returns the player who issued this console command.':
    'prefix': 'GetCommandClient'
    'body': 'GetCommandClient() ${1:--[[Returns:handle\nGetCommandClient() : returns the player who issued this console command.\n]]}'
  'No Description Set':
    'prefix': 'GetConceptRecipientType'
    'body': 'GetConceptRecipientType() ${1:--[[Returns:int\nNo Description Set\n]]}'
  'No Description Set':
    'prefix': 'GetConnectionState'
    'body': 'GetConnectionState(${1:int a}) ${2:--[[Returns:<>\nNo Description Set\n]]}'
  'This Mana regen is derived from constant bonuses like Basilius.':
    'prefix': 'GetConstantBasedManaRegen'
    'body': 'GetConstantBasedManaRegen() ${1:--[[Returns:float\nThis Mana regen is derived from constant bonuses like Basilius.\n]]}'
  'Returned the contained item.':
    'prefix': 'GetContainedItem'
    'body': 'GetContainedItem() ${1:--[[Returns:handle\nReturned the contained item.\n]]}'
  'Get the container for this item.':
    'prefix': 'GetContainer'
    'body': 'GetContainer() ${1:--[[Returns:handle\nGet the container for this item.\n]]}'
  'GetContext( name ): looks up a context and returns it if available. May return \'\'string\'\', \'\'float\'\', or \'\'nil\'\' (if the context isn\'t found)':
    'prefix': 'GetContext'
    'body': 'GetContext(${1:string a}) ${2:--[[Returns:table\nGetContext( name ): looks up a context and returns it if available. May return \'\'string\'\', \'\'float\'\', or \'\'nil\'\' (if the context isn\'t found)\n]]}'
  'Get the RPG unit this player controls.':
    'prefix': 'GetControlledRPGUnit'
    'body': 'GetControlledRPGUnit() ${1:--[[Returns:handle\nGet the RPG unit this player controls.\n]]}'
  'Get the cooldown duration for this ability at a given level, not the amount of cooldown actually left.':
    'prefix': 'GetCooldown'
    'body': 'GetCooldown(${1:int a}) ${2:--[[Returns:float\nGet the cooldown duration for this ability at a given level, not the amount of cooldown actually left.\n]]}'
  'No Description Set':
    'prefix': 'GetCooldownTime'
    'body': 'GetCooldownTime() ${1:--[[Returns:float\nNo Description Set\n]]}'
  'No Description Set':
    'prefix': 'GetCooldownTimeRemaining'
    'body': 'GetCooldownTimeRemaining() ${1:--[[Returns:float\nNo Description Set\n]]}'
  'No Description Set':
    'prefix': 'GetCost'
    'body': 'GetCost() ${1:--[[Returns:int\nNo Description Set\n]]}'
  'No Description Set':
    'prefix': 'GetCreationTime'
    'body': 'GetCreationTime() ${1:--[[Returns:float\nNo Description Set\n]]}'
  'No Description Set':
    'prefix': 'GetCreepDamageTaken'
    'body': 'GetCreepDamageTaken(${1:int a}) ${2:--[[Returns:int\nNo Description Set\n]]}'
  'Get the ability this unit is currently casting.':
    'prefix': 'GetCurrentActiveAbility'
    'body': 'GetCurrentActiveAbility() ${1:--[[Returns:handle\nGet the ability this unit is currently casting.\n]]}'
  'Get the number of charges this item currently has.':
    'prefix': 'GetCurrentCharges'
    'body': 'GetCurrentCharges() ${1:--[[Returns:int\nGet the number of charges this item currently has.\n]]}'
  'Returns the instance of the oldest active scene entity \'\'\'(if any).':
    'prefix': 'GetCurrentScene'
    'body': 'GetCurrentScene() ${1:--[[Returns:handle\nReturns the instance of the oldest active scene entity \'\'\'(if any).\n]]}'
  'Gets the current vision range.':
    'prefix': 'GetCurrentVisionRange'
    'body': 'GetCurrentVisionRange() ${1:--[[Returns:int\nGets the current vision range.\n]]}'
  'Returns the amount of XP':
    'prefix': 'GetCurrentXP'
    'body': 'GetCurrentXP() ${1:--[[Returns:int\nReturns the amount of XP\n]]}'
  'No Description Set':
    'prefix': 'GetCursorCastTarget'
    'body': 'GetCursorCastTarget() ${1:--[[Returns:handle\nNo Description Set\n]]}'
  'No Description Set':
    'prefix': 'GetCursorPosition'
    'body': 'GetCursorPosition() ${1:--[[Returns:Vector\nNo Description Set\n]]}'
  'No Description Set':
    'prefix': 'GetCursorTarget'
    'body': 'GetCursorTarget() ${1:--[[Returns:handle\nNo Description Set\n]]}'
  'No Description Set':
    'prefix': 'GetCursorTargetingNothing'
    'body': 'GetCursorTargetingNothing() ${1:--[[Returns:bool\nNo Description Set\n]]}'
  'No Description Set':
    'prefix': 'GetCustomBuybackCooldown'
    'body': 'GetCustomBuybackCooldown(${1:int a}) ${2:--[[Returns:float\nNo Description Set\n]]}'
  'No Description Set':
    'prefix': 'GetCustomBuybackCost'
    'body': 'GetCustomBuybackCost(${1:int a}) ${2:--[[Returns:int\nNo Description Set\n]]}'
  'Returns the difficulty level of the custom game mode':
    'prefix': 'GetCustomGameDifficulty'
    'body': 'GetCustomGameDifficulty() ${1:--[[Returns:int\nReturns the difficulty level of the custom game mode\n]]}'
  'No Description Set':
    'prefix': 'GetDamageDoneToHero'
    'body': 'GetDamageDoneToHero(${1:int a}, ${2:int b}) ${3:--[[Returns:int\nNo Description Set\n]]}'
  'Returns the vision range after modifiers.':
    'prefix': 'GetDayTimeVisionRange'
    'body': 'GetDayTimeVisionRange() ${1:--[[Returns:int\nReturns the vision range after modifiers.\n]]}'
  'No Description Set':
    'prefix': 'GetDeathGoldCost'
    'body': 'GetDeathGoldCost() ${1:--[[Returns:int\nNo Description Set\n]]}'
  'Value is stored in PlayerResource.':
    'prefix': 'GetDeaths'
    'body': 'GetDeaths() ${1:--[[Returns:int\nValue is stored in PlayerResource.\n]]}'
  'Get the XP bounty on this unit':
    'prefix': 'GetDeathXP'
    'body': 'GetDeathXP() ${1:--[[Returns:int\nGet the XP bounty on this unit\n]]}'
  'Get the entity name w/help if not defined (i.e. classname/etc)':
    'prefix': 'GetDebugName'
    'body': 'GetDebugName() ${1:--[[Returns:string\nGet the entity name w/help if not defined (i.e. classname/etc)\n]]}'
  'Value is stored in PlayerResource.':
    'prefix': 'GetDenies'
    'body': 'GetDenies() ${1:--[[Returns:int\nValue is stored in PlayerResource.\n]]}'
  'Returns difficulty level of the custom game mode':
    'prefix': 'GetDifficulty'
    'body': 'GetDifficulty() ${1:--[[Returns:int\nReturns difficulty level of the custom game mode\n]]}'
  'GetDOTACommandClient() : returns the DOTA player who issued this console command.':
    'prefix': 'GetDOTACommandClient'
    'body': 'GetDOTACommandClient() ${1:--[[Returns:handle\nGetDOTACommandClient() : returns the DOTA player who issued this console command.\n]]}'
  'Gets the Xth dropped item':
    'prefix': 'GetDroppedItem'
    'body': 'GetDroppedItem(${1:int dropIndex}) ${2:--[[Returns:handle\nGets the Xth dropped item\n]]}'
  'No Description Set':
    'prefix': 'GetDuration'
    'body': 'GetDuration() ${1:--[[Returns:float\nNo Description Set\n]]}'
  'Get the entity as an EHANDLE':
    'prefix': 'GetEntityHandle'
    'body': 'GetEntityHandle() ${1:--[[Returns:ehandle\nGet the entity as an EHANDLE\n]]}'
  'No Description Set':
    'prefix': 'GetEntityIndex'
    'body': 'GetEntityIndex() ${1:--[[Returns:int\nNo Description Set\n]]}'
  'GetEquippedWeapons() : Returns an array of all the equipped weapons':
    'prefix': 'GetEquippedWeapons'
    'body': 'GetEquippedWeapons() ${1:--[[Returns:table\nGetEquippedWeapons() : Returns an array of all the equipped weapons\n]]}'
  'No Description Set':
    'prefix': 'GetEventPointsForPlayerID'
    'body': 'GetEventPointsForPlayerID(${1:int a}) ${2:--[[Returns:int\nNo Description Set\n]]}'
  'No Description Set':
    'prefix': 'GetEventPremiumPointsGranted'
    'body': 'GetEventPremiumPointsGranted(${1:int a}) ${2:--[[Returns:int\nNo Description Set\n]]}'
  'No Description Set':
    'prefix': 'GetEventRankGranted'
    'body': 'GetEventRankGranted(${1:int a}) ${2:--[[Returns:int\nNo Description Set\n]]}'
  'GetFloat(name) : returns the convar as a \'\'float\'\'. May return \'\'nil\'\' if no such convar.':
    'prefix': 'GetFloat'
    'body': 'GetFloat(${1:string name}) ${2:--[[Returns:table\nGetFloat(name) : returns the convar as a \'\'float\'\'. May return \'\'nil\'\' if no such convar.\n]]}'
  'No Description Set':
    'prefix': 'GetForceAttackTarget'
    'body': 'GetForceAttackTarget() ${1:--[[Returns:handle\nNo Description Set\n]]}'
  'Get the forward \'\'vector\'\' of the entity':
    'prefix': 'GetForwardVector'
    'body': 'GetForwardVector() ${1:--[[Returns:Vector\nGet the forward \'\'vector\'\' of the entity\n]]}'
  'Returns the engines current frame count':
    'prefix': 'GetFrameCount'
    'body': 'GetFrameCount() ${1:--[[Returns:int\nReturns the engines current frame count\n]]}'
  'No Description Set':
    'prefix': 'GetFrostyBoostAmount'
    'body': 'GetFrostyBoostAmount(${1:int a}, ${2:int b}) ${3:--[[Returns:float\nNo Description Set\n]]}'
  'No Description Set':
    'prefix': 'GetFrostyPointsForRound'
    'body': 'GetFrostyPointsForRound(${1:int a}, ${2:int b}, ${3:int c}) ${4:--[[Returns:int\nNo Description Set\n]]}'
  'Get the game mode entity':
    'prefix': 'GetGameModeEntity'
    'body': 'GetGameModeEntity() ${1:--[[Returns:handle\nGet the game mode entity\n]]}'
  'Returns the number of seconds elapsed since map start. This time doesn\'t count up when the game is paused':
    'prefix': 'GetGameTime'
    'body': 'GetGameTime() ${1:--[[Returns:float\nReturns the number of seconds elapsed since map start. This time doesn\'t count up when the game is paused\n]]}'
  'Returns gold amount for the player owning this hero':
    'prefix': 'GetGold'
    'body': 'GetGold() ${1:--[[Returns:int\nReturns gold amount for the player owning this hero\n]]}'
  'No Description Set':
    'prefix': 'GetGoldBagsCollected'
    'body': 'GetGoldBagsCollected(${1:int a}) ${2:--[[Returns:int\nNo Description Set\n]]}'
  'No Description Set':
    'prefix': 'GetGoldBounty'
    'body': 'GetGoldBounty() ${1:--[[Returns:int\nNo Description Set\n]]}'
  'No Description Set':
    'prefix': 'GetGoldCost'
    'body': 'GetGoldCost(${1:int a}) ${2:--[[Returns:int\nNo Description Set\n]]}'
  'No Description Set':
    'prefix': 'GetGoldCostForUpgrade'
    'body': 'GetGoldCostForUpgrade(${1:int a}) ${2:--[[Returns:int\nNo Description Set\n]]}'
  'No Description Set':
    'prefix': 'GetGoldFrostyBoostAmount'
    'body': 'GetGoldFrostyBoostAmount(${1:int a}, ${2:int b}) ${3:--[[Returns:float\nNo Description Set\n]]}'
  'No Description Set':
    'prefix': 'GetGoldFrostyPointsForRound'
    'body': 'GetGoldFrostyPointsForRound(${1:int a}, ${2:int b}, ${3:int c}) ${4:--[[Returns:int\nNo Description Set\n]]}'
  'No Description Set':
    'prefix': 'GetGoldLostToDeath'
    'body': 'GetGoldLostToDeath(${1:int a}) ${2:--[[Returns:int\nNo Description Set\n]]}'
  'No Description Set':
    'prefix': 'GetGoldPerMin'
    'body': 'GetGoldPerMin(${1:int a}) ${2:--[[Returns:float\nNo Description Set\n]]}'
  'No Description Set':
    'prefix': 'GetGoldSpentOnBuybacks'
    'body': 'GetGoldSpentOnBuybacks(${1:int a}) ${2:--[[Returns:int\nNo Description Set\n]]}'
  'No Description Set':
    'prefix': 'GetGoldSpentOnConsumables'
    'body': 'GetGoldSpentOnConsumables(${1:int a}) ${2:--[[Returns:int\nNo Description Set\n]]}'
  'No Description Set':
    'prefix': 'GetGoldSpentOnItems'
    'body': 'GetGoldSpentOnItems(${1:int a}) ${2:--[[Returns:int\nNo Description Set\n]]}'
  'No Description Set':
    'prefix': 'GetGoldSpentOnSupport'
    'body': 'GetGoldSpentOnSupport(${1:int a}) ${2:--[[Returns:int\nNo Description Set\n]]}'
  'Returns the supplied position moved to the ground. Second parameter is an NPC for measuring movement collision hull offset.':
    'prefix': 'GetGroundPosition'
    'body': 'GetGroundPosition(${1:Vector a}, ${2:handle b}) ${3:--[[Returns:Vector\nReturns the supplied position moved to the ground. Second parameter is an NPC for measuring movement collision hull offset.\n]]}'
  'No Description Set':
    'prefix': 'GetHasteFactor'
    'body': 'GetHasteFactor() ${1:--[[Returns:float\nNo Description Set\n]]}'
  'No Description Set':
    'prefix': 'GetHealing'
    'body': 'GetHealing(${1:int a}) ${2:--[[Returns:float\nNo Description Set\n]]}'
  'Get the health of this unit.':
    'prefix': 'GetHealth'
    'body': 'GetHealth() ${1:--[[Returns:int\nGet the health of this unit.\n]]}'
  'Returns integer amount of health missing from max.':
    'prefix': 'GetHealthDeficit'
    'body': 'GetHealthDeficit() ${1:--[[Returns:int\nReturns integer amount of health missing from max.\n]]}'
  'Get the current health percent of the unit.':
    'prefix': 'GetHealthPercent'
    'body': 'GetHealthPercent() ${1:--[[Returns:int\nGet the current health percent of the unit.\n]]}'
  'Hero health regen is affected by attributes.':
    'prefix': 'GetHealthRegen'
    'body': 'GetHealthRegen() ${1:--[[Returns:float\nHero health regen is affected by attributes.\n]]}'
  'Get the Nth hero in the Hero List':
    'prefix': 'GetHero'
    'body': 'GetHero(${1:int heroId}) ${2:--[[Returns:handle\nGet the Nth hero in the Hero List\n]]}'
  'Returns the number of heroes in the world':
    'prefix': 'GetHeroCount'
    'body': 'GetHeroCount() ${1:--[[Returns:int\nReturns the number of heroes in the world\n]]}'
  'No Description Set':
    'prefix': 'GetHeroDamageTaken'
    'body': 'GetHeroDamageTaken(${1:int a}) ${2:--[[Returns:int\nNo Description Set\n]]}'
  'No Description Set':
    'prefix': 'GetHeroLevelRequiredToUpgrade'
    'body': 'GetHeroLevelRequiredToUpgrade() ${1:--[[Returns:int\nNo Description Set\n]]}'
  'Is the Nian horn?':
    'prefix': 'GetHorn'
    'body': 'GetHorn() ${1:--[[Returns:handle\nIs the Nian horn?\n]]}'
  'Get the collision hull radius of this NPC':
    'prefix': 'GetHullRadius'
    'body': 'GetHullRadius() ${1:--[[Returns:float\nGet the collision hull radius of this NPC\n]]}'
  'Returns speed after all modifiers.':
    'prefix': 'GetIdealSpeed'
    'body': 'GetIdealSpeed() ${1:--[[Returns:float\nReturns speed after all modifiers.\n]]}'
  'Hero attack speed is also affected by agility.':
    'prefix': 'GetIncreasedAttackSpeed'
    'body': 'GetIncreasedAttackSpeed() ${1:--[[Returns:float\nHero attack speed is also affected by agility.\n]]}'
  'Get the initial number of charges this item has.':
    'prefix': 'GetInitialCharges'
    'body': 'GetInitialCharges() ${1:--[[Returns:int\nGet the initial number of charges this item has.\n]]}'
  'Returns the initial waypoint goal for this NPC':
    'prefix': 'GetInitialGoalEntity'
    'body': 'GetInitialGoalEntity() ${1:--[[Returns:handle\nReturns the initial waypoint goal for this NPC\n]]}'
  'GetInt(name) : returns the convar as an \'\'int\'\'. May return \'\'nil\'\' if no such convar.':
    'prefix': 'GetInt'
    'body': 'GetInt(${1:string a}) ${2:--[[Returns:table\nGetInt(name) : returns the convar as an \'\'int\'\'. May return \'\'nil\'\' if no such convar.\n]]}'
  'Get Integer Attribute':
    'prefix': 'GetIntAttr'
    'body': 'GetIntAttr(${1:string a}) ${2:--[[Returns:int\nGet Integer Attribute\n]]}'
  'No Description Set':
    'prefix': 'GetIntellect'
    'body': 'GetIntellect() ${1:--[[Returns:float\nNo Description Set\n]]}'
  'No Description Set':
    'prefix': 'GetIntellectGain'
    'body': 'GetIntellectGain() ${1:--[[Returns:float\nNo Description Set\n]]}'
  'No Description Set':
    'prefix': 'GetIntrinsicModifierName'
    'body': 'GetIntrinsicModifierName() ${1:--[[Returns:string\nNo Description Set\n]]}'
  'Get the invulnerability count for a building.':
    'prefix': 'GetInvulnCount'
    'body': 'GetInvulnCount() ${1:--[[Returns:int\nGet the invulnerability count for a building.\n]]}'
  'Returns nth item in inventory slot (index is zero based)':
    'prefix': 'GetItemInSlot'
    'body': 'GetItemInSlot(${1:int a}) ${2:--[[Returns:handle\nReturns nth item in inventory slot (index is zero based)\n]]}'
  'Value is stored in PlayerResource.':
    'prefix': 'GetKills'
    'body': 'GetKills() ${1:--[[Returns:int\nValue is stored in PlayerResource.\n]]}'
  'No Description Set':
    'prefix': 'GetKillsDoneToHero'
    'body': 'GetKillsDoneToHero(${1:int a}, ${2:int b}) ${3:--[[Returns:int\nNo Description Set\n]]}'
  'No Description Set':
    'prefix': 'GetLastHitMultikill'
    'body': 'GetLastHitMultikill(${1:int a}) ${2:--[[Returns:int\nNo Description Set\n]]}'
  'Value is stored in PlayerResource.':
    'prefix': 'GetLastHits'
    'body': 'GetLastHits() ${1:--[[Returns:int\nValue is stored in PlayerResource.\n]]}'
  'No Description Set':
    'prefix': 'GetLastHitStreak'
    'body': 'GetLastHitStreak(${1:int a}) ${2:--[[Returns:int\nNo Description Set\n]]}'
  'Get the last game time that this unit switched to/from idle state.':
    'prefix': 'GetLastIdleChangeTime'
    'body': 'GetLastIdleChangeTime() ${1:--[[Returns:float\nGet the last game time that this unit switched to/from idle state.\n]]}'
  'Returns the level of this unit.':
    'prefix': 'GetLevel'
    'body': 'GetLevel() ${1:--[[Returns:int\nReturns the level of this unit.\n]]}'
  'No Description Set':
    'prefix': 'GetLevelSpecialValueFor'
    'body': 'GetLevelSpecialValueFor(${1:string a}, ${2:int b}) ${3:--[[Returns:table\nNo Description Set\n]]}'
  'Get the local player on a listen server.':
    'prefix': 'GetListenServerHost'
    'body': 'GetListenServerHost() ${1:--[[Returns:handle\nGet the local player on a listen server.\n]]}'
  'Maybe local angvel':
    'prefix': 'GetLocalAngularVelocity'
    'body': 'GetLocalAngularVelocity() ${1:--[[Returns:QAngle\nMaybe local angvel\n]]}'
  'Get Entity relative velocity':
    'prefix': 'GetLocalVelocity'
    'body': 'GetLocalVelocity() ${1:--[[Returns:Vector\nGet Entity relative velocity\n]]}'
  'Returns current magical armor value.':
    'prefix': 'GetMagicalArmorValue'
    'body': 'GetMagicalArmorValue() ${1:--[[Returns:float\nReturns current magical armor value.\n]]}'
  'Returns the player ID of the controlling player.':
    'prefix': 'GetMainControllingPlayer'
    'body': 'GetMainControllingPlayer() ${1:--[[Returns:int\nReturns the player ID of the controlling player.\n]]}'
  'Get the mana on this unit.':
    'prefix': 'GetMana'
    'body': 'GetMana() ${1:--[[Returns:float\nGet the mana on this unit.\n]]}'
  'No Description Set':
    'prefix': 'GetManaCost'
    'body': 'GetManaCost(${1:int a}) ${2:--[[Returns:int\nNo Description Set\n]]}'
  'Get the percent of mana remaining.':
    'prefix': 'GetManaPercent'
    'body': 'GetManaPercent() ${1:--[[Returns:int\nGet the percent of mana remaining.\n]]}'
  'Hero mana regen is affected by attributes.':
    'prefix': 'GetManaRegen'
    'body': 'GetManaRegen() ${1:--[[Returns:float\nHero mana regen is affected by attributes.\n]]}'
  'Get the name of the map.':
    'prefix': 'GetMapName'
    'body': 'GetMapName() ${1:--[[Returns:string\nGet the name of the map.\n]]}'
  'Have we received the post match signout message that includes reward information':
    'prefix': 'GetMatchSignoutComplete'
    'body': 'GetMatchSignoutComplete() ${1:--[[Returns:bool\nHave we received the post match signout message that includes reward information\n]]}'
  'Gets max exposure for this tonemap controller':
    'prefix': 'GetMaxExposure'
    'body': 'GetMaxExposure() ${1:--[[Returns:float\nGets max exposure for this tonemap controller\n]]}'
  'Get the maximum health of this unit.':
    'prefix': 'GetMaxHealth'
    'body': 'GetMaxHealth() ${1:--[[Returns:int\nGet the maximum health of this unit.\n]]}'
  'No Description Set':
    'prefix': 'GetMaxLevel'
    'body': 'GetMaxLevel() ${1:--[[Returns:int\nNo Description Set\n]]}'
  'Get the maximum mana of this unit.':
    'prefix': 'GetMaxMana'
    'body': 'GetMaxMana() ${1:--[[Returns:float\nGet the maximum mana of this unit.\n]]}'
  'Get the longest delay for all events attached to an output':
    'prefix': 'GetMaxOutputDelay'
    'body': 'GetMaxOutputDelay(${1:ehandle a}, ${2:string b}) ${3:--[[Returns:float\nGet the longest delay for all events attached to an output\n]]}'
  'returns unit\'s max speed':
    'prefix': 'GetMaxSpeed'
    'body': 'GetMaxSpeed() ${1:--[[Returns:float\nreturns unit\'s max speed\n]]}'
  'returns maximum stamina amount.':
    'prefix': 'GetMaxStamina'
    'body': 'GetMaxStamina() ${1:--[[Returns:float\nreturns maximum stamina amount.\n]]}'
  'Gets min exposure for this tonemap controller':
    'prefix': 'GetMinExposure'
    'body': 'GetMinExposure() ${1:--[[Returns:float\nGets min exposure for this tonemap controller\n]]}'
  'No Description Set':
    'prefix': 'GetMisses'
    'body': 'GetMisses(${1:int a}) ${2:--[[Returns:int\nNo Description Set\n]]}'
  'Returns the name of the model':
    'prefix': 'GetModelName'
    'body': 'GetModelName() ${1:--[[Returns:string\nReturns the name of the model\n]]}'
  'No Description Set':
    'prefix': 'GetModelRadius'
    'body': 'GetModelRadius() ${1:--[[Returns:float\nNo Description Set\n]]}'
  'How many modifiers does this unit have?':
    'prefix': 'GetModifierCount'
    'body': 'GetModifierCount() ${1:--[[Returns:int\nHow many modifiers does this unit have?\n]]}'
  'Get a modifier name by index.':
    'prefix': 'GetModifierNameByIndex'
    'body': 'GetModifierNameByIndex(${1:int a}) ${2:--[[Returns:string\nGet a modifier name by index.\n]]}'
  'No Description Set':
    'prefix': 'GetModifierValue'
    'body': 'GetModifierValue() ${1:--[[Returns:float\nNo Description Set\n]]}'
  'No Description Set':
    'prefix': 'GetModifierValueBonus'
    'body': 'GetModifierValueBonus() ${1:--[[Returns:float\nNo Description Set\n]]}'
  'No Description Set':
    'prefix': 'GetMostRecentDamageTime'
    'body': 'GetMostRecentDamageTime() ${1:--[[Returns:float\nNo Description Set\n]]}'
  'Returs the movement target entity, if set.':
    'prefix': 'GetMovementTargetEntity'
    'body': 'GetMovementTargetEntity() ${1:--[[Returns:handle\nReturs the movement target entity, if set.\n]]}'
  'If in hierarchy, retrieves the entity\'s parent':
    'prefix': 'GetMoveParent'
    'body': 'GetMoveParent() ${1:--[[Returns:handle\nIf in hierarchy, retrieves the entity\'s parent\n]]}'
  'No Description Set':
    'prefix': 'GetMoveSpeedModifier'
    'body': 'GetMoveSpeedModifier(${1:float a}) ${2:--[[Returns:float\nNo Description Set\n]]}'
  'No Description Set':
    'prefix': 'GetMultipleKillCount'
    'body': 'GetMultipleKillCount() ${1:--[[Returns:int\nNo Description Set\n]]}'
  'Get whether this NPC is required to reach each goal entity, rather than being allowed to \'unkink\' their path':
    'prefix': 'GetMustReachEachGoalEntity'
    'body': 'GetMustReachEachGoalEntity() ${1:--[[Returns:bool\nGet whether this NPC is required to reach each goal entity, rather than being allowed to \'unkink\' their path\n]]}'
  'No Description Set':
    'prefix': 'GetName'
    'body': 'GetName() ${1:--[[Returns:string\nNo Description Set\n]]}'
  'No Description Set':
    'prefix': 'GetNearbyCreepDeaths'
    'body': 'GetNearbyCreepDeaths(${1:int a}) ${2:--[[Returns:int\nNo Description Set\n]]}'
  'Gets the start time for the Nian fight':
    'prefix': 'GetNianFightStartTime'
    'body': 'GetNianFightStartTime() ${1:--[[Returns:float\nGets the start time for the Nian fight\n]]}'
  'For New Bloom, get total damage taken by the Nian / Year Beast':
    'prefix': 'GetNianTotalDamageTaken'
    'body': 'GetNianTotalDamageTaken() ${1:--[[Returns:int\nFor New Bloom, get total damage taken by the Nian / Year Beast\n]]}'
  'Returns the vision range after modifiers.':
    'prefix': 'GetNightTimeVisionRange'
    'body': 'GetNightTimeVisionRange() ${1:--[[Returns:int\nReturns the vision range after modifiers.\n]]}'
  'No Description Set':
    'prefix': 'GetNthCourierForTeam'
    'body': 'GetNthCourierForTeam(${1:int a}, ${2:int b}) ${3:--[[Returns:handle\nNo Description Set\n]]}'
  'No Description Set':
    'prefix': 'GetNthPlayerIDOnTeam'
    'body': 'GetNthPlayerIDOnTeam(${1:int a}, ${2:int b}) ${3:--[[Returns:int\nNo Description Set\n]]}'
  'No Description Set':
    'prefix': 'GetNumAttackers'
    'body': 'GetNumAttackers() ${1:--[[Returns:int\nNo Description Set\n]]}'
  'No Description Set':
    'prefix': 'GetNumConsumablesPurchased'
    'body': 'GetNumConsumablesPurchased(${1:int a}) ${2:--[[Returns:int\nNo Description Set\n]]}'
  'No Description Set':
    'prefix': 'GetNumCouriersForTeam'
    'body': 'GetNumCouriersForTeam(${1:int a}) ${2:--[[Returns:int\nNo Description Set\n]]}'
  'No Description Set':
    'prefix': 'GetNumItemsPurchased'
    'body': 'GetNumItemsPurchased(${1:int a}) ${2:--[[Returns:int\nNo Description Set\n]]}'
  'No Description Set':
    'prefix': 'GetOpposingTeamNumber'
    'body': 'GetOpposingTeamNumber() ${1:--[[Returns:int\nNo Description Set\n]]}'
  'Retrieve, creating if necessary, the private per-instance script-side data associated with an entity':
    'prefix': 'GetOrCreatePrivateScriptScope'
    'body': 'GetOrCreatePrivateScriptScope() ${1:--[[Returns:handle\nRetrieve, creating if necessary, the private per-instance script-side data associated with an entity\n]]}'
  'Retrieve, creating if necessary, the public script-side data associated with an entity':
    'prefix': 'GetOrCreatePublicScriptScope'
    'body': 'GetOrCreatePublicScriptScope() ${1:--[[Returns:handle\nRetrieve, creating if necessary, the public script-side data associated with an entity\n]]}'
  'No Description Set':
    'prefix': 'GetOrigin'
    'body': 'GetOrigin() ${1:--[[Returns:Vector\nNo Description Set\n]]}'
  'Gets this entity\'s owner':
    'prefix': 'GetOwner'
    'body': 'GetOwner() ${1:--[[Returns:handle\nGets this entity\'s owner\n]]}'
  'Get the owner entity, if there is one':
    'prefix': 'GetOwnerEntity'
    'body': 'GetOwnerEntity() ${1:--[[Returns:handle\nGet the owner entity, if there is one\n]]}'
  'Get the collision hull radius (including padding) of this NPC':
    'prefix': 'GetPaddedCollisionRadius'
    'body': 'GetPaddedCollisionRadius() ${1:--[[Returns:float\nGet the collision hull radius (including padding) of this NPC\n]]}'
  'No Description Set':
    'prefix': 'GetParticleReplacement'
    'body': 'GetParticleReplacement(${1:string a}, ${2:handle b}) ${3:--[[Returns:string\nNo Description Set\n]]}'
  'This Mana regen is derived from % bonuses (from items like Void Stone).':
    'prefix': 'GetPercentageBasedManaRegen'
    'body': 'GetPercentageBasedManaRegen() ${1:--[[Returns:float\nThis Mana regen is derived from % bonuses (from items like Void Stone).\n]]}'
  'Get Angular Velocity for VPHYS or normal object':
    'prefix': 'GetPhysAngularVelocity'
    'body': 'GetPhysAngularVelocity(${1:handle a}) ${2:--[[Returns:Vector\nGet Angular Velocity for VPHYS or normal object\n]]}'
  'Returns base physical armor value.':
    'prefix': 'GetPhysicalArmorBaseValue'
    'body': 'GetPhysicalArmorBaseValue() ${1:--[[Returns:float\nReturns base physical armor value.\n]]}'
  'Hero armor is affected by attributes.':
    'prefix': 'GetPhysicalArmorValue'
    'body': 'GetPhysicalArmorValue() ${1:--[[Returns:float\nHero armor is affected by attributes.\n]]}'
  'Get Velocity for VPHYS or normal object':
    'prefix': 'GetPhysVelocity'
    'body': 'GetPhysVelocity(${1:handle a}) ${2:--[[Returns:Vector\nGet Velocity for VPHYS or normal object\n]]}'
  'No Description Set':
    'prefix': 'GetPlaybackRateOverride'
    'body': 'GetPlaybackRateOverride() ${1:--[[Returns:float\nNo Description Set\n]]}'
  'No Description Set':
    'prefix': 'GetPlayer'
    'body': 'GetPlayer(${1:int a}) ${2:--[[Returns:handle\nNo Description Set\n]]}'
  'Returns player ID of the player owning this hero':
    'prefix': 'GetPlayerID'
    'body': 'GetPlayerID() ${1:--[[Returns:int\nReturns player ID of the player owning this hero\n]]}'
  'No Description Set':
    'prefix': 'GetPlayerLoadedCompletely'
    'body': 'GetPlayerLoadedCompletely(${1:int a}) ${2:--[[Returns:bool\nNo Description Set\n]]}'
  'No Description Set':
    'prefix': 'GetPlayerName'
    'body': 'GetPlayerName(${1:int a}) ${2:--[[Returns:string\nNo Description Set\n]]}'
  'Returns the player that owns this unit':
    'prefix': 'GetPlayerOwner'
    'body': 'GetPlayerOwner() ${1:--[[Returns:handle\nReturns the player that owns this unit\n]]}'
  'Get the owner player ID for this unit.':
    'prefix': 'GetPlayerOwnerID'
    'body': 'GetPlayerOwnerID() ${1:--[[Returns:int\nGet the owner player ID for this unit.\n]]}'
  'No Description Set':
    'prefix': 'GetPlayerReservedState'
    'body': 'GetPlayerReservedState(${1:int a}) ${2:--[[Returns:bool\nNo Description Set\n]]}'
  '0 = strength, 1 = agility, 2 = intelligence.':
    'prefix': 'GetPrimaryAttribute'
    'body': 'GetPrimaryAttribute() ${1:--[[Returns:int\n0 = strength, 1 = agility, 2 = intelligence.\n]]}'
  'No Description Set':
    'prefix': 'GetPrimaryStatValue'
    'body': 'GetPrimaryStatValue() ${1:--[[Returns:float\nNo Description Set\n]]}'
  'Retrieve the private per-instance script-side data associated with an entity':
    'prefix': 'GetPrivateScriptScope'
    'body': 'GetPrivateScriptScope() ${1:--[[Returns:handle\nRetrieve the private per-instance script-side data associated with an entity\n]]}'
  'No Description Set':
    'prefix': 'GetProjectileSpeed'
    'body': 'GetProjectileSpeed() ${1:--[[Returns:int\nNo Description Set\n]]}'
  'Retrieve the public script-side data associated with an entity':
    'prefix': 'GetPublicScriptScope'
    'body': 'GetPublicScriptScope() ${1:--[[Returns:handle\nRetrieve the public script-side data associated with an entity\n]]}'
  'Get the purchaser for this item.':
    'prefix': 'GetPurchaser'
    'body': 'GetPurchaser() ${1:--[[Returns:handle\nGet the purchaser for this item.\n]]}'
  'Get the purchase time of this item':
    'prefix': 'GetPurchaseTime'
    'body': 'GetPurchaseTime() ${1:--[[Returns:float\nGet the purchase time of this item\n]]}'
  'No Description Set':
    'prefix': 'GetRangeToUnit'
    'body': 'GetRangeToUnit(${1:handle a}) ${2:--[[Returns:float\nNo Description Set\n]]}'
  'No Description Set':
    'prefix': 'GetRawPlayerDamage'
    'body': 'GetRawPlayerDamage(${1:int a}) ${2:--[[Returns:int\nNo Description Set\n]]}'
  'No Description Set':
    'prefix': 'GetReliableGold'
    'body': 'GetReliableGold(${1:int a}) ${2:--[[Returns:int\nNo Description Set\n]]}'
  'No Description Set':
    'prefix': 'GetRespawnSeconds'
    'body': 'GetRespawnSeconds(${1:int a}) ${2:--[[Returns:int\nNo Description Set\n]]}'
  'No Description Set':
    'prefix': 'GetRespawnTime'
    'body': 'GetRespawnTime() ${1:--[[Returns:float\nNo Description Set\n]]}'
  'Get the right \'\'vector\'\' of the entity':
    'prefix': 'GetRightVector'
    'body': 'GetRightVector() ${1:--[[Returns:Vector\nGet the right \'\'vector\'\' of the entity\n]]}'
  'If in hierarchy, walks up the hierarchy to find the root parent':
    'prefix': 'GetRootMoveParent'
    'body': 'GetRootMoveParent() ${1:--[[Returns:handle\nIf in hierarchy, walks up the hierarchy to find the root parent\n]]}'
  'No Description Set':
    'prefix': 'GetRoshanKills'
    'body': 'GetRoshanKills(${1:int a}) ${2:--[[Returns:int\nNo Description Set\n]]}'
  'No Description Set':
    'prefix': 'GetRunePickups'
    'body': 'GetRunePickups(${1:int a}) ${2:--[[Returns:int\nNo Description Set\n]]}'
  'Returns the instance of the scene entity at the specified index.':
    'prefix': 'GetSceneByIndex'
    'body': 'GetSceneByIndex(${1:int a}) ${2:--[[Returns:handle\nReturns the instance of the scene entity at the specified index.\n]]}'
  'No Description Set':
    'prefix': 'GetSecondsPerAttack'
    'body': 'GetSecondsPerAttack() ${1:--[[Returns:float\nNo Description Set\n]]}'
  'No Description Set':
    'prefix': 'GetSelectedHeroEntity'
    'body': 'GetSelectedHeroEntity(${1:int a}) ${2:--[[Returns:handle\nNo Description Set\n]]}'
  'No Description Set':
    'prefix': 'GetSelectedHeroID'
    'body': 'GetSelectedHeroID(${1:int a}) ${2:--[[Returns:int\nNo Description Set\n]]}'
  'No Description Set':
    'prefix': 'GetSelectedHeroName'
    'body': 'GetSelectedHeroName(${1:int a}) ${2:--[[Returns:string\nNo Description Set\n]]}'
  'returns range of unit\'s 360 degree sensing sphere':
    'prefix': 'GetSensingSphereRange'
    'body': 'GetSensingSphereRange() ${1:--[[Returns:float\nreturns range of unit\'s 360 degree sensing sphere\n]]}'
  'Returns the active sequence':
    'prefix': 'GetSequence'
    'body': 'GetSequence() ${1:--[[Returns:<>\nReturns the active sequence\n]]}'
  'No Description Set':
    'prefix': 'GetShareability'
    'body': 'GetShareability() ${1:--[[Returns:int\nNo Description Set\n]]}'
  'No Description Set':
    'prefix': 'GetSharedCooldownName'
    'body': 'GetSharedCooldownName() ${1:--[[Returns:string\nNo Description Set\n]]}'
  'returns angle in which the unit can see things up to sight range':
    'prefix': 'GetSightConeAngle'
    'body': 'GetSightConeAngle() ${1:--[[Returns:float\nreturns angle in which the unit can see things up to sight range\n]]}'
  'returns range of unit\'s sight cone':
    'prefix': 'GetSightConeRange'
    'body': 'GetSightConeRange() ${1:--[[Returns:float\nreturns range of unit\'s sight cone\n]]}'
  'Returns \'\'float\'\' duration of the sound. Takes soundname and optional actormodelname.':
    'prefix': 'GetSoundDuration'
    'body': 'GetSoundDuration(${1:string soundName}, ${2:string actormodelname}) ${3:--[[Returns:float\nReturns \'\'float\'\' duration of the sound. Takes soundname and optional actormodelname.\n]]}'
  'GetSpawnedEntities() : Get the list of the most recent spawned entities':
    'prefix': 'GetSpawnedEntities'
    'body': 'GetSpawnedEntities() ${1:--[[Returns:handle\nGetSpawnedEntities() : Get the list of the most recent spawned entities\n]]}'
  'No Description Set':
    'prefix': 'GetSpecialValueFor'
    'body': 'GetSpecialValueFor(${1:string a}) ${2:--[[Returns:table\nNo Description Set\n]]}'
  'returns current stamina amount.':
    'prefix': 'GetStamina'
    'body': 'GetStamina() ${1:--[[Returns:float\nreturns current stamina amount.\n]]}'
  'Returns only the regen based on Intelligence.':
    'prefix': 'GetStatsBasedManaRegen'
    'body': 'GetStatsBasedManaRegen() ${1:--[[Returns:float\nReturns only the regen based on Intelligence.\n]]}'
  'No Description Set':
    'prefix': 'GetSteamAccountID'
    'body': 'GetSteamAccountID(${1:int a}) ${2:--[[Returns:<>\nNo Description Set\n]]}'
  'No Description Set':
    'prefix': 'GetStolenActivityModifier'
    'body': 'GetStolenActivityModifier() ${1:--[[Returns:string\nNo Description Set\n]]}'
  'GetStr(name) : returns the convar as a \'\'string\'\'. May return \'\'nil\'\' if no such convar.':
    'prefix': 'GetStr'
    'body': 'GetStr(${1:string variableName}) ${2:--[[Returns:table\nGetStr(name) : returns the convar as a \'\'string\'\'. May return \'\'nil\'\' if no such convar.\n]]}'
  'Value is stored in PlayerResource.':
    'prefix': 'GetStreak'
    'body': 'GetStreak() ${1:--[[Returns:int\nValue is stored in PlayerResource.\n]]}'
  'No Description Set':
    'prefix': 'GetStrength'
    'body': 'GetStrength() ${1:--[[Returns:float\nNo Description Set\n]]}'
  'No Description Set':
    'prefix': 'GetStrengthGain'
    'body': 'GetStrengthGain() ${1:--[[Returns:float\nNo Description Set\n]]}'
  'No Description Set':
    'prefix': 'GetStuns'
    'body': 'GetStuns(${1:int a}) ${2:--[[Returns:float\nNo Description Set\n]]}'
  'Finds a subquest from this quest by index':
    'prefix': 'GetSubquest'
    'body': 'GetSubquest(${1:int a}) ${2:--[[Returns:handle\nFinds a subquest from this quest by index\n]]}'
  'Finds a subquest from this quest by name':
    'prefix': 'GetSubquestByName'
    'body': 'GetSubquestByName(${1:string a}) ${2:--[[Returns:handle\nFinds a subquest from this quest by name\n]]}'
  'Get the current real world date':
    'prefix': 'GetSystemDate'
    'body': 'GetSystemDate() ${1:--[[Returns:string\nGet the current real world date\n]]}'
  'Get the current real world time':
    'prefix': 'GetSystemTime'
    'body': 'GetSystemTime() ${1:--[[Returns:string\nGet the current real world time\n]]}'
  'Is the Nian\'s tail broken?':
    'prefix': 'GetTail'
    'body': 'GetTail() ${1:--[[Returns:handle\nIs the Nian\'s tail broken?\n]]}'
  'No Description Set':
    'prefix': 'GetTeam'
    'body': 'GetTeam(${1:int a}) ${2:--[[Returns:int\nNo Description Set\n]]}'
  'No Description Set':
    'prefix': 'GetTeamKills'
    'body': 'GetTeamKills(${1:int a}) ${2:--[[Returns:int\nNo Description Set\n]]}'
  'Get the team number of this unit.':
    'prefix': 'GetTeamNumber'
    'body': 'GetTeamNumber() ${1:--[[Returns:int\nGet the team number of this unit.\n]]}'
  'Get the time of day':
    'prefix': 'GetTimeOfDay'
    'body': 'GetTimeOfDay() ${1:--[[Returns:float\nGet the time of day\n]]}'
  'No Description Set':
    'prefix': 'GetTimeOfLastConsumablePurchase'
    'body': 'GetTimeOfLastConsumablePurchase(${1:int a}) ${2:--[[Returns:float\nNo Description Set\n]]}'
  'No Description Set':
    'prefix': 'GetTimeOfLastDeath'
    'body': 'GetTimeOfLastDeath(${1:int a}) ${2:--[[Returns:float\nNo Description Set\n]]}'
  'No Description Set':
    'prefix': 'GetTimeOfLastItemPurchase'
    'body': 'GetTimeOfLastItemPurchase(${1:int a}) ${2:--[[Returns:float\nNo Description Set\n]]}'
  'No Description Set':
    'prefix': 'GetTimeUntilRespawn'
    'body': 'GetTimeUntilRespawn() ${1:--[[Returns:float\nNo Description Set\n]]}'
  'No Description Set':
    'prefix': 'GetToggleState'
    'body': 'GetToggleState() ${1:--[[Returns:bool\nNo Description Set\n]]}'
  'No Description Set':
    'prefix': 'GetTotalEarnedGold'
    'body': 'GetTotalEarnedGold(${1:int a}) ${2:--[[Returns:int\nNo Description Set\n]]}'
  'No Description Set':
    'prefix': 'GetTotalEarnedXP'
    'body': 'GetTotalEarnedXP(${1:int a}) ${2:--[[Returns:int\nNo Description Set\n]]}'
  'No Description Set':
    'prefix': 'GetTotalGoldSpent'
    'body': 'GetTotalGoldSpent(${1:int a}) ${2:--[[Returns:int\nNo Description Set\n]]}'
  'Get how much gold has been spent on ability upgrades.':
    'prefix': 'GetTotalPurchasedUpgradeGoldCost'
    'body': 'GetTotalPurchasedUpgradeGoldCost() ${1:--[[Returns:int\nGet how much gold has been spent on ability upgrades.\n]]}'
  'No Description Set':
    'prefix': 'GetTowerDamageTaken'
    'body': 'GetTowerDamageTaken(${1:int a}) ${2:--[[Returns:int\nNo Description Set\n]]}'
  'No Description Set':
    'prefix': 'GetTowerKills'
    'body': 'GetTowerKills(${1:int a}) ${2:--[[Returns:int\nNo Description Set\n]]}'
  'returns unit\'s turn rate in degrees per second':
    'prefix': 'GetTurnRate'
    'body': 'GetTurnRate() ${1:--[[Returns:float\nreturns unit\'s turn rate in degrees per second\n]]}'
  'No Description Set':
    'prefix': 'GetUnitLabel'
    'body': 'GetUnitLabel() ${1:--[[Returns:string\nNo Description Set\n]]}'
  'get the unit name for this unit.':
    'prefix': 'GetUnitName'
    'body': 'GetUnitName() ${1:--[[Returns:string\nget the unit name for this unit.\n]]}'
  'No Description Set':
    'prefix': 'GetUnitShareMaskForPlayer'
    'body': 'GetUnitShareMaskForPlayer(${1:int a}, ${2:int b}) ${3:--[[Returns:int\nNo Description Set\n]]}'
  'No Description Set':
    'prefix': 'GetUnreliableGold'
    'body': 'GetUnreliableGold(${1:int a}) ${2:--[[Returns:int\nNo Description Set\n]]}'
  'Get the up \'\'vector\'\' of the entity':
    'prefix': 'GetUpVector'
    'body': 'GetUpVector() ${1:--[[Returns:Vector\nGet the up \'\'vector\'\' of the entity\n]]}'
  'Reads a spawn key':
    'prefix': 'GetValue'
    'body': 'GetValue(${1:string a}) ${2:--[[Returns:table\nReads a spawn key\n]]}'
  'No Description Set':
    'prefix': 'GetVelocity'
    'body': 'GetVelocity() ${1:--[[Returns:Vector\nNo Description Set\n]]}'
  'GetWeaponCount() : Gets the number of weapons currently equipped':
    'prefix': 'GetWeaponCount'
    'body': 'GetWeaponCount() ${1:--[[Returns:int\nGetWeaponCount() : Gets the number of weapons currently equipped\n]]}'
  'Gets the world\'s maximum X position.':
    'prefix': 'GetWorldMaxX'
    'body': 'GetWorldMaxX() ${1:--[[Returns:float\nGets the world\'s maximum X position.\n]]}'
  'Gets the world\'s maximum Y position.':
    'prefix': 'GetWorldMaxY'
    'body': 'GetWorldMaxY() ${1:--[[Returns:float\nGets the world\'s maximum Y position.\n]]}'
  'Gets the world\'s minimum X position.':
    'prefix': 'GetWorldMinX'
    'body': 'GetWorldMinX() ${1:--[[Returns:float\nGets the world\'s minimum X position.\n]]}'
  'Gets the world\'s minimum Y position.':
    'prefix': 'GetWorldMinY'
    'body': 'GetWorldMinY() ${1:--[[Returns:float\nGets the world\'s minimum Y position.\n]]}'
  'No Description Set':
    'prefix': 'GetXPPerMin'
    'body': 'GetXPPerMin(${1:int a}) ${2:--[[Returns:float\nNo Description Set\n]]}'
  'Give mana to this unit, this can be used for mana gained by abilities or item usage.':
    'prefix': 'GiveMana'
    'body': 'GiveMana(${1:float a}) ${2:--[[Returns:void\nGive mana to this unit, this can be used for mana gained by abilities or item usage.\n]]}'
  '( sItemName ) - grant an item to the unit by name.':
    'prefix': 'GrantItem'
    'body': 'GrantItem(${1:string a}, ${2:bool b}) ${3:--[[Returns:void\n( sItemName ) - grant an item to the unit by name.\n]]}'
  'Get the X position of the center of a given X index':
    'prefix': 'GridPosToWorldCenterX'
    'body': 'GridPosToWorldCenterX(${1:int a}) ${2:--[[Returns:float\nGet the X position of the center of a given X index\n]]}'
  'Get the Y position of the center of a given Y index':
    'prefix': 'GridPosToWorldCenterY'
    'body': 'GridPosToWorldCenterY(${1:int a}) ${2:--[[Returns:float\nGet the Y position of the center of a given Y index\n]]}'
  'See whether this unit has an ability by name.':
    'prefix': 'HasAbility'
    'body': 'HasAbility(${1:string a}) ${2:--[[Returns:bool\nSee whether this unit has an ability by name.\n]]}'
  'No Description Set':
    'prefix': 'HasAnyAvailableInventorySpace'
    'body': 'HasAnyAvailableInventorySpace() ${1:--[[Returns:bool\nNo Description Set\n]]}'
  'No Description Set':
    'prefix': 'HasAttackCapability'
    'body': 'HasAttackCapability() ${1:--[[Returns:bool\nNo Description Set\n]]}'
  'No Description Set':
    'prefix': 'HasFlyingVision'
    'body': 'HasFlyingVision() ${1:--[[Returns:bool\nNo Description Set\n]]}'
  'No Description Set':
    'prefix': 'HasFlyMovementCapability'
    'body': 'HasFlyMovementCapability() ${1:--[[Returns:bool\nNo Description Set\n]]}'
  'No Description Set':
    'prefix': 'HasGroundMovementCapability'
    'body': 'HasGroundMovementCapability() ${1:--[[Returns:bool\nNo Description Set\n]]}'
  'No Description Set':
    'prefix': 'HasInventory'
    'body': 'HasInventory() ${1:--[[Returns:bool\nNo Description Set\n]]}'
  'See whether this unit has an item by name.':
    'prefix': 'HasItemInInventory'
    'body': 'HasItemInInventory(${1:string a}) ${2:--[[Returns:bool\nSee whether this unit has an item by name.\n]]}'
  'Sees if this unit has a given modifier':
    'prefix': 'HasModifier'
    'body': 'HasModifier(${1:string a}) ${2:--[[Returns:bool\nSees if this unit has a given modifier\n]]}'
  'No Description Set':
    'prefix': 'HasMovementCapability'
    'body': 'HasMovementCapability() ${1:--[[Returns:bool\nNo Description Set\n]]}'
  'No Description Set':
    'prefix': 'HasOwnerAbandoned'
    'body': 'HasOwnerAbandoned() ${1:--[[Returns:bool\nNo Description Set\n]]}'
  'No Description Set':
    'prefix': 'HasRandomed'
    'body': 'HasRandomed(${1:int a}) ${2:--[[Returns:bool\nNo Description Set\n]]}'
  'No Description Set':
    'prefix': 'HasRepicked'
    'body': 'HasRepicked(${1:int playerID}) ${2:--[[Returns:bool\nNo Description Set\n]]}'
  'Args: const char* pItemName, \'\'bool\'\' bIncludeStashCombines, \'\'bool\'\' bAllowSelling':
    'prefix': 'HasRoomForItem'
    'body': 'HasRoomForItem(${1:string a}, ${2:bool b}, ${3:bool c}) ${4:--[[Returns:int\nArgs: const char* pItemName, \'\'bool\'\' bIncludeStashCombines, \'\'bool\'\' bAllowSelling\n]]}'
  'No Description Set':
    'prefix': 'HasScepter'
    'body': 'HasScepter() ${1:--[[Returns:bool\nNo Description Set\n]]}'
  'No Description Set':
    'prefix': 'HasSelectedHero'
    'body': 'HasSelectedHero(${1:int a}) ${2:--[[Returns:bool\nNo Description Set\n]]}'
  'Does this volume have the given tag.':
    'prefix': 'HasTag'
    'body': 'HasTag(${1:string a}) ${2:--[[Returns:bool\nDoes this volume have the given tag.\n]]}'
  'No Description Set':
    'prefix': 'HaveAllPlayersJoined'
    'body': 'HaveAllPlayersJoined() ${1:--[[Returns:bool\nNo Description Set\n]]}'
  'Heal this unit.':
    'prefix': 'Heal'
    'body': 'Heal(${1:float a}, ${2:handle b}) ${3:--[[Returns:void\nHeal this unit.\n]]}'
  'Levels up the hero, true or false to play effects.':
    'prefix': 'HeroLevelUp'
    'body': 'HeroLevelUp(${1:bool a}) ${2:--[[Returns:void\nLevels up the hero, true or false to play effects.\n]]}'
  'No Description Set':
    'prefix': 'HeroXPChange'
    'body': 'HeroXPChange(${1:float a}) ${2:--[[Returns:bool\nNo Description Set\n]]}'
  'Hold position.':
    'prefix': 'Hold'
    'body': 'Hold() ${1:--[[Returns:void\nHold position.\n]]}'
  'Draws a horizontal arrow. Specify endpoint\'s in world space.':
    'prefix': 'HorzArrow'
    'body': 'HorzArrow(${1:Vector a}, ${2:Vector b}, ${3:float c}, ${4:int d}, ${5:int e}, ${6:int f}, ${7:int g}, ${8:bool h}, ${9:float i}) ${10:--[[Returns:void\nDraws a horizontal arrow. Specify endpoint\'s in world space.\n]]}'
  'Value is stored in PlayerResource.':
    'prefix': 'IncrementAssists'
    'body': 'IncrementAssists() ${1:--[[Returns:void\nValue is stored in PlayerResource.\n]]}'
  'No Description Set':
    'prefix': 'IncrementClaimedDenies'
    'body': 'IncrementClaimedDenies(${1:int a}) ${2:--[[Returns:void\nNo Description Set\n]]}'
  'No Description Set':
    'prefix': 'IncrementClaimedMisses'
    'body': 'IncrementClaimedMisses(${1:int a}) ${2:--[[Returns:void\nNo Description Set\n]]}'
  'Value is stored in PlayerResource.':
    'prefix': 'IncrementDeaths'
    'body': 'IncrementDeaths() ${1:--[[Returns:void\nValue is stored in PlayerResource.\n]]}'
  'Value is stored in PlayerResource.':
    'prefix': 'IncrementDenies'
    'body': 'IncrementDenies() ${1:--[[Returns:void\nValue is stored in PlayerResource.\n]]}'
  'No Description Set':
    'prefix': 'IncrementGoldBagsCollected'
    'body': 'IncrementGoldBagsCollected(${1:int a}) ${2:--[[Returns:void\nNo Description Set\n]]}'
  'Passed ID is for the victim, killer ID is ID of the current hero. Value is stored in PlayerResource.':
    'prefix': 'IncrementKills'
    'body': 'IncrementKills(${1:int kills}) ${2:--[[Returns:void\nPassed ID is for the victim, killer ID is ID of the current hero. Value is stored in PlayerResource.\n]]}'
  'Value is stored in PlayerResource.':
    'prefix': 'IncrementLastHitMultikill'
    'body': 'IncrementLastHitMultikill() ${1:--[[Returns:void\nValue is stored in PlayerResource.\n]]}'
  'Value is stored in PlayerResource.':
    'prefix': 'IncrementLastHits'
    'body': 'IncrementLastHits() ${1:--[[Returns:void\nValue is stored in PlayerResource.\n]]}'
  'Value is stored in PlayerResource.':
    'prefix': 'IncrementLastHitStreak'
    'body': 'IncrementLastHitStreak() ${1:--[[Returns:void\nValue is stored in PlayerResource.\n]]}'
  'No Description Set':
    'prefix': 'IncrementMisses'
    'body': 'IncrementMisses(${1:int a}) ${2:--[[Returns:void\nNo Description Set\n]]}'
  'No Description Set':
    'prefix': 'IncrementModifierRefCount'
    'body': 'IncrementModifierRefCount() ${1:--[[Returns:void\nNo Description Set\n]]}'
  'Value is stored in PlayerResource.':
    'prefix': 'IncrementNearbyCreepDeaths'
    'body': 'IncrementNearbyCreepDeaths() ${1:--[[Returns:void\nValue is stored in PlayerResource.\n]]}'
  'Value is stored in PlayerResource.':
    'prefix': 'IncrementStreak'
    'body': 'IncrementStreak() ${1:--[[Returns:void\nValue is stored in PlayerResource.\n]]}'
  'No Description Set':
    'prefix': 'IncrementTotalEarnedXP'
    'body': 'IncrementTotalEarnedXP(${1:int a}, ${2:int b}) ${3:--[[Returns:void\nNo Description Set\n]]}'
  'Initialize with number of outputs':
    'prefix': 'Init'
    'body': 'Init(${1:int a}) ${2:--[[Returns:void\nInitialize with number of outputs\n]]}'
  'If the given file doesn\'t exist, creates it with the given contents; does nothing if it exists':
    'prefix': 'InitLogFile'
    'body': 'InitLogFile(${1:string a}, ${2:string b}) ${3:--[[Returns:void\nIf the given file doesn\'t exist, creates it with the given contents; does nothing if it exists\n]]}'
  'No Description Set':
    'prefix': 'Interrupt'
    'body': 'Interrupt() ${1:--[[Returns:void\nNo Description Set\n]]}'
  'No Description Set':
    'prefix': 'InterruptChannel'
    'body': 'InterruptChannel() ${1:--[[Returns:void\nNo Description Set\n]]}'
  'Parameter boolean determines finding clear space.':
    'prefix': 'InterruptMotionControllers'
    'body': 'InterruptMotionControllers(${1:bool a}) ${2:--[[Returns:void\nParameter boolean determines finding clear space.\n]]}'
  'No Description Set':
    'prefix': 'IsActivated'
    'body': 'IsActivated() ${1:--[[Returns:bool\nNo Description Set\n]]}'
  'Is this unit alive?':
    'prefix': 'IsAlive'
    'body': 'IsAlive() ${1:--[[Returns:bool\nIs this unit alive?\n]]}'
  'Is this creature an Ancient?':
    'prefix': 'IsAncient'
    'body': 'IsAncient() ${1:--[[Returns:bool\nIs this creature an Ancient?\n]]}'
  'Is attached to parent':
    'prefix': 'IsAttachedToParent'
    'body': 'IsAttachedToParent() ${1:--[[Returns:bool\nIs attached to parent\n]]}'
  'No Description Set':
    'prefix': 'IsAttackImmune'
    'body': 'IsAttackImmune() ${1:--[[Returns:bool\nNo Description Set\n]]}'
  'No Description Set':
    'prefix': 'IsAttacking'
    'body': 'IsAttacking() ${1:--[[Returns:bool\nNo Description Set\n]]}'
  'No Description Set':
    'prefix': 'IsAttackingEntity'
    'body': 'IsAttackingEntity(${1:handle a}) ${2:--[[Returns:bool\nNo Description Set\n]]}'
  'No Description Set':
    'prefix': 'IsAttributeBonus'
    'body': 'IsAttributeBonus() ${1:--[[Returns:bool\nNo Description Set\n]]}'
  'No Description Set':
    'prefix': 'IsBlind'
    'body': 'IsBlind() ${1:--[[Returns:bool\nNo Description Set\n]]}'
  'No Description Set':
    'prefix': 'IsBlockDisabled'
    'body': 'IsBlockDisabled() ${1:--[[Returns:bool\nNo Description Set\n]]}'
  'Checks whether the given position is blocked':
    'prefix': 'IsBlocked'
    'body': 'IsBlocked(${1:Vector a}) ${2:--[[Returns:bool\nChecks whether the given position is blocked\n]]}'
  'is this unit blocking?':
    'prefix': 'IsBlocking'
    'body': 'IsBlocking() ${1:--[[Returns:bool\nis this unit blocking?\n]]}'
  'No Description Set':
    'prefix': 'IsBroadcaster'
    'body': 'IsBroadcaster(${1:int a}) ${2:--[[Returns:bool\nNo Description Set\n]]}'
  'No Description Set':
    'prefix': 'IsBuybackDisabledByReapersScythe'
    'body': 'IsBuybackDisabledByReapersScythe() ${1:--[[Returns:bool\nNo Description Set\n]]}'
  'Is this unit a champion?':
    'prefix': 'IsChampion'
    'body': 'IsChampion() ${1:--[[Returns:bool\nIs this unit a champion?\n]]}'
  'Returns whether the ability is currently channeling.':
    'prefix': 'IsChanneling'
    'body': 'IsChanneling() ${1:--[[Returns:bool\nReturns whether the ability is currently channeling.\n]]}'
  'No Description Set':
    'prefix': 'IsCommandRestricted'
    'body': 'IsCommandRestricted() ${1:--[[Returns:bool\nNo Description Set\n]]}'
  'Is this unit controlled by any non-bot player?':
    'prefix': 'IsControllableByAnyPlayer'
    'body': 'IsControllableByAnyPlayer() ${1:--[[Returns:bool\nIs this unit controlled by any non-bot player?\n]]}'
  'No Description Set':
    'prefix': 'IsCooldownReady'
    'body': 'IsCooldownReady() ${1:--[[Returns:bool\nNo Description Set\n]]}'
  'No Description Set':
    'prefix': 'IsCosmetic'
    'body': 'IsCosmetic() ${1:--[[Returns:bool\nNo Description Set\n]]}'
  'Is this a Creature type NPC':
    'prefix': 'IsCreature'
    'body': 'IsCreature() ${1:--[[Returns:bool\nIs this a Creature type NPC\n]]}'
  'Is it day time.':
    'prefix': 'IsDaytime'
    'body': 'IsDaytime() ${1:--[[Returns:bool\nIs it day time.\n]]}'
  'Returns true if this server is a dedicated server.':
    'prefix': 'IsDedicatedServer'
    'body': 'IsDedicatedServer() ${1:--[[Returns:bool\nReturns true if this server is a dedicated server.\n]]}'
  'No Description Set':
    'prefix': 'IsDeniable'
    'body': 'IsDeniable() ${1:--[[Returns:bool\nNo Description Set\n]]}'
  'No Description Set':
    'prefix': 'IsDisableHelpSetForPlayerID'
    'body': 'IsDisableHelpSetForPlayerID(${1:int a}, ${2:int b}) ${3:--[[Returns:bool\nNo Description Set\n]]}'
  'No Description Set':
    'prefix': 'IsDisarmed'
    'body': 'IsDisarmed() ${1:--[[Returns:bool\nNo Description Set\n]]}'
  'No Description Set':
    'prefix': 'IsDominated'
    'body': 'IsDominated() ${1:--[[Returns:bool\nNo Description Set\n]]}'
  'No Description Set':
    'prefix': 'IsEvadeDisabled'
    'body': 'IsEvadeDisabled() ${1:--[[Returns:bool\nNo Description Set\n]]}'
  '( vecTargetPosition, flAngleTolerance ) - returns true if the unit is within flAngleTolerance degrees of the target position':
    'prefix': 'IsFacing'
    'body': 'IsFacing(${1:Vector a}, ${2:float b}) ${3:--[[Returns:bool\n( vecTargetPosition, flAngleTolerance ) - returns true if the unit is within flAngleTolerance degrees of the target position\n]]}'
  'No Description Set':
    'prefix': 'IsFakeClient'
    'body': 'IsFakeClient(${1:int a}) ${2:--[[Returns:bool\nNo Description Set\n]]}'
  'No Description Set':
    'prefix': 'IsFrozen'
    'body': 'IsFrozen() ${1:--[[Returns:bool\nNo Description Set\n]]}'
  'Returns whether the ability can be cast.':
    'prefix': 'IsFullyCastable'
    'body': 'IsFullyCastable() ${1:--[[Returns:bool\nReturns whether the ability can be cast.\n]]}'
  'No Description Set':
    'prefix': 'IsHardDisarmed'
    'body': 'IsHardDisarmed() ${1:--[[Returns:bool\nNo Description Set\n]]}'
  'Is this a hero or hero illusion?':
    'prefix': 'IsHero'
    'body': 'IsHero() ${1:--[[Returns:bool\nIs this a hero or hero illusion?\n]]}'
  'No Description Set':
    'prefix': 'IsHeroSelected'
    'body': 'IsHeroSelected(${1:string a}) ${2:--[[Returns:bool\nNo Description Set\n]]}'
  'No Description Set':
    'prefix': 'IsHeroSharedWithPlayerID'
    'body': 'IsHeroSharedWithPlayerID(${1:int a}, ${2:int b}) ${3:--[[Returns:bool\nNo Description Set\n]]}'
  'No Description Set':
    'prefix': 'IsHexed'
    'body': 'IsHexed() ${1:--[[Returns:bool\nNo Description Set\n]]}'
  'No Description Set':
    'prefix': 'IsHidden'
    'body': 'IsHidden() ${1:--[[Returns:bool\nNo Description Set\n]]}'
  'No Description Set':
    'prefix': 'IsHiddenWhenStolen'
    'body': 'IsHiddenWhenStolen() ${1:--[[Returns:bool\nNo Description Set\n]]}'
  'Is the Nian\'s horn broken?':
    'prefix': 'IsHornAlive'
    'body': 'IsHornAlive() ${1:--[[Returns:bool\nIs the Nian\'s horn broken?\n]]}'
  'Is this creature currently idle?':
    'prefix': 'IsIdle'
    'body': 'IsIdle() ${1:--[[Returns:bool\nIs this creature currently idle?\n]]}'
  'No Description Set':
    'prefix': 'IsIllusion'
    'body': 'IsIllusion() ${1:--[[Returns:bool\nNo Description Set\n]]}'
  'Returns whether the ability is currently casting.':
    'prefix': 'IsInAbilityPhase'
    'body': 'IsInAbilityPhase() ${1:--[[Returns:bool\nReturns whether the ability is currently casting.\n]]}'
  'No Description Set':
    'prefix': 'IsInvisible'
    'body': 'IsInvisible() ${1:--[[Returns:bool\nNo Description Set\n]]}'
  'No Description Set':
    'prefix': 'IsInvulnerable'
    'body': 'IsInvulnerable() ${1:--[[Returns:bool\nNo Description Set\n]]}'
  'No Description Set':
    'prefix': 'IsItem'
    'body': 'IsItem() ${1:--[[Returns:bool\nNo Description Set\n]]}'
  'No Description Set':
    'prefix': 'IsLowAttackPriority'
    'body': 'IsLowAttackPriority() ${1:--[[Returns:bool\nNo Description Set\n]]}'
  'No Description Set':
    'prefix': 'IsMagicImmune'
    'body': 'IsMagicImmune() ${1:--[[Returns:bool\nNo Description Set\n]]}'
  'Returns true if the entity is valid and marked for deletion.':
    'prefix': 'IsMarkedForDeletion'
    'body': 'IsMarkedForDeletion(${1:handle a}) ${2:--[[Returns:bool\nReturns true if the entity is valid and marked for deletion.\n]]}'
  'Is the unit mechanical?':
    'prefix': 'IsMechanical'
    'body': 'IsMechanical() ${1:--[[Returns:bool\nIs the unit mechanical?\n]]}'
  'No Description Set':
    'prefix': 'IsMovementImpaired'
    'body': 'IsMovementImpaired() ${1:--[[Returns:bool\nNo Description Set\n]]}'
  'No Description Set':
    'prefix': 'IsMuted'
    'body': 'IsMuted() ${1:--[[Returns:bool\nNo Description Set\n]]}'
  ' ':
    'prefix': 'IsNearbyTree'
    'body': 'IsNearbyTree(${1:Vector position}, ${2:float radius}, ${3:bool a}) ${4:--[[Returns:bool\n \n]]}'
  'Is this a neutral?':
    'prefix': 'IsNeutralUnitType'
    'body': 'IsNeutralUnitType() ${1:--[[Returns:bool\nIs this a neutral?\n]]}'
  'No Description Set':
    'prefix': 'IsNightmared'
    'body': 'IsNightmared() ${1:--[[Returns:bool\nNo Description Set\n]]}'
  'Returns true if the player is in noclip mode.':
    'prefix': 'IsNoclipping'
    'body': 'IsNoclipping() ${1:--[[Returns:bool\nReturns true if the player is in noclip mode.\n]]}'
  'No Description Set':
    'prefix': 'IsOpposingTeam'
    'body': 'IsOpposingTeam(${1:int a}) ${2:--[[Returns:bool\nNo Description Set\n]]}'
  'No Description Set':
    'prefix': 'IsOutOfGame'
    'body': 'IsOutOfGame() ${1:--[[Returns:bool\nNo Description Set\n]]}'
  'Is this unit owned by any non-bot player?':
    'prefix': 'IsOwnedByAnyPlayer'
    'body': 'IsOwnedByAnyPlayer() ${1:--[[Returns:bool\nIs this unit owned by any non-bot player?\n]]}'
  'No Description Set':
    'prefix': 'IsOwnersGoldEnough'
    'body': 'IsOwnersGoldEnough(${1:int a}) ${2:--[[Returns:bool\nNo Description Set\n]]}'
  'No Description Set':
    'prefix': 'IsOwnersGoldEnoughForUpgrade'
    'body': 'IsOwnersGoldEnoughForUpgrade() ${1:--[[Returns:bool\nNo Description Set\n]]}'
  'No Description Set':
    'prefix': 'IsOwnersManaEnough'
    'body': 'IsOwnersManaEnough() ${1:--[[Returns:bool\nNo Description Set\n]]}'
  'No Description Set':
    'prefix': 'IsPassive'
    'body': 'IsPassive() ${1:--[[Returns:bool\nNo Description Set\n]]}'
  'If this scene is currently paused.':
    'prefix': 'IsPaused'
    'body': 'IsPaused() ${1:--[[Returns:bool\nIf this scene is currently paused.\n]]}'
  'Is this a permanent item?':
    'prefix': 'IsPermanent'
    'body': 'IsPermanent() ${1:--[[Returns:bool\nIs this a permanent item?\n]]}'
  'Is this a phantom unit?':
    'prefix': 'IsPhantom'
    'body': 'IsPhantom() ${1:--[[Returns:bool\nIs this a phantom unit?\n]]}'
  'No Description Set':
    'prefix': 'IsPhantomBlocker'
    'body': 'IsPhantomBlocker() ${1:--[[Returns:bool\nNo Description Set\n]]}'
  'No Description Set':
    'prefix': 'IsPhased'
    'body': 'IsPhased() ${1:--[[Returns:bool\nNo Description Set\n]]}'
  'Is this a player entity?':
    'prefix': 'IsPlayer'
    'body': 'IsPlayer() ${1:--[[Returns:bool\nIs this a player entity?\n]]}'
  'If this scene is currently playing.':
    'prefix': 'IsPlayingBack'
    'body': 'IsPlayingBack() ${1:--[[Returns:bool\nIf this scene is currently playing.\n]]}'
  'No Description Set':
    'prefix': 'IsPositionInRange'
    'body': 'IsPositionInRange(${1:Vector a}, ${2:float b}) ${3:--[[Returns:bool\nNo Description Set\n]]}'
  'Is this unit a ranged attacker?':
    'prefix': 'IsRangedAttacker'
    'body': 'IsRangedAttacker() ${1:--[[Returns:bool\nIs this unit a ranged attacker?\n]]}'
  'Returns true if the hero is a true Hero, not a creep or an Illusion of a hero':
    'prefix': 'IsRealHero'
    'body': 'IsRealHero() ${1:--[[Returns:bool\nReturns true if the hero is a true Hero, not a creep or an Illusion of a hero\n]]}'
  'No Description Set':
    'prefix': 'IsReincarnating'
    'body': 'IsReincarnating() ${1:--[[Returns:bool\nNo Description Set\n]]}'
  'No Description Set':
    'prefix': 'IsRooted'
    'body': 'IsRooted() ${1:--[[Returns:bool\nNo Description Set\n]]}'
  'Ask whether the main sequence is done playing':
    'prefix': 'IsSequenceFinished'
    'body': 'IsSequenceFinished() ${1:--[[Returns:bool\nAsk whether the main sequence is done playing\n]]}'
  'No Description Set':
    'prefix': 'IsSharedWithTeammates'
    'body': 'IsSharedWithTeammates() ${1:--[[Returns:bool\nNo Description Set\n]]}'
  'No Description Set':
    'prefix': 'IsSilenced'
    'body': 'IsSilenced() ${1:--[[Returns:bool\nNo Description Set\n]]}'
  'No Description Set':
    'prefix': 'IsSoftDisarmed'
    'body': 'IsSoftDisarmed() ${1:--[[Returns:bool\nNo Description Set\n]]}'
  'No Description Set':
    'prefix': 'IsSpeciallyDeniable'
    'body': 'IsSpeciallyDeniable() ${1:--[[Returns:bool\nNo Description Set\n]]}'
  'No Description Set':
    'prefix': 'IsStealable'
    'body': 'IsStealable() ${1:--[[Returns:bool\nNo Description Set\n]]}'
  'No Description Set':
    'prefix': 'IsStolen'
    'body': 'IsStolen() ${1:--[[Returns:bool\nNo Description Set\n]]}'
  'No Description Set':
    'prefix': 'IsStunned'
    'body': 'IsStunned() ${1:--[[Returns:bool\nNo Description Set\n]]}'
  'Is this unit summoned?':
    'prefix': 'IsSummoned'
    'body': 'IsSummoned() ${1:--[[Returns:bool\nIs this unit summoned?\n]]}'
  'Is the Nian\'s tail broken?':
    'prefix': 'IsTailAlive'
    'body': 'IsTailAlive() ${1:--[[Returns:bool\nIs the Nian\'s tail broken?\n]]}'
  'No Description Set':
    'prefix': 'IsToggle'
    'body': 'IsToggle() ${1:--[[Returns:bool\nNo Description Set\n]]}'
  'Checks whether the passed entity is touching the trigger.':
    'prefix': 'IsTouching'
    'body': 'IsTouching(${1:handle a}) ${2:--[[Returns:bool\nChecks whether the passed entity is touching the trigger.\n]]}'
  'Is this a tower?':
    'prefix': 'IsTower'
    'body': 'IsTower() ${1:--[[Returns:bool\nIs this a tower?\n]]}'
  'No Description Set':
    'prefix': 'IsTrained'
    'body': 'IsTrained() ${1:--[[Returns:bool\nNo Description Set\n]]}'
  'Checks whether the given position is traversable':
    'prefix': 'IsTraversable'
    'body': 'IsTraversable(${1:Vector a}) ${2:--[[Returns:bool\nChecks whether the given position is traversable\n]]}'
  'No Description Set':
    'prefix': 'IsUnableToMiss'
    'body': 'IsUnableToMiss() ${1:--[[Returns:bool\nNo Description Set\n]]}'
  'No Description Set':
    'prefix': 'IsUnselectable'
    'body': 'IsUnselectable() ${1:--[[Returns:bool\nNo Description Set\n]]}'
  'Checks to see if the given hScript is a valid entity':
    'prefix': 'IsValidEntity'
    'body': 'IsValidEntity(${1:handle a}) ${2:--[[Returns:bool\nChecks to see if the given hScript is a valid entity\n]]}'
  'No Description Set':
    'prefix': 'IsValidPlayer'
    'body': 'IsValidPlayer(${1:int playerID}) ${2:--[[Returns:bool\nNo Description Set\n]]}'
  'No Description Set':
    'prefix': 'IsValidPlayerID'
    'body': 'IsValidPlayerID(${1:int playerID}) ${2:--[[Returns:bool\nNo Description Set\n]]}'
  'No Description Set':
    'prefix': 'IsValidTeamPlayer'
    'body': 'IsValidTeamPlayer(${1:int playerID}) ${2:--[[Returns:bool\nNo Description Set\n]]}'
  'No Description Set':
    'prefix': 'IsValidTeamPlayerID'
    'body': 'IsValidTeamPlayerID(${1:int playerID}) ${2:--[[Returns:bool\nNo Description Set\n]]}'
  'Kills this NPC, with the params Ability and Attacker':
    'prefix': 'Kill'
    'body': 'Kill(${1:handle a}, ${2:handle b}) ${3:--[[Returns:void\nKills this NPC, with the params Ability and Attacker\n]]}'
  'Args: Hero, Inflictor':
    'prefix': 'KilledHero'
    'body': 'KilledHero(${1:handle a}, ${2:handle b}) ${3:--[[Returns:void\nArgs: Hero, Inflictor\n]]}'
  'No Description Set':
    'prefix': 'LaunchLoot'
    'body': 'LaunchLoot(${1:bool a}, ${2:float b}, ${3:float c}, ${4:Vector d}) ${5:--[[Returns:void\nNo Description Set\n]]}'
  'Length of the Vector':
    'prefix': 'length'
    'body': 'length() ${1:--[[Returns:float\nLength of the Vector\n]]}'
  'Length of the Vector in the XY plane':
    'prefix': 'Length2D'
    'body': 'Length2D() ${1:--[[Returns:float\nLength of the Vector in the XY plane\n]]}'
  'Draws a line between two point\'s':
    'prefix': 'Line'
    'body': 'Line(${1:Vector a}, ${2:Vector b}, ${3:int c}, ${4:int d}, ${5:int e}, ${6:int f}, ${7:bool g}, ${8:float h}) ${9:--[[Returns:void\nDraws a line between two point\'s\n]]}'
  'Draws a line between two point\'s in screenspace':
    'prefix': 'Line2D'
    'body': 'Line2D(${1:Vector2D a}, ${2:Vector2D b}, ${3:int c}, ${4:int d}, ${5:int e}, ${6:int f}, ${7:float g}) ${8:--[[Returns:void\nDraws a line between two point\'s in screenspace\n]]}'
  '\n\t\t\tRegister as a listener for a game event from script.\n\t\t\t\n\t\t{{tip|In addition to listening for [[Dota 2 Workshop Tools/Scripting/Built-In Engine Events|standard engine events]], you can also create your own events by placing them in /scripts/custom_events.txt.}}':
    'prefix': 'ListenToGameEvent'
    'body': 'ListenToGameEvent(${1:string EventName}, ${2:handle functionNameToCall}, ${3:handle context}) ${4:--[[Returns:int\n\n\t\t\tRegister as a listener for a game event from script.\n\t\t\t\n\t\t{{tip|In addition to listening for [[Dota 2 Workshop Tools/Scripting/Built-In Engine Events|standard engine events]], you can also create your own events by placing them in /scripts/custom_events.txt.}}\n]]}'
  'Creates a \'\'table\'\' from the specified keyvalues text file':
    'prefix': 'LoadKeyValues'
    'body': 'LoadKeyValues(${1:string a}) ${2:--[[Returns:table\nCreates a \'\'table\'\' from the specified keyvalues text file\n]]}'
  'Creates a \'\'table\'\' from the specified keyvalues \'\'string\'\'':
    'prefix': 'LoadKeyValuesFromString'
    'body': 'LoadKeyValuesFromString(${1:string a}) ${2:--[[Returns:table\nCreates a \'\'table\'\' from the specified keyvalues \'\'string\'\'\n]]}'
  'given a dummy scene name and a vcd \'\'string\'\', load the scene':
    'prefix': 'LoadSceneFromString'
    'body': 'LoadSceneFromString(${1:string a}, ${2:string b}) ${3:--[[Returns:bool\ngiven a dummy scene name and a vcd \'\'string\'\', load the scene\n]]}'
  'Returns a sequence id given a name':
    'prefix': 'LookupSequence'
    'body': 'LookupSequence(${1:string a}) ${2:--[[Returns:<>\nReturns a sequence id given a name\n]]}'
  'No Description Set':
    'prefix': 'MakeIllusion'
    'body': 'MakeIllusion() ${1:--[[Returns:void\nNo Description Set\n]]}'
  'No Description Set':
    'prefix': 'MakePhantomBlocker'
    'body': 'MakePhantomBlocker() ${1:--[[Returns:void\nNo Description Set\n]]}'
  'Randoms this player\'s hero.':
    'prefix': 'MakeRandomHeroSelection'
    'body': 'MakeRandomHeroSelection() ${1:--[[Returns:void\nRandoms this player\'s hero.\n]]}'
  'Checks to see if the given hScript is a valid entity':
    'prefix': 'MakeStringToken'
    'body': 'MakeStringToken(${1:string a}) ${2:--[[Returns:int\nChecks to see if the given hScript is a valid entity\n]]}'
  'Makes ths specified team lose':
    'prefix': 'MakeTeamLose'
    'body': 'MakeTeamLose(${1:int team}) ${2:--[[Returns:void\nMakes ths specified team lose\n]]}'
  'No Description Set':
    'prefix': 'MakeVisibleDueToAttack'
    'body': 'MakeVisibleDueToAttack(${1:int a}) ${2:--[[Returns:void\nNo Description Set\n]]}'
  'No Description Set':
    'prefix': 'MakeVisibleToTeam'
    'body': 'MakeVisibleToTeam(${1:int a}, ${2:float b}) ${3:--[[Returns:void\nNo Description Set\n]]}'
  'Mark the ability button for this ability as needing a refresh':
    'prefix': 'MarkAbilityButtonDirty'
    'body': 'MarkAbilityButtonDirty() ${1:--[[Returns:void\nMark the ability button for this ability as needing a refresh\n]]}'
  'Adds passed value to base attribute value, then calls CalculateStatBonus.':
    'prefix': 'ModifyAgility'
    'body': 'ModifyAgility(${1:float a}) ${2:--[[Returns:void\nAdds passed value to base attribute value, then calls CalculateStatBonus.\n]]}'
  'Gives this hero some gold. Args: \'\'int\'\' nGoldChange, \'\'bool\'\' bReliable, \'\'int\'\' reason':
    'prefix': 'ModifyGold'
    'body': 'ModifyGold(${1:int goldAmmt}, ${2:bool reliable}, ${3:int reason}) ${4:--[[Returns:int\nGives this hero some gold. Args: \'\'int\'\' nGoldChange, \'\'bool\'\' bReliable, \'\'int\'\' reason\n]]}'
  'Sets the health to a specific value, with optional flags or inflictors.':
    'prefix': 'ModifyHealth'
    'body': 'ModifyHealth(${1:int a}, ${2:handle b}, ${3:bool c}, ${4:int d}) ${5:--[[Returns:void\nSets the health to a specific value, with optional flags or inflictors.\n]]}'
  'Adds passed value to base attribute value, then calls CalculateStatBonus.':
    'prefix': 'ModifyIntellect'
    'body': 'ModifyIntellect(${1:float a}) ${2:--[[Returns:void\nAdds passed value to base attribute value, then calls CalculateStatBonus.\n]]}'
  'Adds passed value to base attribute value, then calls CalculateStatBonus.':
    'prefix': 'ModifyStrength'
    'body': 'ModifyStrength(${1:float a}) ${2:--[[Returns:void\nAdds passed value to base attribute value, then calls CalculateStatBonus.\n]]}'
  'Move to follow a unit.':
    'prefix': 'MoveToNPC'
    'body': 'MoveToNPC(${1:handle a}) ${2:--[[Returns:void\nMove to follow a unit.\n]]}'
  'Give an item to another unit.':
    'prefix': 'MoveToNPCToGiveItem'
    'body': 'MoveToNPCToGiveItem(${1:handle a}, ${2:handle b}) ${3:--[[Returns:void\nGive an item to another unit.\n]]}'
  'Issue a Move-To command':
    'prefix': 'MoveToPosition'
    'body': 'MoveToPosition(${1:Vector a}) ${2:--[[Returns:void\nIssue a Move-To command\n]]}'
  'Issue an Attack-Move-To command':
    'prefix': 'MoveToPositionAggressive'
    'body': 'MoveToPositionAggressive(${1:Vector a}) ${2:--[[Returns:void\nIssue an Attack-Move-To command\n]]}'
  'Move to a target to attack.':
    'prefix': 'MoveToTargetToAttack'
    'body': 'MoveToTargetToAttack(${1:handle a}) ${2:--[[Returns:void\nMove to a target to attack.\n]]}'
  'Print a message':
    'prefix': 'Msg'
    'body': 'Msg(${1:string a}) ${2:--[[Returns:void\nPrint a message\n]]}'
  'Continue an iteration over the list of entities, providing reference to a previously found entity':
    'prefix': 'Next'
    'body': 'Next(${1:handle startFrom}) ${2:--[[Returns:handle\nContinue an iteration over the list of entities, providing reference to a previously found entity\n]]}'
  'No Description Set':
    'prefix': 'NextMovePeer'
    'body': 'NextMovePeer() ${1:--[[Returns:handle\nNo Description Set\n]]}'
  'No Description Set':
    'prefix': 'NoHealthBar'
    'body': 'NoHealthBar() ${1:--[[Returns:bool\nNo Description Set\n]]}'
  'Returns the vector normalized':
    'prefix': 'Normalized'
    'body': 'Normalized() ${1:--[[Returns:Vector\nReturns the vector normalized\n]]}'
  'No Description Set':
    'prefix': 'NoTeamMoveTo'
    'body': 'NoTeamMoveTo() ${1:--[[Returns:bool\nNo Description Set\n]]}'
  'No Description Set':
    'prefix': 'NoTeamSelect'
    'body': 'NoTeamSelect() ${1:--[[Returns:bool\nNo Description Set\n]]}'
  'No Description Set':
    'prefix': 'NotOnMinimap'
    'body': 'NotOnMinimap() ${1:--[[Returns:bool\nNo Description Set\n]]}'
  'No Description Set':
    'prefix': 'NotOnMinimapForEnemies'
    'body': 'NotOnMinimapForEnemies() ${1:--[[Returns:bool\nNo Description Set\n]]}'
  'No Description Set':
    'prefix': 'NoUnitCollision'
    'body': 'NoUnitCollision() ${1:--[[Returns:bool\nNo Description Set\n]]}'
  'Returns the number of items currently dropped on the ground':
    'prefix': 'NumDroppedItems'
    'body': 'NumDroppedItems() ${1:--[[Returns:int\nReturns the number of items currently dropped on the ground\n]]}'
  'No Description Set':
    'prefix': 'NumModifiersUsingAbility'
    'body': 'NumModifiersUsingAbility() ${1:--[[Returns:int\nNo Description Set\n]]}'
  'No Description Set':
    'prefix': 'OnAbilityPhaseInterrupted'
    'body': 'OnAbilityPhaseInterrupted() ${1:--[[Returns:void\nNo Description Set\n]]}'
  'No Description Set':
    'prefix': 'OnAbilityPhaseStart'
    'body': 'OnAbilityPhaseStart() ${1:--[[Returns:bool\nNo Description Set\n]]}'
  'No Description Set':
    'prefix': 'OnAbilityPinged'
    'body': 'OnAbilityPinged() ${1:--[[Returns:void\nNo Description Set\n]]}'
  'No Description Set':
    'prefix': 'OnChannelFinish'
    'body': 'OnChannelFinish(${1:bool a}) ${2:--[[Returns:void\nNo Description Set\n]]}'
  'No Description Set':
    'prefix': 'OnChannelThink'
    'body': 'OnChannelThink(${1:float a}) ${2:--[[Returns:void\nNo Description Set\n]]}'
  'No Description Set':
    'prefix': 'OnHeroCalculateStatBonus'
    'body': 'OnHeroCalculateStatBonus() ${1:--[[Returns:void\nNo Description Set\n]]}'
  'No Description Set':
    'prefix': 'OnHeroLevelUp'
    'body': 'OnHeroLevelUp() ${1:--[[Returns:void\nNo Description Set\n]]}'
  'No Description Set':
    'prefix': 'OnInventoryContentsChanged'
    'body': 'OnInventoryContentsChanged() ${1:--[[Returns:void\nNo Description Set\n]]}'
  'No Description Set':
    'prefix': 'OnOwnerDied'
    'body': 'OnOwnerDied() ${1:--[[Returns:void\nNo Description Set\n]]}'
  'No Description Set':
    'prefix': 'OnOwnerSpawned'
    'body': 'OnOwnerSpawned() ${1:--[[Returns:void\nNo Description Set\n]]}'
  'No Description Set':
    'prefix': 'OnSpellStart'
    'body': 'OnSpellStart() ${1:--[[Returns:void\nNo Description Set\n]]}'
  'No Description Set':
    'prefix': 'OnToggle'
    'body': 'OnToggle() ${1:--[[Returns:void\nNo Description Set\n]]}'
  'No Description Set':
    'prefix': 'OnUpgrade'
    'body': 'OnUpgrade() ${1:--[[Returns:void\nNo Description Set\n]]}'
  'Takes duration, value for a temporary override':
    'prefix': 'OverrideFriction'
    'body': 'OverrideFriction(${1:float a}, ${2:float b}) ${3:--[[Returns:void\nTakes duration, value for a temporary override\n]]}'
  'No Description Set':
    'prefix': 'PassivesDisabled'
    'body': 'PassivesDisabled() ${1:--[[Returns:bool\nNo Description Set\n]]}'
  'Pause or unpause the game.':
    'prefix': 'PauseGame'
    'body': 'PauseGame(${1:bool a}) ${2:--[[Returns:void\nPause or unpause the game.\n]]}'
  'No Description Set':
    'prefix': 'PayGoldCost'
    'body': 'PayGoldCost() ${1:--[[Returns:void\nNo Description Set\n]]}'
  'No Description Set':
    'prefix': 'PayGoldCostForUpgrade'
    'body': 'PayGoldCostForUpgrade() ${1:--[[Returns:void\nNo Description Set\n]]}'
  'No Description Set':
    'prefix': 'PayManaCost'
    'body': 'PayManaCost() ${1:--[[Returns:void\nNo Description Set\n]]}'
  'Performs an attack on a target. Params: Target, bUseCastAttackOrb, bProcessProcs, bSkipCooldown, bIgnoreInvis':
    'prefix': 'PerformAttack'
    'body': 'PerformAttack(${1:handle a}, ${2:bool b}, ${3:bool c}, ${4:bool d}, ${5:bool e}) ${6:--[[Returns:void\nPerforms an attack on a target. Params: Target, bUseCastAttackOrb, bProcessProcs, bSkipCooldown, bIgnoreInvis\n]]}'
  'No Description Set':
    'prefix': 'PerformTaunt'
    'body': 'PerformTaunt() ${1:--[[Returns:void\nNo Description Set\n]]}'
  'Pick up a dropped item.':
    'prefix': 'PickupDroppedItem'
    'body': 'PickupDroppedItem(${1:handle a}) ${2:--[[Returns:void\nPick up a dropped item.\n]]}'
  'Pick up a rune.':
    'prefix': 'PickupRune'
    'body': 'PickupRune(${1:handle a}) ${2:--[[Returns:void\nPick up a rune.\n]]}'
  'Get a script instance of a player by index.':
    'prefix': 'PlayerInstanceFromIndex'
    'body': 'PlayerInstanceFromIndex(${1:int a}) ${2:--[[Returns:handle\nGet a script instance of a player by index.\n]]}'
  'No Description Set':
    'prefix': 'PlaysDefaultAnimWhenStolen'
    'body': 'PlaysDefaultAnimWhenStolen() ${1:--[[Returns:bool\nNo Description Set\n]]}'
  'Updates custom hero, unit and ability KeyValues in memory with the latest values from disk':
    'prefix': 'Playtesting_UpdateAddOnKeyValues'
    'body': 'Playtesting_UpdateAddOnKeyValues() ${1:--[[Returns:void\nUpdates custom hero, unit and ability KeyValues in memory with the latest values from disk\n]]}'
  'Pops the identifier used to group overlays. Overlays marked with this identifier can be deleted in a big batch.':
    'prefix': 'PopDebugOverlayScope'
    'body': 'PopDebugOverlayScope() ${1:--[[Returns:void\nPops the identifier used to group overlays. Overlays marked with this identifier can be deleted in a big batch.\n]]}'
  'Precache an entity from KeyValues in \'\'table\'\'':
    'prefix': 'PrecacheEntityFromTable'
    'body': 'PrecacheEntityFromTable(${1:string a}, ${2:handle b}, ${3:handle c}) ${4:--[[Returns:void\nPrecache an entity from KeyValues in \'\'table\'\'\n]]}'
  'Precache a list of entity KeyValues table\'s':
    'prefix': 'PrecacheEntityListFromTable'
    'body': 'PrecacheEntityListFromTable(${1:handle a}, ${2:handle b}) ${3:--[[Returns:void\nPrecache a list of entity KeyValues table\'s\n]]}'
  'Asynchronously precaches a DOTA item by its dota_npc_items.txt name, provides a callback when it\'s finished.':
    'prefix': 'PrecacheItemByNameAsync'
    'body': 'PrecacheItemByNameAsync(${1:string a}, ${2:handle b}) ${3:--[[Returns:void\nAsynchronously precaches a DOTA item by its dota_npc_items.txt name, provides a callback when it\'s finished.\n]]}'
  'Precaches a DOTA item by its dota_npc_items.txt name':
    'prefix': 'PrecacheItemByNameSync'
    'body': 'PrecacheItemByNameSync(${1:string a}, ${2:handle b}) ${3:--[[Returns:void\nPrecaches a DOTA item by its dota_npc_items.txt name\n]]}'
  '( modelName, context ) - Manually precache a single model':
    'prefix': 'PrecacheModel'
    'body': 'PrecacheModel(${1:string a}, ${2:handle b}) ${3:--[[Returns:void\n( modelName, context ) - Manually precache a single model\n]]}'
  'Manually precache a single resource':
    'prefix': 'PrecacheResource'
    'body': 'PrecacheResource(${1:string a}, ${2:string b}, ${3:handle c}) ${4:--[[Returns:void\nManually precache a single resource\n]]}'
  'Precache a sound for later playing.':
    'prefix': 'PrecacheScriptSound'
    'body': 'PrecacheScriptSound(${1:string a}) ${2:--[[Returns:void\nPrecache a sound for later playing.\n]]}'
  'Asynchronously precaches a DOTA unit by its dota_npc_units.txt name, provides a callback when it\'s finished.':
    'prefix': 'PrecacheUnitByNameAsync'
    'body': 'PrecacheUnitByNameAsync(${1:string a}, ${2:handle b}) ${3:--[[Returns:void\nAsynchronously precaches a DOTA unit by its dota_npc_units.txt name, provides a callback when it\'s finished.\n]]}'
  'Precaches a DOTA unit by its dota_npc_units.txt name':
    'prefix': 'PrecacheUnitByNameSync'
    'body': 'PrecacheUnitByNameSync(${1:string a}, ${2:handle b}) ${3:--[[Returns:void\nPrecaches a DOTA unit by its dota_npc_units.txt name\n]]}'
  'Print a console message with a linked console command':
    'prefix': 'PrintLinkedConsoleMessage'
    'body': 'PrintLinkedConsoleMessage(${1:string a}, ${2:string b}) ${3:--[[Returns:void\nPrint a console message with a linked console command\n]]}'
  'No Description Set':
    'prefix': 'ProcsMagicStick'
    'body': 'ProcsMagicStick() ${1:--[[Returns:bool\nNo Description Set\n]]}'
  'Makes the specified unit dodge projectiles':
    'prefix': 'ProjectileDodge'
    'body': 'ProjectileDodge(${1:handle a}) ${2:--[[Returns:void\nMakes the specified unit dodge projectiles\n]]}'
  'No Description Set':
    'prefix': 'ProvidesVision'
    'body': 'ProvidesVision() ${1:--[[Returns:bool\nNo Description Set\n]]}'
  'Pushes an identifier used to group overlays. Deletes all existing overlays using this overlay id.':
    'prefix': 'PushAndClearDebugOverlayScope'
    'body': 'PushAndClearDebugOverlayScope(${1:utlstringtoken a}) ${2:--[[Returns:void\nPushes an identifier used to group overlays. Deletes all existing overlays using this overlay id.\n]]}'
  'Pushes an identifier used to group overlays. Overlays marked with this identifier can be deleted in a big batch.':
    'prefix': 'PushDebugOverlayScope'
    'body': 'PushDebugOverlayScope(${1:utlstringtoken a}) ${2:--[[Returns:void\nPushes an identifier used to group overlays. Overlays marked with this identifier can be deleted in a big batch.\n]]}'
  'Query color data for this key':
    'prefix': 'QueryColor'
    'body': 'QueryColor(${1:utlstringtoken a}, ${2:Vector b}) ${3:--[[Returns:Vector\nQuery color data for this key\n]]}'
  'Query \'\'float\'\' data for this key':
    'prefix': 'QueryFloat'
    'body': 'QueryFloat(${1:utlstringtoken a}, ${2:float b}) ${3:--[[Returns:float\nQuery \'\'float\'\' data for this key\n]]}'
  'Query \'\'int\'\' data for this key':
    'prefix': 'QueryInt'
    'body': 'QueryInt(${1:utlstringtoken a}, ${2:int b}) ${3:--[[Returns:int\nQuery \'\'int\'\' data for this key\n]]}'
  'Query number data for this key':
    'prefix': 'QueryNumber'
    'body': 'QueryNumber(${1:utlstringtoken a}, ${2:float b}) ${3:--[[Returns:float\nQuery number data for this key\n]]}'
  'Query \'\'string\'\' data for this key':
    'prefix': 'QueryString'
    'body': 'QueryString(${1:utlstringtoken a}, ${2:string b}) ${3:--[[Returns:string\nQuery \'\'string\'\' data for this key\n]]}'
  'Query \'\'vector\'\' data for this key':
    'prefix': 'QueryVector'
    'body': 'QueryVector(${1:utlstringtoken a}, ${2:Vector b}) ${3:--[[Returns:Vector\nQuery \'\'vector\'\' data for this key\n]]}'
  'Get a random \'\'float\'\' within a range':
    'prefix': 'RandomFloat'
    'body': 'RandomFloat(${1:float a}, ${2:float b}) ${3:--[[Returns:float\nGet a random \'\'float\'\' within a range\n]]}'
  'Get a random \'\'int\'\' within a range':
    'prefix': 'RandomInt'
    'body': 'RandomInt(${1:int a}, ${2:int b}) ${3:--[[Returns:int\nGet a random \'\'int\'\' within a range\n]]}'
  'Get a random 2D \'\'vector\'\'. Argument (\'\'float\'\') is the minimum length of the returned vector.':
    'prefix': 'RandomVector'
    'body': 'RandomVector(${1:float a}) ${2:--[[Returns:Vector\nGet a random 2D \'\'vector\'\'. Argument (\'\'float\'\') is the minimum length of the returned vector.\n]]}'
  'No Description Set':
    'prefix': 'RecordLastHit'
    'body': 'RecordLastHit() ${1:--[[Returns:void\nNo Description Set\n]]}'
  'Adds an I/O connection that will call the named function on the passed entity when the specified output fires.':
    'prefix': 'RedirectOutput'
    'body': 'RedirectOutput(${1:string a}, ${2:string b}, ${3:handle c}) ${4:--[[Returns:void\nAdds an I/O connection that will call the named function on the passed entity when the specified output fires.\n]]}'
  'Remove mana from this unit, this can be used for involuntary mana loss, not for mana that is spent.':
    'prefix': 'ReduceMana'
    'body': 'ReduceMana(${1:float a}) ${2:--[[Returns:void\nRemove mana from this unit, this can be used for involuntary mana loss, not for mana that is spent.\n]]}'
  'No Description Set':
    'prefix': 'RefCountsModifiers'
    'body': 'RefCountsModifiers() ${1:--[[Returns:bool\nNo Description Set\n]]}'
  'No Description Set':
    'prefix': 'RefundManaCost'
    'body': 'RefundManaCost() ${1:--[[Returns:void\nNo Description Set\n]]}'
  'RegisterCommand(name, fn, helpString, flags) : register a console command.':
    'prefix': 'RegisterCommand'
    'body': 'RegisterCommand(${1:string variableName}, ${2:handle function}, ${3:string helpText}, ${4:int flags}) ${5:--[[Returns:void\nRegisterCommand(name, fn, helpString, flags) : register a console command.\n]]}'
  'RegisterConvar(name, defaultValue, helpString, flags): register a new console variable.':
    'prefix': 'RegisterConvar'
    'body': 'RegisterConvar(${1:string name}, ${2:string defaultValue}, ${3:string helpText}, ${4:int flags}) ${5:--[[Returns:void\nRegisterConvar(name, defaultValue, helpString, flags): register a new console variable.\n]]}'
  'Create a C proxy for a script-based spawn group filter':
    'prefix': 'RegisterSpawnGroupFilterProxy'
    'body': 'RegisterSpawnGroupFilterProxy(${1:string a}) ${2:--[[Returns:void\nCreate a C proxy for a script-based spawn group filter\n]]}'
  ' ':
    'prefix': 'RegrowAllTrees'
    'body': 'RegrowAllTrees() ${1:--[[Returns:void\n \n]]}'
  'Frees the specified particle index':
    'prefix': 'ReleaseParticleIndex'
    'body': 'ReleaseParticleIndex(${1:int particleId}) ${2:--[[Returns:void\nFrees the specified particle index\n]]}'
  'Reloads the MotD file':
    'prefix': 'ReloadMOTD'
    'body': 'ReloadMOTD() ${1:--[[Returns:void\nReloads the MotD file\n]]}'
  'Remove an ability from this unit by name.':
    'prefix': 'RemoveAbility'
    'body': 'RemoveAbility(${1:string a}) ${2:--[[Returns:void\nRemove an ability from this unit by name.\n]]}'
  'Removes all overlays marked with a specific identifier, regardless of their lifetime.':
    'prefix': 'RemoveAllInScope'
    'body': 'RemoveAllInScope(${1:utlstringtoken a}) ${2:--[[Returns:void\nRemoves all overlays marked with a specific identifier, regardless of their lifetime.\n]]}'
  'Removes a team (by index) from the broadcast list':
    'prefix': 'RemoveBroadcastTeamTarget'
    'body': 'RemoveBroadcastTeamTarget(${1:int a}) ${2:--[[Returns:void\nRemoves a team (by index) from the broadcast list\n]]}'
  'Removes the passed item from this unit\'s inventory.':
    'prefix': 'RemoveItem'
    'body': 'RemoveItem(${1:handle a}) ${2:--[[Returns:void\nRemoves the passed item from this unit\'s inventory.\n]]}'
  'Removes a modifier':
    'prefix': 'RemoveModifierByName'
    'body': 'RemoveModifierByName(${1:string a}) ${2:--[[Returns:void\nRemoves a modifier\n]]}'
  'Removes a modifier that was cast by the given caster':
    'prefix': 'RemoveModifierByNameAndCaster'
    'body': 'RemoveModifierByNameAndCaster(${1:string a}, ${2:handle b}) ${3:--[[Returns:void\nRemoves a modifier that was cast by the given caster\n]]}'
  'Remove the no draw flag.':
    'prefix': 'RemoveNoDraw'
    'body': 'RemoveNoDraw() ${1:--[[Returns:void\nRemove the no draw flag.\n]]}'
  'Delete this entity':
    'prefix': 'RemoveSelf'
    'body': 'RemoveSelf() ${1:--[[Returns:void\nDelete this entity\n]]}'
  'Remove the C proxy for a script-based spawn group filter':
    'prefix': 'RemoveSpawnGroupFilterProxy'
    'body': 'RemoveSpawnGroupFilterProxy(${1:string a}) ${2:--[[Returns:void\nRemove the C proxy for a script-based spawn group filter\n]]}'
  'Remove a subquest from this quest':
    'prefix': 'RemoveSubquest'
    'body': 'RemoveSubquest(${1:handle a}) ${2:--[[Returns:void\nRemove a subquest from this quest\n]]}'
  '(playerID, heroClassName, gold, XP) - replaces the player\'s hero with a new one of the specified class, gold and XP':
    'prefix': 'ReplaceHeroWith'
    'body': 'ReplaceHeroWith(${1:int a}, ${2:string b}, ${3:int c}, ${4:int d}) ${5:--[[Returns:handle\n(playerID, heroClassName, gold, XP) - replaces the player\'s hero with a new one of the specified class, gold and XP\n]]}'
  'No Description Set':
    'prefix': 'ResetBuybackCostTime'
    'body': 'ResetBuybackCostTime(${1:int a}) ${2:--[[Returns:void\nNo Description Set\n]]}'
  'Restart after killing the ancient, etc.':
    'prefix': 'ResetDefeated'
    'body': 'ResetDefeated() ${1:--[[Returns:void\nRestart after killing the ancient, etc.\n]]}'
  'No Description Set':
    'prefix': 'ResetToggleOnRespawn'
    'body': 'ResetToggleOnRespawn() ${1:--[[Returns:bool\nNo Description Set\n]]}'
  'Restart the game at hero selection':
    'prefix': 'ResetToHeroSelection'
    'body': 'ResetToHeroSelection() ${1:--[[Returns:void\nRestart the game at hero selection\n]]}'
  'No Description Set':
    'prefix': 'ResetTotalEarnedGold'
    'body': 'ResetTotalEarnedGold(${1:int a}) ${2:--[[Returns:void\nNo Description Set\n]]}'
  'No Description Set':
    'prefix': 'RespawnHero'
    'body': 'RespawnHero(${1:bool buyback}, ${2:bool unknown1}, ${3:bool unknown2}) ${4:--[[Returns:void\nNo Description Set\n]]}'
  'Respawns the target unit if it can be respawned.':
    'prefix': 'RespawnUnit'
    'body': 'RespawnUnit() ${1:--[[Returns:void\nRespawns the target unit if it can be respawned.\n]]}'
  'Rolls a number from 1 to 100 and returns true if the roll is less than or equal to the number specified':
    'prefix': 'RollPercentage'
    'body': 'RollPercentage(${1:int a}) ${2:--[[Returns:bool\nRolls a number from 1 to 100 and returns true if the roll is less than or equal to the number specified\n]]}'
  'Rotate a \'\'QAngle\'\' by another \'\'QAngle\'\'.':
    'prefix': 'RotateOrientation'
    'body': 'RotateOrientation(${1:QAngle a}, ${2:QAngle b}) ${3:--[[Returns:QAngle\nRotate a \'\'QAngle\'\' by another \'\'QAngle\'\'.\n]]}'
  'Rotate a \'\'Vector\'\' around a point.':
    'prefix': 'RotatePosition'
    'body': 'RotatePosition(${1:Vector a}, ${2:QAngle b}, ${3:Vector c}) ${4:--[[Returns:Vector\nRotate a \'\'Vector\'\' around a point.\n]]}'
  'Rotates a quaternion by the specified angle around the specified \'\'vector\'\' axis':
    'prefix': 'RotateQuaternionByAxisAngle'
    'body': 'RotateQuaternionByAxisAngle(${1:Quaternion a}, ${2:Vector b}, ${3:float c}) ${4:--[[Returns:Quaternion\nRotates a quaternion by the specified angle around the specified \'\'vector\'\' axis\n]]}'
  'Find the delta between two \'\'QAngle\'\'s.':
    'prefix': 'RotationDelta'
    'body': 'RotationDelta(${1:QAngle a}, ${2:QAngle b}) ${3:--[[Returns:QAngle\nFind the delta between two \'\'QAngle\'\'s.\n]]}'
  'Add a rule to the decision database.':
    'prefix': 'rr_AddDecisionRule'
    'body': 'rr_AddDecisionRule(${1:handle a}) ${2:--[[Returns:bool\nAdd a rule to the decision database.\n]]}'
  'Commit the result of QueryBestResponse back to the given entity to play. Call with params (entity, airesponse)':
    'prefix': 'rr_CommitAIResponse'
    'body': 'rr_CommitAIResponse(${1:handle a}, ${2:handle b}) ${3:--[[Returns:bool\nCommit the result of QueryBestResponse back to the given entity to play. Call with params (entity, airesponse)\n]]}'
  'Retrieve a \'\'table\'\' of all available expresser targets, in the form { name : \'\'handle\'\', name: \'\'handle\'\' }.':
    'prefix': 'rr_GetResponseTargets'
    'body': 'rr_GetResponseTargets() ${1:--[[Returns:handle\nRetrieve a \'\'table\'\' of all available expresser targets, in the form { name : \'\'handle\'\', name: \'\'handle\'\' }.\n]]}'
  'Params: ( hEnt, hQuery, hResult ) // Static : tests \'query\' against entity\'s response system and returns the best response found (or \'\'nil\'\' if none found).':
    'prefix': 'rr_QueryBestResponse'
    'body': 'rr_QueryBestResponse(${1:handle a}, ${2:handle b}, ${3:handle c}) ${4:--[[Returns:bool\nParams: ( hEnt, hQuery, hResult ) // Static : tests \'query\' against entity\'s response system and returns the best response found (or \'\'nil\'\' if none found).\n]]}'
  'Have Entity say \'\'string\'\', and teamOnly or not':
    'prefix': 'Say'
    'body': 'Say(${1:handle entity}, ${2:string message}, ${3:bool teamOnly}) ${4:--[[Returns:void\nHave Entity say \'\'string\'\', and teamOnly or not\n]]}'
  'Start a screenshake with the following parameters. vecCenter, flAmplitude, flFrequency, flDuration, flRadius, eCommand( SHAKE_START = 0, SHAKE_STOP = 1 ), bAirShake':
    'prefix': 'ScreenShake'
    'body': 'ScreenShake(${1:Vector a}, ${2:float b}, ${3:float c}, ${4:float d}, ${5:float e}, ${6:int f}, ${7:bool g}) ${8:--[[Returns:void\nStart a screenshake with the following parameters. vecCenter, flAmplitude, flFrequency, flDuration, flRadius, eCommand( SHAKE_START = 0, SHAKE_STOP = 1 ), bAirShake\n]]}'
  'Get the named attachment id':
    'prefix': 'ScriptLookupAttachment'
    'body': 'ScriptLookupAttachment(${1:string a}) ${2:--[[Returns:int\nGet the named attachment id\n]]}'
  'Sells the passed item in this unit\'s inventory.':
    'prefix': 'SellItem'
    'body': 'SellItem(${1:handle a}) ${2:--[[Returns:void\nSells the passed item in this unit\'s inventory.\n]]}'
  'Displays a line of text in the left textbox (where usually deaths/denies/buysbacks are announced). This function takes restricted HTML as input! (<br>,<u>,<font>)':
    'prefix': 'SendCustomMessage'
    'body': 'SendCustomMessage(${1:string message}, ${2:int teamID}, ${3:int unknown(1?)}) ${4:--[[Returns:void\nDisplays a line of text in the left textbox (where usually deaths/denies/buysbacks are announced). This function takes restricted HTML as input! (&lt;br&gt;,&lt;u&gt;,&lt;font&gt;)\n]]}'
  'No Description Set':
    'prefix': 'SendFrostivusTimeElapsedToGC'
    'body': 'SendFrostivusTimeElapsedToGC() ${1:--[[Returns:void\nNo Description Set\n]]}'
  'No Description Set':
    'prefix': 'SendFrostyPointsMessageToGC'
    'body': 'SendFrostyPointsMessageToGC(${1:handle a}) ${2:--[[Returns:void\nNo Description Set\n]]}'
  'Send a \'\'string\'\' to the console as a client command':
    'prefix': 'SendToConsole'
    'body': 'SendToConsole(${1:string a}) ${2:--[[Returns:void\nSend a \'\'string\'\' to the console as a client command\n]]}'
  'Send a \'\'string\'\' to the console as a server command':
    'prefix': 'SendToServerConsole'
    'body': 'SendToServerConsole(${1:string a}) ${2:--[[Returns:void\nSend a \'\'string\'\' to the console as a server command\n]]}'
  'Returns the duration in seconds of the specified sequence':
    'prefix': 'SequenceDuration'
    'body': 'SequenceDuration(${1:string a}) ${2:--[[Returns:float\nReturns the duration in seconds of the specified sequence\n]]}'
  'No Description Set':
    'prefix': 'SetAbilityIndex'
    'body': 'SetAbilityIndex(${1:int a}) ${2:--[[Returns:void\nNo Description Set\n]]}'
  'Sets the current unspent ability point\'s.':
    'prefix': 'SetAbilityPoints'
    'body': 'SetAbilityPoints(${1:int a}) ${2:--[[Returns:void\nSets the current unspent ability point\'s.\n]]}'
  'SetAbsOrigin':
    'prefix': 'SetAbsOrigin'
    'body': 'SetAbsOrigin(${1:Vector origin}) ${2:--[[Returns:void\nSetAbsOrigin\n]]}'
  'No Description Set':
    'prefix': 'SetActivated'
    'body': 'SetActivated(${1:bool a}) ${2:--[[Returns:void\nNo Description Set\n]]}'
  'Combat involving this creature will have this weight added to the music calcuations':
    'prefix': 'SetAdditionalBattleMusicWeight'
    'body': 'SetAdditionalBattleMusicWeight(${1:float a}) ${2:--[[Returns:void\nCombat involving this creature will have this weight added to the music calcuations\n]]}'
  'Show the player hero\'s inventory in the HUD, regardless of what unit is selected.':
    'prefix': 'SetAlwaysShowPlayerInventory'
    'body': 'SetAlwaysShowPlayerInventory(${1:bool a}) ${2:--[[Returns:void\nShow the player hero\'s inventory in the HUD, regardless of what unit is selected.\n]]}'
  'Set entity pitch, yaw, roll':
    'prefix': 'SetAngles'
    'body': 'SetAngles(${1:float pitch}, ${2:float yaw}, ${3:float roll}) ${4:--[[Returns:void\nSet entity pitch, yaw, roll\n]]}'
  'No Description Set':
    'prefix': 'SetAngularVelocity'
    'body': 'SetAngularVelocity(${1:Vector a}) ${2:--[[Returns:void\nNo Description Set\n]]}'
  'Pass \'\'string\'\' for the animation to play on this model':
    'prefix': 'SetAnimation'
    'body': 'SetAnimation(${1:string a}) ${2:--[[Returns:void\nPass \'\'string\'\' for the animation to play on this model\n]]}'
  'Set the armor gained per level on this creature.':
    'prefix': 'SetArmorGain'
    'body': 'SetArmorGain(${1:float a}) ${2:--[[Returns:void\nSet the armor gained per level on this creature.\n]]}'
  'No Description Set':
    'prefix': 'SetAttackCapability'
    'body': 'SetAttackCapability(${1:int a}) ${2:--[[Returns:void\nNo Description Set\n]]}'
  'No Description Set':
    'prefix': 'SetAttacking'
    'body': 'SetAttacking(${1:handle a}) ${2:--[[Returns:void\nNo Description Set\n]]}'
  'Set the attack time gained per level on this creature.':
    'prefix': 'SetAttackTimeGain'
    'body': 'SetAttackTimeGain(${1:float a}) ${2:--[[Returns:void\nSet the attack time gained per level on this creature.\n]]}'
  'No Description Set':
    'prefix': 'SetBaseAgility'
    'body': 'SetBaseAgility(${1:float a}) ${2:--[[Returns:void\nNo Description Set\n]]}'
  'No Description Set':
    'prefix': 'SetBaseAttackTime'
    'body': 'SetBaseAttackTime(${1:float a}) ${2:--[[Returns:void\nNo Description Set\n]]}'
  'Sets the minimum base damage.':
    'prefix': 'SetBaseDamageMax'
    'body': 'SetBaseDamageMax(${1:int a}) ${2:--[[Returns:void\nSets the minimum base damage.\n]]}'
  'Sets the minimum base damage.':
    'prefix': 'SetBaseDamageMin'
    'body': 'SetBaseDamageMin(${1:int a}) ${2:--[[Returns:void\nSets the minimum base damage.\n]]}'
  'No Description Set':
    'prefix': 'SetBaseHealthRegen'
    'body': 'SetBaseHealthRegen(${1:float a}) ${2:--[[Returns:void\nNo Description Set\n]]}'
  'No Description Set':
    'prefix': 'SetBaseIntellect'
    'body': 'SetBaseIntellect(${1:float a}) ${2:--[[Returns:void\nNo Description Set\n]]}'
  'Sets base magical armor value.':
    'prefix': 'SetBaseMagicalResistanceValue'
    'body': 'SetBaseMagicalResistanceValue(${1:float a}) ${2:--[[Returns:void\nSets base magical armor value.\n]]}'
  'No Description Set':
    'prefix': 'SetBaseManaRegen'
    'body': 'SetBaseManaRegen(${1:float a}) ${2:--[[Returns:void\nNo Description Set\n]]}'
  'Set a new base max health value.':
    'prefix': 'SetBaseMaxHealth'
    'body': 'SetBaseMaxHealth(${1:float a}) ${2:--[[Returns:void\nSet a new base max health value.\n]]}'
  'No Description Set':
    'prefix': 'SetBaseMoveSpeed'
    'body': 'SetBaseMoveSpeed(${1:int a}) ${2:--[[Returns:void\nNo Description Set\n]]}'
  'No Description Set':
    'prefix': 'SetBaseStrength'
    'body': 'SetBaseStrength(${1:float a}) ${2:--[[Returns:void\nNo Description Set\n]]}'
  '( bShouldBlock ) - Set the blocking state of this unit.':
    'prefix': 'SetBlocking'
    'body': 'SetBlocking(${1:bool a}) ${2:--[[Returns:void\n( bShouldBlock ) - Set the blocking state of this unit.\n]]}'
  'Sets bloom scale for this tonemap controller':
    'prefix': 'SetBloomScale'
    'body': 'SetBloomScale(${1:float a}) ${2:--[[Returns:void\nSets bloom scale for this tonemap controller\n]]}'
  'Sets a bodygroup':
    'prefix': 'SetBodygroup'
    'body': 'SetBodygroup(${1:int a}, ${2:int b}) ${3:--[[Returns:void\nSets a bodygroup\n]]}'
  'SetBool(name, val) : sets the value of the convar to the \'\'bool\'\'.':
    'prefix': 'SetBool'
    'body': 'SetBool(${1:string variableName}, ${2:bool value}) ${3:--[[Returns:void\nSetBool(name, val) : sets the value of the convar to the \'\'bool\'\'.\n]]}'
  'Enables/Disables bot thinking. Requires a very Dota PvP-like map with 3 lanes, a shop, etc.':
    'prefix': 'SetBotThinkingEnabled'
    'body': 'SetBotThinkingEnabled(${1:bool a}) ${2:--[[Returns:void\nEnables/Disables bot thinking. Requires a very Dota PvP-like map with 3 lanes, a shop, etc.\n]]}'
  'Set the bounty gold gained per level on this creature.':
    'prefix': 'SetBountyGain'
    'body': 'SetBountyGain(${1:int a}) ${2:--[[Returns:void\nSet the bounty gold gained per level on this creature.\n]]}'
  'Sets the buyback cooldown time.':
    'prefix': 'SetBuybackCooldownTime'
    'body': 'SetBuybackCooldownTime(${1:float a}) ${2:--[[Returns:void\nSets the buyback cooldown time.\n]]}'
  'No Description Set':
    'prefix': 'SetBuyBackDisabledByReapersScythe'
    'body': 'SetBuyBackDisabledByReapersScythe(${1:bool a}) ${2:--[[Returns:void\nNo Description Set\n]]}'
  'Enables or disables buyback completely':
    'prefix': 'SetBuybackEnabled'
    'body': 'SetBuybackEnabled(${1:bool a}) ${2:--[[Returns:void\nEnables or disables buyback completely\n]]}'
  'Set the amount of time gold gain is limited after buying back.':
    'prefix': 'SetBuybackGoldLimitTime'
    'body': 'SetBuybackGoldLimitTime(${1:float a}) ${2:--[[Returns:void\nSet the amount of time gold gain is limited after buying back.\n]]}'
  'Set a different camera distance; dota default is 1134.':
    'prefix': 'SetCameraDistanceOverride'
    'body': 'SetCameraDistanceOverride(${1:float a}) ${2:--[[Returns:void\nSet a different camera distance; dota default is 1134.\n]]}'
  '(playerID, entity) - force the given player\'s camera to follow the given entity':
    'prefix': 'SetCameraTarget'
    'body': 'SetCameraTarget(${1:int a}, ${2:handle b}) ${3:--[[Returns:void\n(playerID, entity) - force the given player\'s camera to follow the given entity\n]]}'
  'Flag this unit as a champion creature.':
    'prefix': 'SetChampion'
    'body': 'SetChampion(${1:bool a}) ${2:--[[Returns:void\nFlag this unit as a champion creature.\n]]}'
  'No Description Set':
    'prefix': 'SetChanneling'
    'body': 'SetChanneling(${1:bool a}) ${2:--[[Returns:void\nNo Description Set\n]]}'
  'Set the contained item.':
    'prefix': 'SetContainedItem'
    'body': 'SetContainedItem(${1:handle a}) ${2:--[[Returns:void\nSet the contained item.\n]]}'
  'SetContext( name , value, duration ): store any key/value pair in this entity\'s dialog contexts. Value must be a \'\'string\'\'. Will last for duration (set 0 to mean \'forever\').':
    'prefix': 'SetContext'
    'body': 'SetContext(${1:string a}, ${2:string b}, ${3:float c}) ${4:--[[Returns:void\nSetContext( name , value, duration ): store any key/value pair in this entity\'s dialog contexts. Value must be a \'\'string\'\'. Will last for duration (set 0 to mean \'forever\').\n]]}'
  'SetContext( name , value, duration ): store any key/value pair in this entity\'s dialog contexts. Value must be a number (\'\'int\'\' or \'\'float\'\'). Will last for duration (set 0 to mean \'forever\').':
    'prefix': 'SetContextNum'
    'body': 'SetContextNum(${1:string a}, ${2:float b}, ${3:float c}) ${4:--[[Returns:void\nSetContext( name , value, duration ): store any key/value pair in this entity\'s dialog contexts. Value must be a number (\'\'int\'\' or \'\'float\'\'). Will last for duration (set 0 to mean \'forever\').\n]]}'
  'Set a think function on this entity.':
    'prefix': 'SetContextThink'
    'body': 'SetContextThink(${1:string a}, ${2:handle b}, ${3:float c}) ${4:--[[Returns:void\nSet a think function on this entity.\n]]}'
  'Set this unit controllable by the player with the passed ID.':
    'prefix': 'SetControllableByPlayer'
    'body': 'SetControllableByPlayer(${1:int a}, ${2:bool b}) ${3:--[[Returns:void\nSet this unit controllable by the player with the passed ID.\n]]}'
  'Scale the creep icons on the minimap.':
    'prefix': 'SetCreepMinimapIconScale'
    'body': 'SetCreepMinimapIconScale(${1:float scale}) ${2:--[[Returns:void\nScale the creep icons on the minimap.\n]]}'
  'Set the number of charges on this item':
    'prefix': 'SetCurrentCharges'
    'body': 'SetCurrentCharges(${1:int a}) ${2:--[[Returns:void\nSet the number of charges on this item\n]]}'
  'No Description Set':
    'prefix': 'SetCursorCastTarget'
    'body': 'SetCursorCastTarget(${1:handle a}) ${2:--[[Returns:void\nNo Description Set\n]]}'
  'No Description Set':
    'prefix': 'SetCursorPosition'
    'body': 'SetCursorPosition(${1:Vector a}) ${2:--[[Returns:void\nNo Description Set\n]]}'
  'No Description Set':
    'prefix': 'SetCursorTargetingNothing'
    'body': 'SetCursorTargetingNothing(${1:bool a}) ${2:--[[Returns:void\nNo Description Set\n]]}'
  'Set the buyback cooldown for this player.':
    'prefix': 'SetCustomBuybackCooldown'
    'body': 'SetCustomBuybackCooldown(${1:int a}, ${2:float b}) ${3:--[[Returns:void\nSet the buyback cooldown for this player.\n]]}'
  'Turns on capability to define custom buyback cooldowns.':
    'prefix': 'SetCustomBuybackCooldownEnabled'
    'body': 'SetCustomBuybackCooldownEnabled(${1:bool a}) ${2:--[[Returns:void\nTurns on capability to define custom buyback cooldowns.\n]]}'
  'Set the buyback cost for this player.':
    'prefix': 'SetCustomBuybackCost'
    'body': 'SetCustomBuybackCost(${1:int a}, ${2:int b}) ${3:--[[Returns:void\nSet the buyback cost for this player.\n]]}'
  'Turns on capability to define custom buyback costs.':
    'prefix': 'SetCustomBuybackCostEnabled'
    'body': 'SetCustomBuybackCostEnabled(${1:bool a}) ${2:--[[Returns:void\nTurns on capability to define custom buyback costs.\n]]}'
  'Sets a custom experience value for this hero. {{tip|GameRules boolean must be set for this to work!}}':
    'prefix': 'SetCustomDeathXP'
    'body': 'SetCustomDeathXP(${1:int a}) ${2:--[[Returns:void\nSets a custom experience value for this hero. {{tip|GameRules boolean must be set for this to work!}}\n]]}'
  'Set the difficulty level of the custom game mode':
    'prefix': 'SetCustomGameDifficulty'
    'body': 'SetCustomGameDifficulty(${1:int a}) ${2:--[[Returns:void\nSet the difficulty level of the custom game mode\n]]}'
  'Allows definition of the max level heroes can achieve (default is 25).':
    'prefix': 'SetCustomHeroMaxLevel'
    'body': 'SetCustomHeroMaxLevel(${1:int maxLevel}) ${2:--[[Returns:void\nAllows definition of the max level heroes can achieve (default is 25).\n]]}'
  'Allows definition of a \'\'table\'\' of hero XP values.':
    'prefix': 'SetCustomXPRequiredToReachNextLevel'
    'body': 'SetCustomXPRequiredToReachNextLevel(${1:handle a}) ${2:--[[Returns:void\nAllows definition of a \'\'table\'\' of hero XP values.\n]]}'
  'Set the damage gained per level on this creature.':
    'prefix': 'SetDamageGain'
    'body': 'SetDamageGain(${1:int a}) ${2:--[[Returns:void\nSet the damage gained per level on this creature.\n]]}'
  'Set the base vision range.':
    'prefix': 'SetDayTimeVisionRange'
    'body': 'SetDayTimeVisionRange(${1:int a}) ${2:--[[Returns:void\nSet the base vision range.\n]]}'
  'Set the XP bounty on this unit':
    'prefix': 'SetDeathXP'
    'body': 'SetDeathXP(${1:int a}) ${2:--[[Returns:void\nSet the XP bounty on this unit\n]]}'
  'Set the disable resistance gained per level on this creature.':
    'prefix': 'SetDisableResistanceGain'
    'body': 'SetDisableResistanceGain(${1:float a}) ${2:--[[Returns:void\nSet the disable resistance gained per level on this creature.\n]]}'
  'Set light maximum range':
    'prefix': 'SetFarRange'
    'body': 'SetFarRange(${1:float a}) ${2:--[[Returns:void\nSet light maximum range\n]]}'
  'Sets whether First Blood has been triggered.':
    'prefix': 'SetFirstBloodActive'
    'body': 'SetFirstBloodActive(${1:bool a}) ${2:--[[Returns:void\nSets whether First Blood has been triggered.\n]]}'
  'SetFloat(name, val) : sets the value of the convar to the \'\'float\'\'.':
    'prefix': 'SetFloat'
    'body': 'SetFloat(${1:string variableName}, ${2:float value}) ${3:--[[Returns:void\nSetFloat(name, val) : sets the value of the convar to the \'\'float\'\'.\n]]}'
  'Turn the fog of war on or off.':
    'prefix': 'SetFogOfWarDisabled'
    'body': 'SetFogOfWarDisabled(${1:bool a}) ${2:--[[Returns:void\nTurn the fog of war on or off.\n]]}'
  'No Description Set':
    'prefix': 'SetForceAttackTarget'
    'body': 'SetForceAttackTarget(${1:handle a}) ${2:--[[Returns:void\nNo Description Set\n]]}'
  'Set the orientation of the entity to have this forward \'\'forwardVec\'\'':
    'prefix': 'SetForwardVector'
    'body': 'SetForwardVector(${1:Vector forwardVec}) ${2:--[[Returns:void\nSet the orientation of the entity to have this forward \'\'forwardVec\'\'\n]]}'
  'Set PLAYER friction, ignored for objects':
    'prefix': 'SetFriction'
    'body': 'SetFriction(${1:float a}) ${2:--[[Returns:void\nSet PLAYER friction, ignored for objects\n]]}'
  'Makes ths specified team win':
    'prefix': 'SetGameWinner'
    'body': 'SetGameWinner(${1:int team}) ${2:--[[Returns:void\nMakes ths specified team win\n]]}'
  'Sets the gold amount for the player owning this hero':
    'prefix': 'SetGold'
    'body': 'SetGold(${1:int a}, ${2:bool b}) ${3:--[[Returns:void\nSets the gold amount for the player owning this hero\n]]}'
  'Set the auto gold increase per timed interval.':
    'prefix': 'SetGoldPerTick'
    'body': 'SetGoldPerTick(${1:int a}) ${2:--[[Returns:void\nSet the auto gold increase per timed interval.\n]]}'
  'Turn the sound when gold is acquired off/on. Takes a \'\'bool\'\'.':
    'prefix': 'SetGoldSoundDisabled'
    'body': 'SetGoldSoundDisabled(${1:bool a}) ${2:--[[Returns:void\nTurn the sound when gold is acquired off/on. Takes a \'\'bool\'\'.\n]]}'
  'Set the time \'\'int\'\'erval between auto gold increases.':
    'prefix': 'SetGoldTickTime'
    'body': 'SetGoldTickTime(${1:float a}) ${2:--[[Returns:void\nSet the time \'\'int\'\'erval between auto gold increases.\n]]}'
  'Set PLAYER gravity, ignored for objects':
    'prefix': 'SetGravity'
    'body': 'SetGravity(${1:float a}) ${2:--[[Returns:void\nSet PLAYER gravity, ignored for objects\n]]}'
  'No Description Set':
    'prefix': 'SetHasInventory'
    'body': 'SetHasInventory(${1:bool a}) ${2:--[[Returns:void\nNo Description Set\n]]}'
  'No Description Set':
    'prefix': 'SetHasRandomed'
    'body': 'SetHasRandomed(${1:int playerID}) ${2:--[[Returns:void\nNo Description Set\n]]}'
  'No Description Set':
    'prefix': 'SetHasRepicked'
    'body': 'SetHasRepicked(${1:int playerID}) ${2:--[[Returns:void\nNo Description Set\n]]}'
  'No Description Set':
    'prefix': 'SetHealth'
    'body': 'SetHealth(${1:int hp}) ${2:--[[Returns:void\nNo Description Set\n]]}'
  '(nMinimapHeroIconSize) - Set the hero minimap icon size.':
    'prefix': 'SetHeroMinimapIconSize'
    'body': 'SetHeroMinimapIconSize(${1:int iconSize}) ${2:--[[Returns:void\n(nMinimapHeroIconSize) - Set the hero minimap icon size.\n]]}'
  'Control if the normal DOTA hero respawn rules apply.':
    'prefix': 'SetHeroRespawnEnabled'
    'body': 'SetHeroRespawnEnabled(${1:bool canRespawn}) ${2:--[[Returns:void\nControl if the normal DOTA hero respawn rules apply.\n]]}'
  'Sets the amount of time players have to pick their hero.':
    'prefix': 'SetHeroSelectionTime'
    'body': 'SetHeroSelectionTime(${1:float time}) ${2:--[[Returns:void\nSets the amount of time players have to pick their hero.\n]]}'
  'No Description Set':
    'prefix': 'SetHidden'
    'body': 'SetHidden(${1:bool a}) ${2:--[[Returns:void\nNo Description Set\n]]}'
  'Set the hit point\'s gained per level on this creature.':
    'prefix': 'SetHPGain'
    'body': 'SetHPGain(${1:int a}) ${2:--[[Returns:void\nSet the hit point\'s gained per level on this creature.\n]]}'
  'Set the hit point\'s regen gained per level on this creature.':
    'prefix': 'SetHPRegenGain'
    'body': 'SetHPRegenGain(${1:float a}) ${2:--[[Returns:void\nSet the hit point\'s regen gained per level on this creature.\n]]}'
  'Set the collision hull radius of this NPC':
    'prefix': 'SetHullRadius'
    'body': 'SetHullRadius(${1:float a}) ${2:--[[Returns:void\nSet the collision hull radius of this NPC\n]]}'
  'No Description Set':
    'prefix': 'SetIdleAcquire'
    'body': 'SetIdleAcquire(${1:bool a}) ${2:--[[Returns:void\nNo Description Set\n]]}'
  'No Description Set':
    'prefix': 'SetInAbilityPhase'
    'body': 'SetInAbilityPhase(${1:bool a}) ${2:--[[Returns:void\nNo Description Set\n]]}'
  'Sets the initial waypoint goal for this NPC':
    'prefix': 'SetInitialGoalEntity'
    'body': 'SetInitialGoalEntity(${1:handle a}) ${2:--[[Returns:void\nSets the initial waypoint goal for this NPC\n]]}'
  'SetInt(name, val) : sets the value of the convar to the \'\'int\'\'.':
    'prefix': 'SetInt'
    'body': 'SetInt(${1:string a}, ${2:int b}) ${3:--[[Returns:void\nSetInt(name, val) : sets the value of the convar to the \'\'int\'\'.\n]]}'
  'Set Integer Attribute':
    'prefix': 'SetIntAttr'
    'body': 'SetIntAttr(${1:string a}, ${2:int b}) ${3:--[[Returns:void\nSet Integer Attribute\n]]}'
  'Set the invulnerability counter of this building.':
    'prefix': 'SetInvulnCount'
    'body': 'SetInvulnCount(${1:int a}) ${2:--[[Returns:void\nSet the invulnerability counter of this building.\n]]}'
  'Set the kill cam unit for this hero.':
    'prefix': 'SetKillCamUnit'
    'body': 'SetKillCamUnit(${1:handle a}) ${2:--[[Returns:void\nSet the kill cam unit for this hero.\n]]}'
  'No Description Set':
    'prefix': 'SetLastBuybackTime'
    'body': 'SetLastBuybackTime(${1:int a}, ${2:int b}) ${3:--[[Returns:void\nNo Description Set\n]]}'
  'Sets the level of this ability.':
    'prefix': 'SetLevel'
    'body': 'SetLevel(${1:int a}) ${2:--[[Returns:void\nSets the level of this ability.\n]]}'
  'Set light linear attenuation value':
    'prefix': 'SetLinearAttenuation'
    'body': 'SetLinearAttenuation(${1:float a}) ${2:--[[Returns:void\nSet light linear attenuation value\n]]}'
  'Set the magic resistance gained per level on this creature.':
    'prefix': 'SetMagicResistanceGain'
    'body': 'SetMagicResistanceGain(${1:float a}) ${2:--[[Returns:void\nSet the magic resistance gained per level on this creature.\n]]}'
  'Set the mana on this unit.':
    'prefix': 'SetMana'
    'body': 'SetMana(${1:float a}) ${2:--[[Returns:void\nSet the mana on this unit.\n]]}'
  'Set the mana point\'s gained per level on this creature.':
    'prefix': 'SetManaGain'
    'body': 'SetManaGain(${1:int a}) ${2:--[[Returns:void\nSet the mana point\'s gained per level on this creature.\n]]}'
  'Set the mana point\'s regen gained per level on this creature.':
    'prefix': 'SetManaRegenGain'
    'body': 'SetManaRegenGain(${1:float a}) ${2:--[[Returns:void\nSet the mana point\'s regen gained per level on this creature.\n]]}'
  'No Description Set':
    'prefix': 'SetMaterialGroup'
    'body': 'SetMaterialGroup(${1:utlstringtoken a}) ${2:--[[Returns:void\nNo Description Set\n]]}'
  'Sets max exposure for this tonemap controller':
    'prefix': 'SetMaxExposure'
    'body': 'SetMaxExposure(${1:float a}) ${2:--[[Returns:void\nSets max exposure for this tonemap controller\n]]}'
  'No Description Set':
    'prefix': 'SetMaxHealth'
    'body': 'SetMaxHealth(${1:int maxHP}) ${2:--[[Returns:void\nNo Description Set\n]]}'
  'Set the maximum gold bounty for this unit.':
    'prefix': 'SetMaximumGoldBounty'
    'body': 'SetMaximumGoldBounty(${1:int a}) ${2:--[[Returns:void\nSet the maximum gold bounty for this unit.\n]]}'
  '( flMaxSpeed ) - sets unit\'s max speed':
    'prefix': 'SetMaxSpeed'
    'body': 'SetMaxSpeed(${1:float a}) ${2:--[[Returns:void\n( flMaxSpeed ) - sets unit\'s max speed\n]]}'
  'Sets min exposure for this tonemap controller':
    'prefix': 'SetMinExposure'
    'body': 'SetMinExposure(${1:float a}) ${2:--[[Returns:void\nSets min exposure for this tonemap controller\n]]}'
  'Set the minimum gold bounty for this unit.':
    'prefix': 'SetMinimumGoldBounty'
    'body': 'SetMinimumGoldBounty(${1:int a}) ${2:--[[Returns:void\nSet the minimum gold bounty for this unit.\n]]}'
  'No Description Set':
    'prefix': 'SetModel'
    'body': 'SetModel(${1:string modelName}) ${2:--[[Returns:void\nNo Description Set\n]]}'
  'Sets the model\'s scale to scale, so if a unit had its model scale at 1, and you use SetModelScale(10), it would set the scale to 10':
    'prefix': 'SetModelScale'
    'body': 'SetModelScale(${1:float scale}) ${2:--[[Returns:void\nSets the model\'s scale to <i>scale</i>, <br/>so if a unit had its model scale at 1, and you use <i>SetModelScale(<b>10.0</b>)</i>, it would set the scale to <b>10.0</b>.\n]]}'
  'No Description Set':
    'prefix': 'SetMoveCapability'
    'body': 'SetMoveCapability(${1:int a}) ${2:--[[Returns:void\nNo Description Set\n]]}'
  '( hTargetEntity, flTargetRange ) - Try to move this unit to the given range from the target entity.':
    'prefix': 'SetMovementTargetEntity'
    'body': 'SetMovementTargetEntity(${1:handle a}, ${2:float b}) ${3:--[[Returns:void\n( hTargetEntity, flTargetRange ) - Try to move this unit to the given range from the target entity.\n]]}'
  '( vecTargetPosition, flTargetRange ) - Try to move this unit to the given range from the target point.':
    'prefix': 'SetMovementTargetPosition'
    'body': 'SetMovementTargetPosition(${1:Vector a}, ${2:float b}) ${3:--[[Returns:void\n( vecTargetPosition, flTargetRange ) - Try to move this unit to the given range from the target point.\n]]}'
  'Set the move speed gained per level on this creature.':
    'prefix': 'SetMoveSpeedGain'
    'body': 'SetMoveSpeedGain(${1:int a}) ${2:--[[Returns:void\nSet the move speed gained per level on this creature.\n]]}'
  'Set the music status for this player, note this will only really apply if dota_music_battle_enable is off.':
    'prefix': 'SetMusicStatus'
    'body': 'SetMusicStatus(${1:int nMusicStatus}, ${2:float flIntensity}) ${3:--[[Returns:void\nSet the music status for this player, note this will only really apply if dota_music_battle_enable is off.\n]]}'
  'Set whether this NPC is required to reach each goal entity, rather than being allowed to \'unkink\' their path':
    'prefix': 'SetMustReachEachGoalEntity'
    'body': 'SetMustReachEachGoalEntity(${1:bool a}) ${2:--[[Returns:void\nSet whether this NPC is required to reach each goal entity, rather than being allowed to \'unkink\' their path\n]]}'
  'Set light minimum range':
    'prefix': 'SetNearRange'
    'body': 'SetNearRange(${1:float a}) ${2:--[[Returns:void\nSet light minimum range\n]]}'
  'If set to true, we will never attempt to move this unit to clear space, even when it unphases.':
    'prefix': 'SetNeverMoveToClearSpace'
    'body': 'SetNeverMoveToClearSpace(${1:bool a}) ${2:--[[Returns:void\nIf set to true, we will never attempt to move this unit to clear space, even when it unphases.\n]]}'
  'Sets the start time for the Nian fight':
    'prefix': 'SetNianFightStartTime'
    'body': 'SetNianFightStartTime(${1:float a}) ${2:--[[Returns:void\nSets the start time for the Nian fight\n]]}'
  'Set the base vision range.':
    'prefix': 'SetNightTimeVisionRange'
    'body': 'SetNightTimeVisionRange(${1:int a}) ${2:--[[Returns:void\nSet the base vision range.\n]]}'
  'Sets an opvar value for all players':
    'prefix': 'SetOpvarFloatAll'
    'body': 'SetOpvarFloatAll(${1:string a}, ${2:string b}, ${3:string c}, ${4:float d}) ${5:--[[Returns:void\nSets an opvar value for all players\n]]}'
  'Sets an opvar value for a single player ( szStackName, szOperatorName, szOpvarName, flOpvarValue, hEnt )':
    'prefix': 'SetOpvarFloatPlayer'
    'body': 'SetOpvarFloatPlayer(${1:string a}, ${2:string b}, ${3:string c}, ${4:float d}, ${5:handle e}) ${6:--[[Returns:void\nSets an opvar value for a single player ( szStackName, szOperatorName, szOpvarName, flOpvarValue, hEnt )\n]]}'
  'No Description Set':
    'prefix': 'SetOrigin'
    'body': 'SetOrigin(${1:Vector origin}) ${2:--[[Returns:void\nNo Description Set\n]]}'
  'Sets the original model of this entity, which it will tend to fall back to anytime its state changes':
    'prefix': 'SetOriginalModel'
    'body': 'SetOriginalModel(${1:string originalModel}) ${2:--[[Returns:void\nSets the original model of this entity, which it will tend to fall back to anytime its state changes\n]]}'
  'Show this unit\'s health on the overlay health bar':
    'prefix': 'SetOverlayHealthBarUnit'
    'body': 'SetOverlayHealthBarUnit(${1:handle unit}, ${2:int style}) ${3:--[[Returns:void\nShow this unit\'s health on the overlay health bar\n]]}'
  'No Description Set':
    'prefix': 'SetOverrideCastPoint'
    'body': 'SetOverrideCastPoint(${1:float a}) ${2:--[[Returns:void\nNo Description Set\n]]}'
  'Set an override for the default selection entity, instead of each player\'s hero.':
    'prefix': 'SetOverrideSelectionEntity'
    'body': 'SetOverrideSelectionEntity(${1:handle unit}) ${2:--[[Returns:void\nSet an override for the default selection entity, instead of each player\'s hero.\n]]}'
  'Sets this entity\'s owner':
    'prefix': 'SetOwner'
    'body': 'SetOwner(${1:handle owningEntity}) ${2:--[[Returns:void\nSets this entity\'s owner\n]]}'
  'Set the parent for this entity.':
    'prefix': 'SetParent'
    'body': 'SetParent(${1:handle a}, ${2:string b}) ${3:--[[Returns:void\nSet the parent for this entity.\n]]}'
  'No Description Set':
    'prefix': 'SetParticleAlwaysSimulate'
    'body': 'SetParticleAlwaysSimulate(${1:int a}) ${2:--[[Returns:void\nNo Description Set\n]]}'
  'Set the control point data for a control on a particle effect':
    'prefix': 'SetParticleControl'
    'body': 'SetParticleControl(${1:int particleId}, ${2:int controlIndex}, ${3:Vector controlData}) ${4:--[[Returns:void\nSet the control point data for a control on a particle effect\n]]}'
  'No Description Set':
    'prefix': 'SetParticleControlEnt'
    'body': 'SetParticleControlEnt(${1:int a}, ${2:int b}, ${3:handle c}, ${4:int d}, ${5:string e}, ${6:Vector f}, ${7:bool g}) ${8:--[[Returns:void\nNo Description Set\n]]}'
  'Sets base physical armor value.':
    'prefix': 'SetPhysicalArmorBaseValue'
    'body': 'SetPhysicalArmorBaseValue(${1:float a}) ${2:--[[Returns:void\nSets base physical armor value.\n]]}'
  'Override playbackrate':
    'prefix': 'SetPlaybackRate'
    'body': 'SetPlaybackRate(${1:float a}) ${2:--[[Returns:void\nOverride playbackrate\n]]}'
  'No Description Set':
    'prefix': 'SetPlayerID'
    'body': 'SetPlayerID(${1:int a}) ${2:--[[Returns:void\nNo Description Set\n]]}'
  'No Description Set':
    'prefix': 'SetPlayerReservedState'
    'body': 'SetPlayerReservedState(${1:int a}, ${2:bool b}) ${3:--[[Returns:void\nNo Description Set\n]]}'
  'Set the specified pose parameter to the specified value':
    'prefix': 'SetPoseParameter'
    'body': 'SetPoseParameter(${1:string a}, ${2:float b}) ${3:--[[Returns:float\nSet the specified pose parameter to the specified value\n]]}'
  'Sets the amount of time players have between the game ending and the server disconnecting them.':
    'prefix': 'SetPostGameTime'
    'body': 'SetPostGameTime(${1:float time}) ${2:--[[Returns:void\nSets the amount of time players have between the game ending and the server disconnecting them.\n]]}'
  'Sets the amount of time players have between picking their hero and game start.':
    'prefix': 'SetPreGameTime'
    'body': 'SetPreGameTime(${1:float time}) ${2:--[[Returns:void\nSets the amount of time players have between picking their hero and game start.\n]]}'
  'Set the purchaser of record for this item.':
    'prefix': 'SetPurchaser'
    'body': 'SetPurchaser(${1:handle a}) ${2:--[[Returns:void\nSet the purchaser of record for this item.\n]]}'
  'Set the purchase time of this item':
    'prefix': 'SetPurchaseTime'
    'body': 'SetPurchaseTime(${1:float a}) ${2:--[[Returns:void\nSet the purchase time of this item\n]]}'
  'Set light quadratic attenuation value':
    'prefix': 'SetQuadraticAttenuation'
    'body': 'SetQuadraticAttenuation(${1:float a}) ${2:--[[Returns:void\nSet light quadratic attenuation value\n]]}'
  'Set the current quest name.':
    'prefix': 'SetQuestName'
    'body': 'SetQuestName(${1:string a}) ${2:--[[Returns:void\nSet the current quest name.\n]]}'
  'Set the current quest phase.':
    'prefix': 'SetQuestPhase'
    'body': 'SetQuestPhase(${1:int a}) ${2:--[[Returns:void\nSet the current quest phase.\n]]}'
  'No Description Set':
    'prefix': 'SetRangedProjectileName'
    'body': 'SetRangedProjectileName(${1:string a}) ${2:--[[Returns:void\nNo Description Set\n]]}'
  'Turn the panel for showing recommended items at the shop off/on. Takes a \'\'bool\'\'.':
    'prefix': 'SetRecommendedItemsDisabled'
    'body': 'SetRecommendedItemsDisabled(${1:bool a}) ${2:--[[Returns:void\nTurn the panel for showing recommended items at the shop off/on. Takes a \'\'bool\'\'.\n]]}'
  'No Description Set':
    'prefix': 'SetRefCountsModifiers'
    'body': 'SetRefCountsModifiers(${1:bool a}) ${2:--[[Returns:void\nNo Description Set\n]]}'
  'Make it so illusions are immediately removed upon death, rather than sticking around for a few seconds.':
    'prefix': 'SetRemoveIllusionsOnDeath'
    'body': 'SetRemoveIllusionsOnDeath(${1:bool a}) ${2:--[[Returns:void\nMake it so illusions are immediately removed upon death, rather than sticking around for a few seconds.\n]]}'
  'SetRenderColor( r, g, b ): Sets the render color of the entity.':
    'prefix': 'SetRenderColor'
    'body': 'SetRenderColor(${1:int a}, ${2:int b}, ${3:int c}) ${4:--[[Returns:void\nSetRenderColor( r, g, b ): Sets the render color of the entity.\n]]}'
  'Set rendering on/off for an \'\'ehandle\'\'':
    'prefix': 'SetRenderingEnabled'
    'body': 'SetRenderingEnabled(${1:ehandle a}, ${2:bool b}) ${3:--[[Returns:void\nSet rendering on/off for an \'\'ehandle\'\'\n]]}'
  'No Description Set':
    'prefix': 'SetRespawnPosition'
    'body': 'SetRespawnPosition(${1:Vector a}) ${2:--[[Returns:void\nNo Description Set\n]]}'
  'Scale the rune icons on the minimap.':
    'prefix': 'SetRuneMinimapIconScale'
    'body': 'SetRuneMinimapIconScale(${1:float scale}) ${2:--[[Returns:void\nScale the rune icons on the minimap.\n]]}'
  'Sets the amount of time between rune spawns.':
    'prefix': 'SetRuneSpawnTime'
    'body': 'SetRuneSpawnTime(${1:float time}) ${2:--[[Returns:void\nSets the amount of time between rune spawns.\n]]}'
  'Mark this game as safe to leave.':
    'prefix': 'SetSafeToLeave'
    'body': 'SetSafeToLeave(${1:bool safeToLeave}) ${2:--[[Returns:void\nMark this game as safe to leave.\n]]}'
  'When true, players can repeatedly pick the same hero.':
    'prefix': 'SetSameHeroSelectionEnabled'
    'body': 'SetSameHeroSelectionEnabled(${1:bool enabled}) ${2:--[[Returns:void\nWhen true, players can repeatedly pick the same hero.\n]]}'
  '( flSightRange ) - set range of unit\'s 360 degree sensing sphere':
    'prefix': 'SetSensingSphereRange'
    'body': 'SetSensingSphereRange(${1:float a}) ${2:--[[Returns:void\n( flSightRange ) - set range of unit\'s 360 degree sensing sphere\n]]}'
  '( flAngleDegrees ) - sets angle in which the unit can see things up to sight range':
    'prefix': 'SetSightConeAngle'
    'body': 'SetSightConeAngle(${1:float a}) ${2:--[[Returns:void\n( flAngleDegrees ) - sets angle in which the unit can see things up to sight range\n]]}'
  '( fRange ) - set range of unit\'s sight cone':
    'prefix': 'SetSightConeRange'
    'body': 'SetSightConeRange(${1:float a}) ${2:--[[Returns:void\n( fRange ) - set range of unit\'s sight cone\n]]}'
  'No Description Set':
    'prefix': 'SetSize'
    'body': 'SetSize(${1:Vector a}, ${2:Vector b}) ${3:--[[Returns:void\nNo Description Set\n]]}'
  'SetSpawnCallback( hCallbackFunc, hCallbackScope, hCallbackData ) : Set a callback for when the template spawns entities. The spawned entities will be passed in as an array.':
    'prefix': 'SetSpawnCallback'
    'body': 'SetSpawnCallback(${1:handle a}, ${2:handle b}) ${3:--[[Returns:void\nSetSpawnCallback( hCallbackFunc, hCallbackScope, hCallbackData ) : Set a callback for when the template spawns entities. The spawned entities will be passed in as an array.\n]]}'
  'No Description Set':
    'prefix': 'SetStacksWithOtherOwners'
    'body': 'SetStacksWithOtherOwners(${1:bool a}) ${2:--[[Returns:void\nNo Description Set\n]]}'
  'No Description Set':
    'prefix': 'SetStolen'
    'body': 'SetStolen(${1:bool a}) ${2:--[[Returns:void\nNo Description Set\n]]}'
  'No Description Set':
    'prefix': 'SetStolenScepter'
    'body': 'SetStolenScepter(${1:bool a}) ${2:--[[Returns:void\nNo Description Set\n]]}'
  'SetStr(name, val) : sets the value of the convar to the \'\'string\'\'.':
    'prefix': 'SetStr'
    'body': 'SetStr(${1:string a}, ${2:string b}) ${3:--[[Returns:void\nSetStr(name, val) : sets the value of the convar to the \'\'string\'\'.\n]]}'
  'No Description Set':
    'prefix': 'SetTeam'
    'body': 'SetTeam(${1:int team}) ${2:--[[Returns:void\nNo Description Set\n]]}'
  'Set the text replace \'\'string\'\' for this subquest':
    'prefix': 'SetTextReplaceString'
    'body': 'SetTextReplaceString(${1:string a}) ${2:--[[Returns:void\nSet the text replace \'\'string\'\' for this subquest\n]]}'
  'Set a subquest value':
    'prefix': 'SetTextReplaceValue'
    'body': 'SetTextReplaceValue(${1:int a}, ${2:int b}) ${3:--[[Returns:void\nSet a subquest value\n]]}'
  'Set the time of day.':
    'prefix': 'SetTimeOfDay'
    'body': 'SetTimeOfDay(${1:float time}) ${2:--[[Returns:void\nSet the time of day.\n]]}'
  'No Description Set':
    'prefix': 'SetTimeUntilRespawn'
    'body': 'SetTimeUntilRespawn(${1:float a}) ${2:--[[Returns:void\nNo Description Set\n]]}'
  'Set the team values on the top game bar.':
    'prefix': 'SetTopBarTeamValue'
    'body': 'SetTopBarTeamValue(${1:int a}, ${2:int b}) ${3:--[[Returns:void\nSet the team values on the top game bar.\n]]}'
  'Override the values of the team values on the top game bar.':
    'prefix': 'SetTopBarTeamValuesOverride'
    'body': 'SetTopBarTeamValuesOverride(${1:bool a}) ${2:--[[Returns:void\nOverride the values of the team values on the top game bar.\n]]}'
  'Turning on/off the team values on the top game bar.':
    'prefix': 'SetTopBarTeamValuesVisible'
    'body': 'SetTopBarTeamValuesVisible(${1:bool a}) ${2:--[[Returns:void\nTurning on/off the team values on the top game bar.\n]]}'
  'Enables/Disables tower backdoor protection':
    'prefix': 'SetTowerBackdoorProtectionEnabled'
    'body': 'SetTowerBackdoorProtectionEnabled(${1:bool a}) ${2:--[[Returns:void\nEnables/Disables tower backdoor protection\n]]}'
  'Sets the tree regrow time in seconds.':
    'prefix': 'SetTreeRegrowTime'
    'body': 'SetTreeRegrowTime(${1:float time}) ${2:--[[Returns:void\nSets the tree regrow time in seconds.\n]]}'
  '( flTurnRate ) - sets unit\'s turn rate in degrees per second':
    'prefix': 'SetTurnRate'
    'body': 'SetTurnRate(${1:float a}) ${2:--[[Returns:void\n( flTurnRate ) - sets unit\'s turn rate in degrees per second\n]]}'
  'No Description Set':
    'prefix': 'SetUnitName'
    'body': 'SetUnitName(${1:string a}) ${2:--[[Returns:void\nNo Description Set\n]]}'
  'No Description Set':
    'prefix': 'SetUnitShareMaskForPlayer'
    'body': 'SetUnitShareMaskForPlayer(${1:int a}, ${2:int b}, ${3:int c}, ${4:bool d}) ${5:--[[Returns:void\nNo Description Set\n]]}'
  'Heroes will use the basic NPC functionality for determining their bounty, rather than DOTA specific formulas.':
    'prefix': 'SetUseBaseGoldBountyOnHeroes'
    'body': 'SetUseBaseGoldBountyOnHeroes(${1:bool a}) ${2:--[[Returns:void\nHeroes will use the basic NPC functionality for determining their bounty, rather than DOTA specific formulas.\n]]}'
  'Turn on custom-defined XP values for hero level ups. The \'\'table\'\' should be defined before switching this on.':
    'prefix': 'SetUseCustomHeroLevels'
    'body': 'SetUseCustomHeroLevels(${1:bool a}) ${2:--[[Returns:void\nTurn on custom-defined XP values for hero level ups. The \'\'table\'\' should be defined before switching this on.\n]]}'
  'Allows heroes in the map to give a specific amount of XP (this value must be set).':
    'prefix': 'SetUseCustomHeroXPValues'
    'body': 'SetUseCustomHeroXPValues(${1:bool a}) ${2:--[[Returns:void\nAllows heroes in the map to give a specific amount of XP (this value must be set).\n]]}'
  'When true, all items are available at as long as any shop is in range, including Secret Shop items':
    'prefix': 'SetUseUniversalShopMode'
    'body': 'SetUseUniversalShopMode(${1:bool enabled}) ${2:--[[Returns:void\nWhen true, all items are available at as long as any shop is in range, including Secret Shop items\n]]}'
  'No Description Set':
    'prefix': 'SetVelocity'
    'body': 'SetVelocity(${1:Vector velocity}) ${2:--[[Returns:void\nNo Description Set\n]]}'
  'Turn on/off light volumetrics: \'\'bool\'\' bOn, \'\'float\'\' flIntensity, \'\'float\'\' flNoise, \'\'int\'\' nPlanes, \'\'float\'\' flPlaneOffset':
    'prefix': 'SetVolumetrics'
    'body': 'SetVolumetrics(${1:bool a}, ${2:float b}, ${3:float c}, ${4:int d}, ${5:float e}) ${6:--[[Returns:void\nTurn on/off light volumetrics: \'\'bool\'\' bOn, \'\'float\'\' flIntensity, \'\'float\'\' flNoise, \'\'int\'\' nPlanes, \'\'float\'\' flPlaneOffset\n]]}'
  'Set the xp reward gained per level on this creature.':
    'prefix': 'SetXPGain'
    'body': 'SetXPGain(${1:int a}) ${2:--[[Returns:void\nSet the xp reward gained per level on this creature.\n]]}'
  'No Description Set':
    'prefix': 'ShouldDoFlyHeightVisual'
    'body': 'ShouldDoFlyHeightVisual() ${1:--[[Returns:bool\nNo Description Set\n]]}'
  'No Description Set':
    'prefix': 'ShouldIdleAcquire'
    'body': 'ShouldIdleAcquire() ${1:--[[Returns:bool\nNo Description Set\n]]}'
  'No Description Set':
    'prefix': 'ShouldUseResources'
    'body': 'ShouldUseResources() ${1:--[[Returns:bool\nNo Description Set\n]]}'
  'Shows a generic popup to all users':
    'prefix': 'ShowGenericPopup'
    'body': 'ShowGenericPopup(${1:string title}, ${2:string content}, ${3:string unknown}, ${4:string unknown}, ${5:int containerType}) ${6:--[[Returns:void\nShows a generic popup to all users\n]]}'
  'Show a generic popup dialog to a specific player.':
    'prefix': 'ShowGenericPopupToPlayer'
    'body': 'ShowGenericPopupToPlayer(${1:handle a}, ${2:string b}, ${3:string c}, ${4:string d}, ${5:string e}, ${6:int f}) ${7:--[[Returns:void\nShow a generic popup dialog to a specific player.\n]]}'
  'Print a hud message on all clients':
    'prefix': 'ShowMessage'
    'body': 'ShowMessage(${1:string a}) ${2:--[[Returns:void\nPrint a hud message on all clients\n]]}'
  'Draws a solid cone. Specify endpoint and direction in world space.':
    'prefix': 'SolidCone'
    'body': 'SolidCone(${1:Vector a}, ${2:Vector b}, ${3:float c}, ${4:float d}, ${5:int e}, ${6:int f}, ${7:int g}, ${8:int h}, ${9:bool i}, ${10:float j}) ${11:--[[Returns:void\nDraws a solid cone. Specify endpoint and direction in world space.\n]]}'
  'Create an entity at the location of the maker':
    'prefix': 'SpawnEntity'
    'body': 'SpawnEntity() ${1:--[[Returns:void\nCreate an entity at the location of the maker\n]]}'
  'Create an entity at the location of a specified entity instance':
    'prefix': 'SpawnEntityAtEntityOrigin'
    'body': 'SpawnEntityAtEntityOrigin(${1:handle a}) ${2:--[[Returns:void\nCreate an entity at the location of a specified entity instance\n]]}'
  'Create an entity at a specified location and orientaton, orientation is Euler angle in degrees (pitch, yaw, roll)':
    'prefix': 'SpawnEntityAtLocation'
    'body': 'SpawnEntityAtLocation(${1:Vector a}, ${2:Vector b}) ${3:--[[Returns:void\nCreate an entity at a specified location and orientaton, orientation is Euler angle in degrees (pitch, yaw, roll)\n]]}'
  'Create an entity at the location of a named entity':
    'prefix': 'SpawnEntityAtNamedEntityOrigin'
    'body': 'SpawnEntityAtNamedEntityOrigin(${1:string a}) ${2:--[[Returns:void\nCreate an entity at the location of a named entity\n]]}'
  'Synchronously spawns a single entity from a \'\'table\'\'':
    'prefix': 'SpawnEntityFromTableSynchronous'
    'body': 'SpawnEntityFromTableSynchronous(${1:string a}, ${2:handle b}) ${3:--[[Returns:handle\nSynchronously spawns a single entity from a \'\'table\'\'\n]]}'
  'Hierarchically spawn an entity group from a set of spawn tables.':
    'prefix': 'SpawnEntityGroupFromTable'
    'body': 'SpawnEntityGroupFromTable(${1:handle groupSpawnTables}, ${2:bool bAsync}, ${3:handle hCallback}) ${4:--[[Returns:bool\nHierarchically spawn an entity group from a set of spawn tables.\n]]}'
  'Asynchronously spawn an entity group from a list of spawn table\'s. A callback will be triggered when the spawning is complete':
    'prefix': 'SpawnEntityListFromTableAsynchronous'
    'body': 'SpawnEntityListFromTableAsynchronous(${1:handle a}, ${2:handle b}) ${3:--[[Returns:int\nAsynchronously spawn an entity group from a list of spawn table\'s. A callback will be triggered when the spawning is complete\n]]}'
  'Synchronously spawn an entity group from a list of spawn table\'s.':
    'prefix': 'SpawnEntityListFromTableSynchronous'
    'body': 'SpawnEntityListFromTableSynchronous(${1:handle a}) ${2:--[[Returns:handle\nSynchronously spawn an entity group from a list of spawn table\'s.\n]]}'
  'No Description Set':
    'prefix': 'SpeakAbilityConcept'
    'body': 'SpeakAbilityConcept(${1:int a}) ${2:--[[Returns:void\nNo Description Set\n]]}'
  'No Description Set':
    'prefix': 'SpeakTrigger'
    'body': 'SpeakTrigger() ${1:--[[Returns:bool\nNo Description Set\n]]}'
  'Args: \'\'int\'\' nGold, \'\'int\'\' nReason':
    'prefix': 'SpendGold'
    'body': 'SpendGold(${1:int a}, ${2:int b}) ${3:--[[Returns:void\nArgs: \'\'int\'\' nGold, \'\'int\'\' nReason\n]]}'
  'Spend mana from this unit, this can be used for spending mana from abilities or item usage.':
    'prefix': 'SpendMana'
    'body': 'SpendMana(${1:float a}, ${2:handle b}) ${3:--[[Returns:void\nSpend mana from this unit, this can be used for spending mana from abilities or item usage.\n]]}'
  'Draws a wireframe sphere. Specify center in world space.':
    'prefix': 'Sphere'
    'body': 'Sphere(${1:Vector a}, ${2:float b}, ${3:int c}, ${4:int d}, ${5:int e}, ${6:int f}, ${7:bool g}, ${8:float h}) ${9:--[[Returns:void\nDraws a wireframe sphere. Specify center in world space.\n]]}'
  '(quaternion,quaternion,\'\'float\'\') very basic interpolation of v0 to v1 over t on [0,1]':
    'prefix': 'SplineQuaternions'
    'body': 'SplineQuaternions(${1:Quaternion a}, ${2:Quaternion b}, ${3:float c}) ${4:--[[Returns:Quaternion\n(quaternion,quaternion,\'\'float\'\') very basic interpolation of v0 to v1 over t on [0,1]\n]]}'
  '(\'\'vector\'\',\'\'vector\'\',\'\'float\'\') very basic interpolation of v0 to v1 over t on [0,1]':
    'prefix': 'SplineVectors'
    'body': 'SplineVectors(${1:Vector a}, ${2:Vector b}, ${3:float c}) ${4:--[[Returns:Vector\n(\'\'vector\'\',\'\'vector\'\',\'\'float\'\') very basic interpolation of v0 to v1 over t on [0,1]\n]]}'
  'No Description Set':
    'prefix': 'StacksWithOtherOwners'
    'body': 'StacksWithOtherOwners() ${1:--[[Returns:bool\nNo Description Set\n]]}'
  'Start scene playback, takes activatorEntity as param':
    'prefix': 'Start'
    'body': 'Start(${1:handle a}) ${2:--[[Returns:void\nStart scene playback, takes activatorEntity as param\n]]}'
  'param: flCooldown':
    'prefix': 'StartCooldown'
    'body': 'StartCooldown(${1:float a}) ${2:--[[Returns:void\nparam: flCooldown\n]]}'
  'Start a sound event':
    'prefix': 'StartSoundEvent'
    'body': 'StartSoundEvent(${1:string a}, ${2:handle b}) ${3:--[[Returns:void\nStart a sound event\n]]}'
  'Starts a vote, based upon a \'\'table\'\' of parameters':
    'prefix': 'StartVote'
    'body': 'StartVote(${1:handle a}) ${2:--[[Returns:void\nStarts a vote, based upon a \'\'table\'\' of parameters\n]]}'
  'Get the current Gamerules state':
    'prefix': 'State_Get'
    'body': 'State_Get() ${1:--[[Returns:<>\nGet the current Gamerules state\n]]}'
  'Stop the current order.':
    'prefix': 'Stop'
    'body': 'Stop() ${1:--[[Returns:void\nStop the current order.\n]]}'
  '(hEntity, szEffectName)':
    'prefix': 'StopEffect'
    'body': 'StopEffect(${1:handle a}, ${2:string b}) ${3:--[[Returns:void\n(hEntity, szEffectName)\n]]}'
  'Stop listening to all game events within a specific context.':
    'prefix': 'StopListeningToAllGameEvents'
    'body': 'StopListeningToAllGameEvents(${1:handle a}) ${2:--[[Returns:void\nStop listening to all game events within a specific context.\n]]}'
  'Stop listening to a particular game event.':
    'prefix': 'StopListeningToGameEvent'
    'body': 'StopListeningToGameEvent(${1:int a}) ${2:--[[Returns:bool\nStop listening to a particular game event.\n]]}'
  'Stops a named sound playing from this entity.':
    'prefix': 'StopSound'
    'body': 'StopSound(${1:string soundName}) ${2:--[[Returns:void\nStops a named sound playing from this entity.\n]]}'
  'Stops a sound event':
    'prefix': 'StopSoundEvent'
    'body': 'StopSoundEvent(${1:string a}, ${2:handle b}) ${3:--[[Returns:void\nStops a sound event\n]]}'
  'Stop named sound on Entity':
    'prefix': 'StopSoundOn'
    'body': 'StopSoundOn(${1:string soundName}, ${2:handle playingEntity}) ${3:--[[Returns:void\nStop named sound on Entity\n]]}'
  '\n\t\t\t* Directory traversal doesn\'t seem to work. The characters \'.\', \'/\' and \'\\\\\' are ignored.\n\t\t\t* The file name cannot be blank, nor can it consist only of the ignored characters, else the function will do nothing and return false.\n\t\t\t* Only one string can be stored at a time, the file is overwritten to at every call.\n\t\t\t* The file ends with a NUL character.\n\t\t\t* The files are stored at C:\\Program Files (x86)\\Steam\\steamapps\\common\\dota 2 beta\\dota_ugc\\game\\dota\\ems\n\t\t* The function is used in conjunction with [[Dota_2_Workshop_Tools/Scripting/API/Global.FileToString|FileToString]]':
    'prefix': 'StringToFile'
    'body': 'StringToFile(${1:string a}, ${2:string b}) ${3:--[[Returns:bool\n\n\t\t\t* Directory traversal doesn\'t seem to work. The characters \'.\', \'/\' and \'\\\\\' are ignored.\n\t\t\t* The file name cannot be blank, nor can it consist only of the ignored characters, else the function will do nothing and return false.\n\t\t\t* Only one string can be stored at a time, the file is overwritten to at every call.\n\t\t\t* The file ends with a NUL character.\n\t\t\t* The files are stored at C:\\Program Files (x86)\\Steam\\steamapps\\common\\dota 2 beta\\dota_ugc\\game\\dota\\ems\n\t\t* The function is used in conjunction with [[Dota_2_Workshop_Tools/Scripting/API/Global.FileToString|FileToString]]\n]]}'
  'Swaps the slots of the two passed abilities and sets them enabled/disabled: const char* AbilityName1, const char* AbilityName2, \'\'bool\'\' bEnable1, \'\'bool\'\' bEnable2. The boolean controls which ability is active. The ability order is never swapped when swapping abilities, only the boolean statements are flipped.':
    'prefix': 'SwapAbilities'
    'body': 'SwapAbilities(${1:string a}, ${2:string b}, ${3:bool c}, ${4:bool d}) ${5:--[[Returns:void\nSwaps the slots of the two passed abilities and sets them enabled/disabled: const char* AbilityName1, const char* AbilityName2, \'\'bool\'\' bEnable1, \'\'bool\'\' bEnable2. The boolean controls which ability is active. The ability order is never swapped when swapping abilities, only the boolean statements are flipped.\n]]}'
  'Draws a swept box. Specify endpoint\'s in world space and the bounds in local space.':
    'prefix': 'SweptBox'
    'body': 'SweptBox(${1:Vector a}, ${2:Vector b}, ${3:Vector c}, ${4:Vector d}, ${5:Quaternion e}, ${6:int f}, ${7:int g}, ${8:int h}, ${9:int i}, ${10:float j}) ${11:--[[Returns:void\nDraws a swept box. Specify endpoint\'s in world space and the bounds in local space.\n]]}'
  'Draws 2D text. Specify origin in world space.':
    'prefix': 'Text'
    'body': 'Text(${1:Vector a}, ${2:int b}, ${3:string c}, ${4:float d}, ${5:int e}, ${6:int f}, ${7:int g}, ${8:int h}, ${9:float i}) ${10:--[[Returns:void\nDraws 2D text. Specify origin in world space.\n]]}'
  'Draws a screen-space texture. Coordinates are in pixels.':
    'prefix': 'Texture'
    'body': 'Texture(${1:string a}, ${2:Vector2D b}, ${3:Vector2D c}, ${4:int d}, ${5:int e}, ${6:int f}, ${7:int g}, ${8:Vector2D h}, ${9:Vector2D i}, ${10:float j}) ${11:--[[Returns:void\nDraws a screen-space texture. Coordinates are in pixels.\n]]}'
  'Think this item':
    'prefix': 'Think'
    'body': 'Think() ${1:--[[Returns:void\nThink this item\n]]}'
  'Get the current server time':
    'prefix': 'Time'
    'body': 'Time() ${1:--[[Returns:float\nGet the current server time\n]]}'
  'No Description Set':
    'prefix': 'TimeUntilNextAttack'
    'body': 'TimeUntilNextAttack() ${1:--[[Returns:float\nNo Description Set\n]]}'
  'No Description Set':
    'prefix': 'ToggleAbility'
    'body': 'ToggleAbility() ${1:--[[Returns:void\nNo Description Set\n]]}'
  'No Description Set':
    'prefix': 'ToggleAutoCast'
    'body': 'ToggleAutoCast() ${1:--[[Returns:void\nNo Description Set\n]]}'
  'Pass \'\'table\'\' - Inputs: start, end, ent, (optional mins, maxs) -- outputs: pos, fraction, hit, startsolid, normal':
    'prefix': 'TraceCollideable'
    'body': 'TraceCollideable(${1:handle a}) ${2:--[[Returns:bool\nPass \'\'table\'\' - Inputs: start, end, ent, (optional mins, maxs) -- outputs: pos, fraction, hit, startsolid, normal\n]]}'
  'Pass \'\'table\'\' - Inputs: start, end, min, max, mask, ignore  -- outputs: pos, fraction, hit, enthit, startsolid':
    'prefix': 'TraceHull'
    'body': 'TraceHull(${1:handle a}) ${2:--[[Returns:bool\nPass \'\'table\'\' - Inputs: start, end, min, max, mask, ignore  -- outputs: pos, fraction, hit, enthit, startsolid\n]]}'
  'Pass \'\'table\'\' - Inputs: startpos, endpos, mask, ignore  -- outputs: pos, fraction, hit, enthit, startsolid':
    'prefix': 'TraceLine'
    'body': 'TraceLine(${1:handle a}) ${2:--[[Returns:bool\nPass \'\'table\'\' - Inputs: startpos, endpos, mask, ignore  -- outputs: pos, fraction, hit, enthit, startsolid\n]]}'
  'Draws a filled triangle. Specify vertices in world space.':
    'prefix': 'Triangle'
    'body': 'Triangle(${1:Vector a}, ${2:Vector b}, ${3:Vector c}, ${4:int d}, ${5:int e}, ${6:int f}, ${7:int g}, ${8:bool h}, ${9:float i}) ${10:--[[Returns:void\nDraws a filled triangle. Specify vertices in world space.\n]]}'
  'Fires off this entity\'s OnTrigger responses':
    'prefix': 'Trigger'
    'body': 'Trigger() ${1:--[[Returns:void\nFires off this entity\'s OnTrigger responses\n]]}'
  'No Description Set':
    'prefix': 'TriggerModifierDodge'
    'body': 'TriggerModifierDodge() ${1:--[[Returns:bool\nNo Description Set\n]]}'
  'Query whether the passed ability will trigger spell absorb on this unit.':
    'prefix': 'TriggerSpellAbsorb'
    'body': 'TriggerSpellAbsorb(${1:handle a}) ${2:--[[Returns:bool\nQuery whether the passed ability will trigger spell absorb on this unit.\n]]}'
  'No Description Set':
    'prefix': 'UnitCanRespawn'
    'body': 'UnitCanRespawn() ${1:--[[Returns:bool\nNo Description Set\n]]}'
  'Toggles the overlay render type, for unit tests':
    'prefix': 'UnitTestCycleOverlayRenderType'
    'body': 'UnitTestCycleOverlayRenderType() ${1:--[[Returns:void\nToggles the overlay render type, for unit tests\n]]}'
  'Unload a spawn group by name':
    'prefix': 'UnloadSpawnGroup'
    'body': 'UnloadSpawnGroup(${1:string a}) ${2:--[[Returns:void\nUnload a spawn group by name\n]]}'
  'Unload a spawn group by \'\'handle\'\'':
    'prefix': 'UnloadSpawnGroupByHandle'
    'body': 'UnloadSpawnGroupByHandle(${1:int a}) ${2:--[[Returns:void\nUnload a spawn group by \'\'handle\'\'\n]]}'
  'No Description Set':
    'prefix': 'UpdateEventPoints'
    'body': 'UpdateEventPoints(${1:handle a}) ${2:--[[Returns:void\nNo Description Set\n]]}'
  'No Description Set':
    'prefix': 'UpdateTeamSlot'
    'body': 'UpdateTeamSlot(${1:int a}, ${2:int b}) ${3:--[[Returns:void\nNo Description Set\n]]}'
  'This upgrades the passed ability if it exists and the hero has enough ability point\'s.':
    'prefix': 'UpgradeAbility'
    'body': 'UpgradeAbility(${1:handle a}) ${2:--[[Returns:void\nThis upgrades the passed ability if it exists and the hero has enough ability point\'s.\n]]}'
  'No Description Set':
    'prefix': 'UseResources'
    'body': 'UseResources(${1:bool a}, ${2:bool b}, ${3:bool c}) ${4:--[[Returns:void\nNo Description Set\n]]}'
  'Removes the specified entity':
    'prefix': 'UTIL_Remove'
    'body': 'UTIL_Remove(${1:handle a}) ${2:--[[Returns:void\nRemoves the specified entity\n]]}'
  'Immediately removes the specified entity':
    'prefix': 'UTIL_RemoveImmediate'
    'body': 'UTIL_RemoveImmediate(${1:handle a}) ${2:--[[Returns:void\nImmediately removes the specified entity\n]]}'
  'Draws 3D text. Specify origin + orientation in world space.':
    'prefix': 'VectorText3D'
    'body': 'VectorText3D(${1:Vector a}, ${2:Quaternion b}, ${3:string c}, ${4:int d}, ${5:int e}, ${6:int f}, ${7:int g}, ${8:bool h}, ${9:float i}) ${10:--[[Returns:void\nDraws 3D text. Specify origin + orientation in world space.\n]]}'
  'Get Qangles (with no roll) for a \'\'Vector\'\'.':
    'prefix': 'VectorToAngles'
    'body': 'VectorToAngles(${1:Vector a}) ${2:--[[Returns:QAngle\nGet Qangles (with no roll) for a \'\'Vector\'\'.\n]]}'
  'Draws a vertical arrow. Specify endpoint\'s in world space.':
    'prefix': 'VertArrow'
    'body': 'VertArrow(${1:Vector a}, ${2:Vector b}, ${3:float c}, ${4:int d}, ${5:int e}, ${6:int f}, ${7:int g}, ${8:bool h}, ${9:float i}) ${10:--[[Returns:void\nDraws a vertical arrow. Specify endpoint\'s in world space.\n]]}'
  'Print a warning':
    'prefix': 'Warning'
    'body': 'Warning(${1:string a}) ${2:--[[Returns:void\nPrint a warning\n]]}'
  'No Description Set':
    'prefix': 'WhoSelectedHero'
    'body': 'WhoSelectedHero(${1:string a}) ${2:--[[Returns:int\nNo Description Set\n]]}'
  'No Description Set':
    'prefix': 'WillReincarnate'
    'body': 'WillReincarnate() ${1:--[[Returns:bool\nNo Description Set\n]]}'
  'Get the X index of a given world X position':
    'prefix': 'WorldToGridPosX'
    'body': 'WorldToGridPosX(${1:float a}) ${2:--[[Returns:int\nGet the X index of a given world X position\n]]}'
  'Get the Y index of a given world Y position':
    'prefix': 'WorldToGridPosY'
    'body': 'WorldToGridPosY(${1:float a}) ${2:--[[Returns:int\nGet the Y index of a given world Y position\n]]}'
  'Draws a arrow associated with a specific yaw. Specify endpoint\'s in world space.':
    'prefix': 'YawArrow'
    'body': 'YawArrow(${1:Vector a}, ${2:float b}, ${3:float c}, ${4:float d}, ${5:int e}, ${6:int f}, ${7:int g}, ${8:int h}, ${9:bool i}, ${10:float j}) ${11:--[[Returns:void\nDraws a arrow associated with a specific yaw. Specify endpoint\'s in world space.\n]]}'
  'Overloaded +.  Adds vectors together':
    'prefix': '__add'
    'body': '__add(${1:Vector a}, ${2:Vector b}) ${3:--[[Returns:Vector\nOverloaded +.  Adds vectors together\n]]}'
  'Overloaded /.  Divides vectors':
    'prefix': '__div'
    'body': '__div(${1:Vector a}, ${2:Vector b}) ${3:--[[Returns:Vector\nOverloaded /.  Divides vectors\n]]}'
  'Overloaded ==.  Tests for Equality':
    'prefix': '__eq'
    'body': '__eq(${1:Vector a}, ${2:Vector b}) ${3:--[[Returns:bool\nOverloaded ==.  Tests for Equality\n]]}'
  'Overloaded # returns the length of the vector':
    'prefix': '__len'
    'body': '__len() ${1:--[[Returns:float\nOverloaded # returns the length of the vector\n]]}'
  'Overloaded * returns the vectors multiplied together':
    'prefix': '__mul'
    'body': '__mul(${1:Vector a}, ${2:Vector b}) ${3:--[[Returns:Vector\nOverloaded * returns the vectors multiplied together\n]]}'
  'Overloaded -.  Subtracts vectors':
    'prefix': '__sub'
    'body': '__sub(${1:Vector a}, ${2:Vector b}) ${3:--[[Returns:Vector\nOverloaded -.  Subtracts vectors\n]]}'
  'Overloaded .. Converts vectors to strings':
    'prefix': '__tostring'
    'body': '__tostring() ${1:--[[Returns:string\nOverloaded .. Converts vectors to strings\n]]}'
  'Overloaded - operator':
    'prefix': '__unb'
    'body': '__unb() ${1:--[[Returns:Vector\nOverloaded - operator\n]]}'
  'for i,v in ipairs()':
    'prefix': 'fori'
    'body': 'for ${1:i},${2:v} in ipairs(${3:table_name}) do\n\t${0:print(i,v)}\nend'
  'for i=1,10':
    'prefix': 'for'
    'body': 'for ${1:i}=${2:1},${3:10} do\n\t${0:print(i)}\nend'
  'for k,v in pairs()':
    'prefix': 'forp'
    'body': 'for ${1:k},${2:v} in pairs(${3:table_name}) do\n\t${0:print(k,v)}\nend'
  'function':
    'prefix': 'fun'
    'body': 'function ${1:function_name}( ${2:...} )\n\t${0:-- body}\nend'
  'function':
    'prefix': 'function'
    'body': 'function ${1:function_name}( ${2:...} )\n\t${0:-- body}\nend'
  'local x = 1':
    'prefix': 'local'
    'body': 'local ${1:x} = ${0:1}'
  'table.concat':
    'prefix': 'table.concat'
    'body': 'table.concat( ${1:tablename}${2:, ", "}${3:, start_index}${4:, end_index} )'
  'table.sort':
    'prefix': 'table.sort'
    'body': 'table.sort( ${1:tablename}${2:, sortfunction} )'
